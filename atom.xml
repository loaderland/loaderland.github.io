<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LoaderLand</title>
  
  <subtitle>幸せになる</subtitle>
  <link href="https://loaderland.github.io/atom.xml" rel="self"/>
  
  <link href="https://loaderland.github.io/"/>
  <updated>2024-05-20T08:12:28.679Z</updated>
  <id>https://loaderland.github.io/</id>
  
  <author>
    <name>LoaderLand</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker</title>
    <link href="https://loaderland.github.io/2024/05/20/Docker/"/>
    <id>https://loaderland.github.io/2024/05/20/Docker/</id>
    <published>2024-05-20T02:14:21.000Z</published>
    <updated>2024-05-20T08:12:28.679Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="镜像（Image）"><a href="#镜像（Image）" class="headerlink" title="镜像（Image）"></a>镜像（Image）</h3><blockquote><p><strong>Docker 镜像</strong> 是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像 <strong>不包含</strong> 任何动态数据，其内容在构建之后也不会被改变。</p></blockquote><h3 id="容器-Container"><a href="#容器-Container" class="headerlink" title="容器(Container)"></a>容器(Container)</h3><blockquote><p>镜像（<code>Image</code>）和容器（<code>Container</code>）的关系，就像是面向对象程序设计中的 <code>类</code> 和 <code>实例</code> 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 <a href="https://en.wikipedia.org/wiki/Linux_namespaces">命名空间</a>。因此容器可以拥有自己的 <code>root</code> 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。</p><p>按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 <a href="https://yeasy.gitbook.io/docker_practice/data_management/volume">数据卷（Volume）</a>、或者 <a href="https://yeasy.gitbook.io/docker_practice/data_management/bind-mounts">绑定宿主目录</a>，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。</p><p>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。</p></blockquote><h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><blockquote><p>镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，<a href="https://yeasy.gitbook.io/docker_practice/repository/registry">Docker Registry</a> 就是这样的服务。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="CS" scheme="https://loaderland.github.io/categories/CS/"/>
    
    
    <category term="docker" scheme="https://loaderland.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="https://loaderland.github.io/2024/05/20/Redis/"/>
    <id>https://loaderland.github.io/2024/05/20/Redis/</id>
    <published>2024-05-20T02:14:11.000Z</published>
    <updated>2024-05-20T02:14:11.672Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vim</title>
    <link href="https://loaderland.github.io/2024/05/14/Vim/"/>
    <id>https://loaderland.github.io/2024/05/14/Vim/</id>
    <published>2024-05-14T01:34:36.000Z</published>
    <updated>2024-05-22T01:06:07.963Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h1><blockquote><p>《Vim Tutor》</p><p>《Viim 实用技巧》</p></blockquote><h2 id="Vim-Tutor"><a href="#Vim-Tutor" class="headerlink" title="Vim Tutor"></a>Vim Tutor</h2><h3 id="打开-保存-退出"><a href="#打开-保存-退出" class="headerlink" title="打开 保存 退出"></a>打开 保存 退出</h3><p><strong>在命令模式下</strong></p><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>:e test.md</td><td>打开 test.md文件, 如果不存在则创建。</td></tr><tr><td>:w</td><td>保存</td></tr><tr><td>:w!</td><td>强制保存</td></tr><tr><td>:q</td><td>退出</td></tr><tr><td>:wq</td><td>保存并退出</td></tr><tr><td>:x</td><td>同:wq</td></tr><tr><td>:q!</td><td>强制退出 不保存并退出</td></tr><tr><td>hjkl</td><td>←↓↑→</td></tr></tbody></table><h3 id="删除和追加"><a href="#删除和追加" class="headerlink" title="删除和追加"></a>删除和追加</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>x</td><td>删除光标处的一个字符</td></tr><tr><td>a</td><td>追加文本</td></tr><tr><td>i</td><td>插入文本</td></tr></tbody></table><h3 id="关于对象的小清单"><a href="#关于对象的小清单" class="headerlink" title="关于对象的小清单"></a>关于对象的小清单</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>w</td><td>到下一个单词头，除开所在的第一个字符。</td></tr><tr><td>b</td><td>到上一个单词头，包括所在单词的第一个字符。</td></tr><tr><td>e</td><td>到下一个单词尾，包括所在单词的最后一个字符。</td></tr><tr><td>$</td><td>到行尾，包括了最后一个字符。</td></tr><tr><td>0</td><td>到行首，包含空格。</td></tr><tr><td>^</td><td>到行首，不含空格。</td></tr><tr><td>G</td><td>到文本最后一行首</td></tr><tr><td>gg</td><td>到文本首行。</td></tr></tbody></table><h3 id="恢复命令"><a href="#恢复命令" class="headerlink" title="恢复命令"></a>恢复命令</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>u</td><td>恢复之前的动作</td></tr><tr><td>U</td><td>恢复对一行的所有改变</td></tr><tr><td>CTRL+R</td><td>反恢复</td></tr></tbody></table><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>d</td><td>删除</td></tr><tr><td>dd</td><td>删除一行</td></tr><tr><td>d3w</td><td>删除三个词</td></tr></tbody></table><h3 id="粘贴"><a href="#粘贴" class="headerlink" title="粘贴"></a>粘贴</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>p</td><td>以在光标处粘贴先前删除的文本</td></tr><tr><td>r</td><td>替换</td></tr><tr><td>c</td><td>修改，功能等于删除单词并定位到插入模式。c 和 d 一样属于操作码</td></tr></tbody></table><h3 id="文件状态、光标定位"><a href="#文件状态、光标定位" class="headerlink" title="文件状态、光标定位"></a>文件状态、光标定位</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>Ctrl+G</td><td>查看文件状态及光标定位</td></tr><tr><td>100G</td><td>跳转到100行</td></tr></tbody></table><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>/keyword</td><td>搜索</td></tr><tr><td>?keyword</td><td>反向搜索</td></tr><tr><td>n</td><td>搜索下一条</td></tr><tr><td>N</td><td>搜索上一条</td></tr><tr><td>CTRL+o</td><td>搜索下一条</td></tr><tr><td>CTRL+i</td><td>搜索上一条</td></tr><tr><td>%</td><td>括号匹配搜索，可匹配 (,),[,],{ or }，跳转到对应的起点/终点</td></tr></tbody></table><h3 id="替换命令"><a href="#替换命令" class="headerlink" title="替换命令"></a>替换命令</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>:s/old/new</td><td>替换本行第一个的</td></tr><tr><td>:s/old/new/g</td><td>替换本行所有的</td></tr><tr><td>:%s/old/new/g</td><td>更改全文件中的所有</td></tr><tr><td>:%s/old/new/gc</td><td>更改全文件中的所有,并给出替换与否的提示</td></tr><tr><td>:#,#s/old/new/g</td><td>#,#是要更改的行号的范围</td></tr></tbody></table><h3 id="外部命令"><a href="#外部命令" class="headerlink" title="外部命令"></a>外部命令</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>:!command</td><td>:!command 执行外部 shell 命令。例如 :!ls</td></tr><tr><td>:w FILENAME</td><td>将当前的vim 文件以FILENAME 文件名写进磁盘</td></tr><tr><td>v 对象 :w FILENAME</td><td>保存选定选择行到FILENAME 文件</td></tr><tr><td>:r FILENAME</td><td>恢复磁盘文件FILENAME到光标下</td></tr><tr><td>:r !ls</td><td>读取 ls 命令的输出并粘贴到光标下</td></tr></tbody></table><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>o</td><td>在光标后插入一行，并进入插入模式</td></tr><tr><td>O</td><td>以在光标前插入一行</td></tr><tr><td>a</td><td>在光标后插入文本</td></tr><tr><td>A</td><td>在行尾插入文本</td></tr><tr><td>y</td><td>复制命令</td></tr><tr><td>p</td><td>粘贴命令</td></tr><tr><td>R</td><td>进入替换模式，直到按下</td></tr><tr><td>:set xxx</td><td>进入替换模式，直到按下</td></tr><tr><td>‘ic’ ‘ignorecase’</td><td>搜索时忽略大小写，例如 :set ic</td></tr><tr><td>‘is’ ‘incsearch’</td><td>部分显示匹配的搜索短语</td></tr><tr><td>‘hls’ ‘hlsearch’</td><td>高亮所有匹配的短语</td></tr><tr><td>:set noic</td><td>前置”no”以关闭选项</td></tr></tbody></table><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>:help</td><td>或以打开帮助窗口</td></tr><tr><td>:help cmd</td><td>找出关于cmd的帮助</td></tr><tr><td>CTRL+w</td><td>跳转到另一窗口</td></tr><tr><td>:command, press CTRL+d</td><td>以查看可能的补齐</td></tr></tbody></table><h2 id="Vim实用技巧"><a href="#Vim实用技巧" class="headerlink" title="Vim实用技巧"></a>Vim实用技巧</h2><blockquote><p>. 命令会重复上次的操作</p></blockquote><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>.</td><td>重复上次操作，是一个微型<strong>宏</strong></td></tr><tr><td>&gt;G</td><td>全文缩进</td></tr><tr><td>A</td><td>=$a</td></tr><tr><td>f+<br>s + <br>;.</td><td>替换+前后增加空格<br>var foo = “method(“+argument1+”,”+argument2+”)”;<br>-&gt;<br>var foo = “method(“ + argument1 + “,” + argument2 + “)”;</td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="CS" scheme="https://loaderland.github.io/categories/CS/"/>
    
    
    <category term="Vim" scheme="https://loaderland.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>Armbian</title>
    <link href="https://loaderland.github.io/2024/05/12/Armbian/"/>
    <id>https://loaderland.github.io/2024/05/12/Armbian/</id>
    <published>2024-05-12T07:22:40.000Z</published>
    <updated>2024-05-13T08:02:16.671Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Armbian"><a href="#Armbian" class="headerlink" title="Armbian"></a>Armbian</h1><h2 id="硬件设备"><a href="#硬件设备" class="headerlink" title="硬件设备"></a>硬件设备</h2><p>hisense-hs530r<br>rk3399<br>4+16G</p><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><ul><li><p>系统：Armbian_23.08.0-trunk_Hisense-hs530r_jammy_edge_6.5.5_xfce_desktop.img**[GUI]**</p></li><li><p>驱动：DriverAssitant_v5.12 <strong>只支持win10及以下</strong></p></li><li><p>刷机工具：海信可用Armbian_21.08.1_sm3399mb_focal_current_5.10.60</p></li></ul><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="谨慎更新"><a href="#谨慎更新" class="headerlink" title="谨慎更新"></a>谨慎更新</h3><p>系统安装完成之后第一时间update + upgrade之后reboot发现无法进入系统，屏幕花屏，需要强制重新刷机</p><hr><p><a href="https://www.right.com.cn/forum/thread-8354223-1-1.html">armbian系统不能随便更新</a> 即apt-get update + upgrade</p><p><img src="https://oss.luhuhu.cn/202405121600507.png" alt="image-20240512160037300"></p><p>做的一些工作：初始化系统之后将现有的所有待更新包屏蔽自动更新，经过实测update+upgrade已经可以reboot二次进系统</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 装机完成之后查看可更新包</span>root@hisense-hs530r:~<span class="token comment" spellcheck="true"># apt list --upgradable</span>Listing<span class="token punctuation">..</span>. Donearmbian-config/jammy,jammy 23.8.3 all <span class="token punctuation">[</span>upgradable from: 23.08.0-trunk<span class="token punctuation">]</span>armbian-firmware/jammy,jammy 23.8.3 all <span class="token punctuation">[</span>upgradable from: 23.08.0-trunk<span class="token punctuation">]</span>armbian-jammy-desktop-xfce/jammy,jammy 23.8.1 all <span class="token punctuation">[</span>upgradable from: 23.08.0-trunk<span class="token punctuation">]</span>armbian-plymouth-theme/jammy,jammy 23.8.3 all <span class="token punctuation">[</span>upgradable from: 23.08.0-trunk<span class="token punctuation">]</span>armbian-zsh/jammy,jammy 23.8.3 all <span class="token punctuation">[</span>upgradable from: 23.08.0-trunk<span class="token punctuation">]</span>base-files/jammy 23.8.3-jammy arm64 <span class="token punctuation">[</span>upgradable from: 23.08.0-trunk-jammy<span class="token punctuation">]</span>fake-ubuntu-advantage-tools/jammy,jammy 23.8.3 all <span class="token punctuation">[</span>upgradable from: 23.08.0-trunk<span class="token punctuation">]</span>linux-dtb-edge-rockchip64/jammy 23.8.1 arm64 <span class="token punctuation">[</span>upgradable from: 23.08.0-trunk<span class="token punctuation">]</span>linux-image-edge-rockchip64/jammy 23.8.1 arm64 <span class="token punctuation">[</span>upgradable from: 23.08.0-trunk<span class="token punctuation">]</span>linux-libc-dev/jammy 23.02.2 arm64 <span class="token punctuation">[</span>upgradable from: 5.15.0-86.96<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 禁止这些包的自动更新</span><span class="token function">sudo</span> apt-mark hold armbian-config<span class="token function">sudo</span> apt-mark hold armbian-firmware<span class="token function">sudo</span> apt-mark hold armbian-jammy-desktop-xfce<span class="token function">sudo</span> apt-mark hold armbian-plymouth-theme<span class="token function">sudo</span> apt-mark hold armbian-zsh<span class="token function">sudo</span> apt-mark hold base-files<span class="token function">sudo</span> apt-mark hold fake-ubuntu-advantage-tools<span class="token function">sudo</span> apt-mark hold linux-dtb-edge-rockchip64<span class="token function">sudo</span> apt-mark hold linux-image-edge-rockchip64<span class="token function">sudo</span> apt-mark hold linux-libc-dev</code></pre><h3 id="存储扩容"><a href="#存储扩容" class="headerlink" title="存储扩容"></a>存储扩容</h3><p>自带的存储大小为16G，想要通过插外置存储扩容root分区</p><hr><p>在实际操作中发现并未使用lvm管理磁盘，即<code>mmcblk0</code>未建pv，而pv的创建需要格式化磁盘，因此无法通过lvm 逻辑卷手段扩容root分区，目前没有找到办法直接扩容，磁盘挂载等内容参考Linux LVM相关</p><pre class=" language-bash"><code class="language-bash">root@hisense-hs530r:~<span class="token comment" spellcheck="true"># lsblk</span>NAME         MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTSsda            8:0    1 116.7G  0 diskmmcblk0      179:0    0  14.6G  0 disk└─mmcblk0p1  179:1    0  14.4G  0 part /var/log.hdd                                       /mmcblk0boot0 179:32   0     4M  1 diskmmcblk0boot1 179:64   0     4M  1 diskzram0        252:0    0   1.9G  0 disk <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span>zram1        252:1    0    50M  0 disk /var/logzram2        252:2    0     0B  0 diskroot@hisense-hs530r:~<span class="token comment" spellcheck="true"># pvdisplay</span>  --- Physical volume ---  PV Name               /dev/sda  VG Name               myVG  PV Size               <span class="token operator">&lt;</span>116.70 GiB / not usable 4.00 MiB  Allocatable           <span class="token function">yes</span> <span class="token punctuation">(</span>but full<span class="token punctuation">)</span>  PE Size               4.00 MiB  Total PE              29874  Free PE               0  Allocated PE          29874  PV UUID               PceY81-pM6c-SGma-mKGN-gdWY-5urX-7petarroot@hisense-hs530r:~<span class="token comment" spellcheck="true"># vgdisplay</span>  --- Volume group ---  VG Name               myVG  System ID  Format                lvm2  Metadata Areas        1  Metadata Sequence No  5  VG Access             read/write  VG Status             resizable  MAX LV                0  Cur LV                1  Open LV               0  Max PV                0  Cur PV                1  Act PV                1  VG Size               <span class="token operator">&lt;</span>116.70 GiB  PE Size               4.00 MiB  Total PE              29874  Alloc PE / Size       29874 / <span class="token operator">&lt;</span>116.70 GiB  Free  PE / Size       0 / 0  VG UUID               dYVDgP-a9OF-vBmt-sE7V-egwC-f5rJ-LSaXVVroot@hisense-hs530r:~<span class="token comment" spellcheck="true"># lvdisplay</span>  --- Logical volume ---  LV Path                /dev/myVG/lvol0  LV Name                lvol0  VG Name                myVG  LV UUID                MM3o5D-gNWh-M4NH-ik3J-tqH9-OrFw-KMSr0x  LV Write Access        read/write  LV Creation host, <span class="token function">time</span> hisense-hs530r, 2024-05-12 02:49:59 +0800  LV Status              NOT available  LV Size                <span class="token operator">&lt;</span>116.70 GiB  Current LE             29874  Segments               1  Allocation             inherit  Read ahead sectors     auto</code></pre><h3 id="wifi信号差"><a href="#wifi信号差" class="headerlink" title="wifi信号差"></a>wifi信号差</h3><p>没有天线，无线信号很差，建议自增天线或者使用有线</p><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><h3 id="命令行颜色"><a href="#命令行颜色" class="headerlink" title="命令行颜色"></a>命令行颜色</h3><pre class=" language-bash"><code class="language-bash">root@hisense-hs530r:~<span class="token comment" spellcheck="true"># vi ~/.bashrc</span><span class="token operator">==</span><span class="token operator">==</span><span class="token comment" spellcheck="true"># force_color_prompt=yes 去掉该行的注释</span><span class="token operator">==</span><span class="token operator">==</span>root@hisense-hs530r:~<span class="token comment" spellcheck="true"># source ~/.bashrc</span></code></pre><p><img src="https://oss.luhuhu.cn/202405121616398.png" alt="命令行颜色效果图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="CS" scheme="https://loaderland.github.io/categories/CS/"/>
    
    
    <category term="armbian" scheme="https://loaderland.github.io/tags/armbian/"/>
    
  </entry>
  
  <entry>
    <title>KTV记事</title>
    <link href="https://loaderland.github.io/2024/05/02/KTV%E8%AE%B0%E4%BA%8B/"/>
    <id>https://loaderland.github.io/2024/05/02/KTV%E8%AE%B0%E4%BA%8B/</id>
    <published>2024-05-02T14:42:34.000Z</published>
    <updated>2024-05-06T07:29:27.039Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="KTV记事"><a href="#KTV记事" class="headerlink" title="KTV记事"></a>KTV记事</h1><p>应邀去了ktv （也是自己想去喝点酒唱唱歌），不会胸腔发声，把喉咙唱疲惫。</p><p>先后发生了些许事情，简单记录下<br>我老婆要在家里看小孩儿，且对于这类局也是兴趣缺缺，所以我就是一个人去赴约了。nkt开玩笑似得问我要不要叫swy，我觉得有点怪，与她的关系可能比同事稍多那两杯咖啡的交情，也聊的来一些天，但跟朋友的关系差着还远，倒不是说抗拒她来，而是怕如果出现一些状况，在场又只有我一个人熟悉，我一个家里老婆陪着娃自己出来唱歌的人，进退失度，所以她要是带着男朋友来，于我才是安全的，但是她如果带着男朋友来，又要她来做甚？</p><p>有个柯桥的老板跟伟哥喝酒，我过去给倒。nkt跟我说不用给人倒酒，我不是很理解，我想了很多可能的原因，但是也不能确认。我觉得听他的不会有错。</p><p>szxg的老板娘我见过，但是她应该是并不认得我，早早的回家了。<br>nkt说：“按理说，相互介绍认识，你应当叫过来一起聊个天随便说些什么，不至于把气氛搞尴尬。”我没有这个意识，猜大概她是单个来的，我也是单个来的缘故？有些许逢场作戏的味道？<br>我不认为nkt说的有什么不对，我不应当让人觉得拘束，但是事实就是我让人感觉拘谨、尴尬。我回nkt：“我不知道要同她说些什么，也不能把握这个尺度，所以我不会去做这个事情”。礼貌令人尴尬，冒犯又显得低级。<br>让我想起几天前看到的一段话：有的人，喜欢想的多且深刻，但表现得无动于衷，高知而低能。大抵说的就是我这种吧。<br>syw拉着我胡言乱语了许多话，我接不大上，不晓得他在同我说些什么，到最后我才听懂他的腰椎突出、身体不好全来自于我给人的拘束感，他想要我松快一些、自然一些。辛苦伟哥，心存感激。</p><p>在面对陌生人的时候，我倾向于观察、揣测他的社交边界，有了初步的判断之后才会有进一步的沟通交涉尝试。但我又是一个极无聊的人，总不能与人聊些最近看了哪些书、有哪些新鲜的观点，聊些深刻的话题，发表一些中年愤青的愤世嫉俗，扫了人来寻开心的兴致。对于他们尝试与你沟通的努力，又会被我判断成胡言乱语（syw），不知道要回些什么，给人一种特别难搞的样子，使气氛凝固。其实我自己很自在，只是给别人带去了不自在的感受，这个是他们自己产生的感受，却是我带去的，我不能说我全无责任。冷场光环，怎么办还不知道。</p><p>syw说，出来玩80%的时候是为了快乐，20%是带着目的、任务。我出来玩100%为了快乐，从也不愿也无能出售自己的情绪价值。期间加了一个人的微信，还是人主动加我的，身份高，我是凭着开裆裤情分才与他有了交集，一个高冷的臭搬砖的（码农）。让我想起《人民的名义》里面一段对话，高育良让祁同伟多去陈岩石家，告诉他要烧冷锅，祁厅长不去，但是沙瑞金一来，祁厅长就上赶着给人犁地种菜去了。我好像做不了锅炉工，上进心不足、努力程度不够，显得有一些痴傻，如此这般就是遇见贵人，也是留不下一些印象。我认为归根到底我内心是不认同这种功利思想的。</p><p>中间玩了一个叫做婊子游戏的游戏，有撕纸巾、真心话、大冒险等活动的综合体，对这类游戏我其实早有我自己的判断——不适合。我脑测这类游戏核心的玩法在于年轻人之间近距离的眼神交互，从而摩擦出一些火花已增进关系，于我这种已婚已育的中年人，道德和法律已从精神层面将自我绝育，自我抑制了荷尔蒙分泌，通过这类游戏可以看到我真正拘谨的样子，我是一个严肃且无自控力的人。不过好在，我的左边右边都坐着我熟悉的人，不管是不是刻意的保护，都感恩。syw总是表现的神经很大条，无动机的扮丑是对身边人最大的体贴，大冒险游戏对lsw说我爱你，送了台阶过去，聪明体贴。玩儿这个游戏的时候，我感受到了大家形态各异的拘谨。</p><p>lsw带了女朋友过来，叫做66。我在散场之后跟nkt说lsw品味有点差，我失言了。在并不了解全貌的情况下，但从2个小时不到的时间里，把她定了调。她表现的很卑微，外溢的曲意逢迎，与在场的其他正女主相较，有种现实的低级感。人有欲望、动机并不是什么坏事情，但是如果那种迫切感让人察觉到，总让人感觉好像很便宜，虽说这其实也是人努力强烈的一种表现，但终归是看上去用力过猛，不太舒服。</p><p>散场之后，xyh回百合了，nkt说随她去，细微的不悦，想来应该是婆媳间的那点事情，也不多嘴问。望平安</p><p>快乐的一天。</p><p>​2024年5月2日</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="杂文" scheme="https://loaderland.github.io/categories/%E6%9D%82%E6%96%87/"/>
    
    
    <category term="手记" scheme="https://loaderland.github.io/tags/%E6%89%8B%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="https://loaderland.github.io/2024/04/26/Linux/"/>
    <id>https://loaderland.github.io/2024/04/26/Linux/</id>
    <published>2024-04-26T02:40:55.000Z</published>
    <updated>2024-05-24T07:44:28.152Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://oss.luhuhu.cn/202404280932012.png" alt="GNU宣言"></p><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><p>《Linux命令与shell脚本变成大全》第四版</p><p>《Unix&amp;Linux大学教程》</p><h2 id="什么是Linux"><a href="#什么是Linux" class="headerlink" title="什么是Linux"></a>什么是Linux</h2><p>Unix是一种多用户、多任务处理的操作系统；</p><p>Linux是任何使用Linux内核的Unix的操作系统</p><h2 id="文件管理系统"><a href="#文件管理系统" class="headerlink" title="文件管理系统"></a>文件管理系统</h2><h3 id="日志文件系统"><a href="#日志文件系统" class="headerlink" title="日志文件系统"></a>日志文件系统</h3><ul><li>ex4，最大支持16T，默认有序模式，支持加密压缩及单目录不限数量的子目录</li><li>XFS，回写模式的日志方法，高性能但是存在风险，因为实际数据并未存入日志文件</li></ul><h3 id="文件系统的使用"><a href="#文件系统的使用" class="headerlink" title="文件系统的使用"></a>文件系统的使用</h3><h4 id="创建分区"><a href="#创建分区" class="headerlink" title="创建分区"></a>创建分区</h4><ul><li>fdisk，只能处理2T以下的硬盘</li><li>gdisk，如果存储设备要使用GUID分区表，就需要用到gdisk</li><li>GNU parted，允许调整现有分区大小，可以收缩或者扩大磁盘分区</li></ul><h4 id="创建文件系统（格式化）"><a href="#创建文件系统（格式化）" class="headerlink" title="创建文件系统（格式化）"></a>创建文件系统（格式化）</h4><ul><li><p>mkfs.ext4</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建挂载点</span><span class="token function">mkdir</span> /home/data<span class="token comment" spellcheck="true"># 挂载磁盘</span><span class="token function">mount</span> -t ext4 /dev/sda /home/datalsblk -f /dev /sda<span class="token comment" spellcheck="true"># 自动挂载</span>etc/fstab</code></pre></li><li><p>mkfs.xfs</p></li><li><p>mkfs.btrfs</p></li></ul><h3 id="卷文件系统"><a href="#卷文件系统" class="headerlink" title="卷文件系统"></a>卷文件系统</h3><p>从一个或多个磁盘创建存储池提供了生成虚拟磁盘（卷）的能力，通过存储池可以根据需要增加卷，提供灵活性的同时大大减少停机时间</p><ul><li>ZFS文件系统</li><li>Btrfs</li><li>Stratis</li></ul><h4 id="LVM"><a href="#LVM" class="headerlink" title="LVM"></a>LVM</h4><ul><li><p>LVM布局</p><ul><li><p>物理卷(PV)，指定一个未使用的磁盘分区或整个驱动由LVM使用</p></li><li><p>卷组(VG)(VG)，用于将PV加入存储池，用于构建各种逻辑卷(LV)</p></li><li><p>逻辑卷(LV)，<strong>核心步骤</strong>，由VG的存储空间块组成，可以使用文件系统格式化LV，且不能跨VG创建。当数据量超过已有文件系统上限时，只能在同一个物理磁盘内调整分区大小，逻辑卷(LV)就是用来将<strong>另外一块硬盘上的分区加入已有的文件系统来动态添加存储空间的工具</strong></p></li></ul></li></ul><h4 id="Linux中的LVM"><a href="#Linux中的LVM" class="headerlink" title="Linux中的LVM"></a>Linux中的LVM</h4><p>Linux中通过lvm2软件管理LVM</p><h5 id="首次设置逻辑卷-LV-步骤"><a href="#首次设置逻辑卷-LV-步骤" class="headerlink" title="首次设置逻辑卷(LV)步骤"></a>首次设置逻辑卷(LV)步骤</h5><blockquote><ol><li>创建物理卷(PV)</li><li>创建卷组(VG)</li><li>创建逻辑卷(LV)</li><li>格式化逻辑卷(LV)</li><li>挂载逻辑卷(LV)</li><li>VG、LV扩缩容</li></ol></blockquote><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><ul><li><p>命令行清单</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 命令行帮助</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lvm help &lt;command></span><span class="token comment" spellcheck="true"># 查看硬盘情况</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lsblk</span><span class="token comment" spellcheck="true"># 1. 创建物理卷(PV)</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># pvcreate /dev/vdb /dev/vdc</span><span class="token comment" spellcheck="true"># 2. 创建卷(VG)组包含vdb、vdc</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vgcreate vg00 /dev/vdb /dev/vdc</span><span class="token comment" spellcheck="true"># 3.创建逻辑卷(LV)</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lvcreate -L 1g -v vg00</span><span class="token comment" spellcheck="true"># 4.1 格式化逻辑卷(LV)</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkfs.ext4 /dev/vg00/lvol0</span><span class="token comment" spellcheck="true"># 4.2 挂载LV</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir my_LV</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mount -t ext4 /dev/vg00/lvol0 my_LV</span><span class="token comment" spellcheck="true"># 容量变更</span><span class="token comment" spellcheck="true"># 查看vg详细信息,VG中LV、PV信息</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vgdisplay -v &lt;vg00></span><span class="token comment" spellcheck="true"># VG缩扩PV</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vgreduce vg00 /dev/vdc</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vgextend vg00 /dev/vdc</span><span class="token comment" spellcheck="true"># LV缩扩容量，只能使用所归属的VG容量</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lvextend -L 10G /dev/mapper/vg00-lvol0</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lvextend -l +100%FREE /dev/mapper/vg00-lvol0</span><span class="token comment" spellcheck="true"># 刷新磁盘空间ext4 和xfs格式</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># resize2fs /dev/mapper/vg00-lvol0</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># xfs_growfs /dev/mapper/vg00-lvol0</span></code></pre></li><li><p>命令行及返回</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看硬盘情况</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lsblk</span>NAME            MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTfd0               2:0    1     4K  0 disksr0              11:0    1 490.2M  0 rom  /mediavda             252:0    0    40G  0 disk├─vda1          252:1    0     1G  0 part /boot└─vda2          252:2    0    39G  0 part  ├─centos-root 253:0    0  35.1G  0 lvm  /  └─centos-swap 253:1    0   3.9G  0 lvm  <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span>vdb             252:16   0   100G  0 diskvdc             252:32   0     1G  0 disk<span class="token comment" spellcheck="true"># 1. 创建物理卷(PV)</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># pvcreate /dev/vdb /dev/vdc</span>  Physical volume <span class="token string">"/dev/vdb"</span> successfully created.  Physical volume <span class="token string">"/dev/vdc"</span> successfully created.<span class="token comment" spellcheck="true"># 2. 创建卷组(VG)包含vdb、vdc</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vgcreate vg00 /dev/vdb /dev/vdc</span>  Volume group <span class="token string">"vg00"</span> successfully created<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vgdisplay</span>  --- Volume group ---  VG Name               centos<span class="token punctuation">..</span>.  --- Volume group ---  VG Name               vg00  System ID  Format                lvm2  Metadata Areas        2  Metadata Sequence No  1  VG Access             read/write  VG Status             resizable  MAX LV                0  Cur LV                0  Open LV               0  Max PV                0  Cur PV                2  Act PV                2  VG Size               100.99 GiB  PE Size               4.00 MiB  Total PE              25854  Alloc PE / Size       0 / 0  Free  PE / Size       25854 / 100.99 GiB  VG UUID               4sQhAV-ES7y-rQBe-PJLo-7PuO-479o-Y6T9sn<span class="token comment" spellcheck="true"># 3.创建逻辑卷(LV)</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lvcreate -L 1g -v vg00</span>    Archiving volume group <span class="token string">"vg00"</span> metadata <span class="token punctuation">(</span>seqno 1<span class="token punctuation">)</span>.    Creating logical volume lvol0    Creating volume group backup <span class="token string">"/etc/lvm/backup/vg00"</span> <span class="token punctuation">(</span>seqno 2<span class="token punctuation">)</span>.    Activating logical volume vg00/lvol0.    activation/volume_list configuration setting not defined: Checking only host tags <span class="token keyword">for</span> vg00/lvol0.    Creating vg00-lvol0    Loading table <span class="token keyword">for</span> vg00-lvol0 <span class="token punctuation">(</span>253:2<span class="token punctuation">)</span>.    Resuming vg00-lvol0 <span class="token punctuation">(</span>253:2<span class="token punctuation">)</span>.    Wiping known signatures on logical volume <span class="token string">"vg00/lvol0"</span>    Initializing 4.00 KiB of logical volume <span class="token string">"vg00/lvol0"</span> with value 0.  Logical volume <span class="token string">"lvol0"</span> created.<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lvdisplay /dev/vg00/lvol0</span>  --- Logical volume ---  LV Path                /dev/vg00/lvol0  LV Name                lvol0  VG Name                vg00  LV UUID                bT0lhQ-vHVn-TXPc-9TxH-C7eU-AI8d-8FXJfw  LV Write Access        read/write  LV Creation host, <span class="token function">time</span> localhost.localdomain, 2024-05-11 10:02:51 +0800  LV Status              available  <span class="token comment" spellcheck="true"># open                 0</span>  LV Size                1.00 GiB  Current LE             256  Segments               1  Allocation             inherit  Read ahead sectors     auto  - currently <span class="token keyword">set</span> to     8192  Block device           253:2<span class="token comment" spellcheck="true"># 4.1 格式化逻辑卷(LV)</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkfs.ext4 /dev/vg00/lvol0</span>mke2fs 1.42.9 <span class="token punctuation">(</span>28-Dec-2013<span class="token punctuation">)</span>Filesystem label<span class="token operator">=</span>OS type: LinuxBlock size<span class="token operator">=</span>4096 <span class="token punctuation">(</span>log<span class="token operator">=</span>2<span class="token punctuation">)</span>Fragment size<span class="token operator">=</span>4096 <span class="token punctuation">(</span>log<span class="token operator">=</span>2<span class="token punctuation">)</span>Stride<span class="token operator">=</span>0 blocks, Stripe width<span class="token operator">=</span>0 blocks65536 inodes, 262144 blocks13107 blocks <span class="token punctuation">(</span>5.00%<span class="token punctuation">)</span> reserved <span class="token keyword">for</span> the super userFirst data block<span class="token operator">=</span>0Maximum filesystem blocks<span class="token operator">=</span>2684354568 block <span class="token function">groups</span>32768 blocks per group, 32768 fragments per group8192 inodes per groupSuperblock backups stored on blocks:        32768, 98304, 163840, 229376Allocating group tables: <span class="token keyword">done</span>Writing inode tables: <span class="token keyword">done</span>Creating journal <span class="token punctuation">(</span>8192 blocks<span class="token punctuation">)</span>: <span class="token keyword">done</span>Writing superblocks and filesystem accounting information: <span class="token keyword">done</span><span class="token comment" spellcheck="true"># 4.2 挂载LV</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir my_LV</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mount -t ext4 /dev/vg00/lvol0 my_LV</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls my_LV/</span>lost+found<span class="token comment" spellcheck="true"># 4.3 扩容、收缩VG&amp;LV</span><span class="token comment" spellcheck="true"># 查看VG下的pv内容</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vgdisplay -v &lt;vg00></span>  --- Volume group ---  VG Name               vg00  System ID  Format                lvm2  Metadata Areas        2  Metadata Sequence No  6  VG Access             read/write  VG Status             resizable  MAX LV                0  Cur LV                1  Open LV               1  Max PV                0  Cur PV                2  Act PV                2  VG Size               100.99 GiB  PE Size               4.00 MiB  Total PE              25854  Alloc PE / Size       1280 / 5.00 GiB  Free  PE / Size       24574 / 95.99 GiB  VG UUID               4sQhAV-ES7y-rQBe-PJLo-7PuO-479o-Y6T9sn  --- Logical volume ---  LV Path                /dev/vg00/lvol0  LV Name                lvol0  VG Name                vg00  LV UUID                bT0lhQ-vHVn-TXPc-9TxH-C7eU-AI8d-8FXJfw  LV Write Access        read/write  LV Creation host, <span class="token function">time</span> localhost.localdomain, 2024-05-11 10:02:51 +0800  LV Status              available  <span class="token comment" spellcheck="true"># open                 1</span>  LV Size                5.00 GiB  Current LE             1280  Segments               1  Allocation             inherit  Read ahead sectors     auto  - currently <span class="token keyword">set</span> to     8192  Block device           253:2  --- Physical volumes ---  PV Name               /dev/vdb  PV UUID               pC2xLf-UvnW-I4zy-3pq6-d93H-7Ff8-bc2O9o  PV Status             allocatable  Total PE / Free PE    25599 / 24319  PV Name               /dev/vdc  PV UUID               UrrpAy-wgq3-cBF0-oWND-tdwp-E3FV-cfgA1d  PV Status             allocatable  Total PE / Free PE    255 / 255<span class="token comment" spellcheck="true"># VG缩扩PV</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vgreduce vg00 /dev/vdc</span>  Removed <span class="token string">"/dev/vdc"</span> from volume group <span class="token string">"vg00"</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vgextend vg00 /dev/vdc</span>  Volume group <span class="token string">"vg00"</span> successfully extended<span class="token comment" spellcheck="true"># LV缩扩容量，只能使用所归属的VG容量</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lvextend -L 10G /dev/mapper/vg00-lvol0</span>  Size of logical volume vg00/lvol0 changed from 1.00 GiB <span class="token punctuation">(</span>256 extents<span class="token punctuation">)</span> to 10.00 GiB <span class="token punctuation">(</span>2560 extents<span class="token punctuation">)</span>.  Logical volume vg00/lvol0 successfully resized.<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lvextend -l 100%FREE /dev/mapper/vg00-lvol0</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lvreduce -L 5G /dev/mapper/vg00-lvol0</span>  WARNING: Reducing active and <span class="token function">open</span> logical volume to 5.00 GiB.  THIS MAY DESTROY YOUR DATA <span class="token punctuation">(</span>filesystem etc.<span class="token punctuation">)</span>Do you really want to reduce vg00/lvol0? <span class="token punctuation">[</span>y/n<span class="token punctuation">]</span>: y  Size of logical volume vg00/lvol0 changed from 10.00 GiB <span class="token punctuation">(</span>2560 extents<span class="token punctuation">)</span> to 5.00 GiB <span class="token punctuation">(</span>1280 extents<span class="token punctuation">)</span>.  Logical volume vg00/lvol0 successfully resized.</code></pre></li></ul><h2 id="TIP"><a href="#TIP" class="headerlink" title="TIP"></a>TIP</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 复制</span><span class="token comment" spellcheck="true"># shift + 选中文本</span><span class="token comment" spellcheck="true"># 每次一屏显示一个文件的内容，&lt;Space>向前移动一屏，&lt;B>向后移动一屏，&lt;Q>退出，&lt;H>帮助</span><span class="token function">less</span> <span class="token operator">&lt;</span>filename<span class="token operator">></span><span class="token comment" spellcheck="true"># erase,werase,kill，删除单字符/单词/整行</span><span class="token operator">&lt;</span>Backspace<span class="token operator">></span>/<span class="token operator">&lt;</span>Delete<span class="token operator">></span>^W^U</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="CS" scheme="https://loaderland.github.io/categories/CS/"/>
    
    
    <category term="Linux" scheme="https://loaderland.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>GIT</title>
    <link href="https://loaderland.github.io/2024/04/23/GIT/"/>
    <id>https://loaderland.github.io/2024/04/23/GIT/</id>
    <published>2024-04-23T03:11:21.000Z</published>
    <updated>2024-04-25T06:15:10.030Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h1><p>书籍：《Pro Git》</p><p><a href="https://boardmix.cn/app/editor/5DoZAx7lQy_6KA8ZfVaotQ">pic</a></p><p><img src="https://oss.luhuhu.cn/202404241653764.png" alt="git"></p><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><ul><li>集中式：svn</li><li>分布式：git</li><li>本地</li></ul><blockquote><p>本地版本控制：在硬盘上保存补丁集，不能协同工作</p><p>集中化版本控制：实现协同工作，但是由于由中央服务器统一维护，存在丢失风险</p><p>分布式版本控制：把代码仓库完整镜像保存下来，包括完整的历史记录，去中心化</p></blockquote><h2 id="Local"><a href="#Local" class="headerlink" title="Local"></a>Local</h2><p>工作区、缓存区、提交区</p><h2 id="Remote"><a href="#Remote" class="headerlink" title="Remote"></a>Remote</h2><h2 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h2><h3 id="单分支冲突"><a href="#单分支冲突" class="headerlink" title="单分支冲突"></a>单分支冲突</h3><p><strong>单分支冲突场景：</strong>在单位提交了push iss1到dev分支，在家里没有pull iss1的情况下 进行了iss2的工作，当 push时会reject要求解决iss1 和iss2的冲突之后再push</p><h3 id="多分支冲突"><a href="#多分支冲突" class="headerlink" title="多分支冲突"></a>多分支冲突</h3><p><strong>多分支冲突场景：</strong></p><ol><li>开发某个网站。</li><li>为实现某个新的用户需求issue，创建一个分支。</li><li>在这个分支上开展工作。<br>正在此时，你突然接到一个电话说有个很严重的问题需要紧急修补。 你将按照如下方式来处理：<ol><li>切换到你的线上分支（main）。</li><li>为这个紧急任务新建一个分支hotfix，并在其中修复它。</li><li>在测试通过之后，切换回线上分支，然后合并这个修补分支(merge hotfix)，最后将改动推送到线上分支，删除hotfix分支(branch -d hotfix)。</li></ol></li><li>切换回你最初工作的分支issue上，继续工作。</li><li>完成issue的开发工作，合并issue分支(<strong>merge issue</strong> 出现分支冲突)</li><li>需要处理conflicts，然后git add, commit, push, branch -d issue分支</li></ol><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建并切换到newbranch分支</span><span class="token function">git</span> checkout -b newbranch<span class="token comment" spellcheck="true"># 分支重命名dev</span><span class="token function">git</span> branch -m newbranch dev<span class="token comment" spellcheck="true"># 创建远程dev分支，并push</span><span class="token function">git</span> push origin dev<span class="token comment" spellcheck="true"># 删除本地dev分支</span><span class="token function">git</span> branch -d dev<span class="token comment" spellcheck="true"># 删除远程dev分支</span><span class="token function">git</span> push origin --delete dev<span class="token comment" spellcheck="true"># 查看分支</span><span class="token function">git</span> branch -v<span class="token comment" spellcheck="true"># 查看当前分支merge关系</span><span class="token function">git</span> branch --merged/--nomerged</code></pre><h2 id="分支开发工作流"><a href="#分支开发工作流" class="headerlink" title="分支开发工作流"></a>分支开发工作流</h2><h3 id="长期分支"><a href="#长期分支" class="headerlink" title="长期分支"></a>长期分支</h3><blockquote><p>只在 master 分支上保留完全稳定的代码——有可能仅仅是已经发布或即将发布的代码。 他们还有一些名为 develop 或者 next 的平行分支，被用来做后续开发或者测试稳定性——这些分支不必保持绝对稳定，但是一旦达到稳定状态，它们就可以被合并入 master 分支了。 这样，在确保这些已完成的主题分支（短期分支，比如之前的 iss53 分支）能够通过所有测试，并且不会引入更多 bug 之后，就可以合并入主干分支中，等待下一次的发布。</p></blockquote><p><img src="https://oss.luhuhu.cn/202404251034138.png" alt="work silos"></p><h3 id="主题分支"><a href="#主题分支" class="headerlink" title="主题分支"></a>主题分支</h3><p>只在本地git版本库中，不与服务器发生交互</p><blockquote><p>主题分支是一种短期分支，它被用来实现单一特性或其相关工作。 也许你从来没有在其他的版本控制系统（VCS）上这么做过，因为在那些版本控制系统中创建和合并分支通常很费劲。然而，在 Git 中一天之内多次创建、使用、合并、删除分支都很常见。</p></blockquote><p><img src="https://oss.luhuhu.cn/202404251036872.png" alt="image-20240425103637564"></p><h2 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支"></a>远程分支</h2><blockquote><p>远程引用是对远程仓库的引用（指针），包括分支、标签等等。 你可以通过 git ls-remote <remote> 来<br>显式地获得远程引用的完整列表， 或者通过 git remote show <remote> 获得远程分支的更多信息。 然<br>而，一个更常见的做法是利用远程跟踪分支。</remote></remote></p></blockquote><p>head中留存的是远程分支的指针</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> remote -v<span class="token function">git</span> remote show origin<span class="token comment" spellcheck="true"># 拉取远程分支到本地head</span><span class="token function">git</span> fetch<span class="token comment" spellcheck="true"># 合并</span><span class="token function">git</span> pull <span class="token operator">=</span> <span class="token function">git</span> fetch + <span class="token function">git</span> merge origin/<span class="token operator">&lt;</span>branchName<span class="token operator">></span><span class="token comment" spellcheck="true"># 查看本地分支和远程分支的差异</span><span class="token function">git</span> branch -vv<span class="token comment" spellcheck="true"># 删除远程分支</span><span class="token function">git</span> push origin -d <span class="token operator">&lt;</span>branchName<span class="token operator">></span></code></pre><h2 id="变基"><a href="#变基" class="headerlink" title="变基"></a>变基</h2><p><strong>善待同事Skill</strong> GET<br>整合分支主要方法：merge、rebase</p><p>变基需要遵守的准则：如果提交存在于仓库之外，那么不要执行变基——<strong>私有仓库/分支使用，如果已经提交出去的分支不要执行变基，可能丢失别人的修改！不要尝试在仓库外变基，否则人民群众会仇恨你，你的朋友和家人会嘲笑你，唾弃你。</strong></p><p>变基的意义：merge和rebase在实现的最终结果上没什么区别，但是可以使提交历史更加整洁。尽管开发工作是并行的，但是看上去像是串行的，一般这么做的目的是为了确保向远程分支推送时能保持历史的整洁。<strong>应用场景：首先在自己的分支进行开发，完成时变基到origin/main上，然后向主项目提交修改，这样该项目的维护者就不需要进行整合操作，只需要快速合并便可。</strong></p><ul><li><p>merge:两个分支，三方合并，形成新的快照</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> merge experiment</code></pre><p><img src="https://oss.luhuhu.cn/202404251138426.png" alt="merge"></p></li><li><p>rebase:找出C3、C4共同祖先C2，将C4修改指针只想C3，最后合并</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout experiment<span class="token function">git</span> rebase master<span class="token function">git</span> checkout master<span class="token function">git</span> merge experiment</code></pre><p><img src="https://oss.luhuhu.cn/202404251138130.png" alt="rebase"></p></li></ul><h2 id="服务器上的git"><a href="#服务器上的git" class="headerlink" title="服务器上的git"></a>服务器上的git</h2><p>略</p><h2 id="如何对开源项目做贡献"><a href="#如何对开源项目做贡献" class="headerlink" title="如何对开源项目做贡献"></a>如何对开源项目做贡献</h2><ol><li>fork开源项目</li><li>修改、推送到自己的私有仓库</li><li>请求维护者拉取自己的更新</li><li>维护者合并修改，推送到主仓库</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="CS" scheme="https://loaderland.github.io/categories/CS/"/>
    
    
    <category term="GIT" scheme="https://loaderland.github.io/tags/GIT/"/>
    
  </entry>
  
  <entry>
    <title>workRecord</title>
    <link href="https://loaderland.github.io/2024/04/19/workRecord/"/>
    <id>https://loaderland.github.io/2024/04/19/workRecord/</id>
    <published>2024-04-19T01:28:24.000Z</published>
    <updated>2024-04-23T03:10:57.584Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="工作记录"><a href="#工作记录" class="headerlink" title="工作记录"></a>工作记录</h1><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="route"><a href="#route" class="headerlink" title="route"></a>route</h3><ul><li><p><a href="https://blog.csdn.net/fengxingzhe008/article/details/127437511">路由选择顺序</a></p><blockquote><p>在不考虑<a href="https://so.csdn.net/so/search?q=%E7%AD%96%E7%95%A5%E8%B7%AF%E7%94%B1&amp;spm=1001.2101.3001.7020">策略路由</a>等其他情况下，对IP包进行路由时，通常按照如下顺序进行。</p><ol><li><p>最长掩码匹配原则</p></li><li><p>管理距离/AD/路由协议优先级</p></li><li><p>路由花销/Cost/Metric</p></li></ol></blockquote></li><li><p><a href="https://segmentfault.com/a/1190000041160755">设置永久静态路由</a></p></li><li><p>双网卡定向设置路由<br>centos有两张网卡分别为192网段和10网段，要求分别使用各自的网关<br>业务场景为服务器192内网需要映射到外网215上提供服务，10网段真实地址为接口等应用使用的真实地址<br>实现：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 设置eth0走10网段网卡</span>route add -net 10.0.0.0 netmask 255.0.0.0 gw 10.59.0.254<span class="token comment" spellcheck="true"># 设置脚本自动启动</span><span class="token function">cd</span> /etc/sysconfig/network-scripts/<span class="token function">touch</span> route-eth0<span class="token function">vi</span> route-eth0 ···<span class="token comment" spellcheck="true">#!/bin/bash</span>route add -net 10.0.0.0 netmask 255.0.0.0 gw 10.59.0.254···<span class="token function">chmod</span> +x /etc/sysconfig/network-scripts/route-eth0 <span class="token function">sudo</span> <span class="token function">touch</span> /etc/sysconfig/network-scripts/ifup-local<span class="token function">sudo</span> <span class="token function">chmod</span> +x /etc/sysconfig/network-scripts/ifup-local<span class="token function">vi</span> ifup-local···/etc/sysconfig/network-scripts/route-eth0···<span class="token comment" spellcheck="true"># 查看route</span>route -n···<span class="token comment" spellcheck="true"># 设置eth0走10网段网卡</span>route add -net 10.0.0.0 netmask 255.0.0.0 gw 10.59.0.254route add -net 10.42.248.0 netmask 255.255.255.0 gw 192.168.200.254<span class="token comment" spellcheck="true"># 设置脚本自动启动</span><span class="token function">cd</span> /etc/sysconfig/network-scripts/<span class="token function">touch</span> route-eth0<span class="token function">vi</span> route-eth0 ···<span class="token comment" spellcheck="true">#!/bin/bash</span>route add -net 10.0.0.0 netmask 255.0.0.0 gw 10.59.0.254···<span class="token function">chmod</span> +x /etc/sysconfig/network-scripts/route-eth0 <span class="token function">sudo</span> <span class="token function">touch</span> /etc/sysconfig/network-scripts/ifup-local<span class="token function">sudo</span> <span class="token function">chmod</span> +x /etc/sysconfig/network-scripts/ifup-local<span class="token function">vi</span> ifup-local···/etc/sysconfig/network-scripts/route-eth0···<span class="token comment" spellcheck="true"># 查看route</span>route -n···Kernel IP routing tableDestination     Gateway         Genmask         Flags Metric Ref    Use Iface0.0.0.0         192.168.200.254 0.0.0.0         UG    121    0        0 eth110.0.0.0        10.59.0.254     255.0.0.0       UG    0      0        0 eth010.42.248.0     192.168.200.254 255.255.255.0   UG    0      0        0 eth110.59.0.0       0.0.0.0         255.255.255.0   U     120    0        0 eth0192.168.200.0   0.0.0.0         255.255.255.0   U     121    0        0 eth1···</code></pre></li></ul><h3 id="disk"><a href="#disk" class="headerlink" title="disk"></a>disk</h3><ul><li><p>CentOS</p><p><a href="https://oss.luhuhu.cn/202404191001904.docx">磁盘扩容操作文档CentOS</a></p><pre class=" language-bash"><code class="language-bash"><span class="token function">df</span> -hlsblkpvcreate /dev/vdblvdisplayvgextend centos /dev/vdbpvdisplay<span class="token comment" spellcheck="true"># 扩容</span>lvextend -L +1T /dev/centos/rootlvextend -L +1000G /dev/centos/rootlvextend -L +100M /dev/centos/root<span class="token comment" spellcheck="true"># 根据卷类型扩容生效</span>xfs_growfs /dev/centos/rootresize2fs  /dev/centos/root</code></pre></li><li><p>Anolis</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看硬件设备信息</span><span class="token function">fdisk</span> -l<span class="token comment" spellcheck="true"># 在根目录下添加data目录</span><span class="token function">mkdir</span> /data<span class="token comment" spellcheck="true"># 开始anolisOS8分区</span><span class="token function">fdisk</span> /dev/vdb<span class="token comment" spellcheck="true">#依次输入n，p，1，2次回车，wq。其中输入 n 新建一个分区，输入 p 建立分区，输入分区编号 1，最后输入2次回车，wq保存当前操作，分区正式开始。</span><span class="token comment" spellcheck="true"># 格式化分区</span>mkfs.xfs /dev/vdb<span class="token comment" spellcheck="true"># mkfs.ext4 /dev/vdb</span><span class="token comment" spellcheck="true"># 挂载到/data</span><span class="token function">mount</span> /dev/vdb /data<span class="token comment" spellcheck="true"># 配置写入</span><span class="token function">vi</span> /etc/fstab/dev/vdb /data xfs defaults 0 0<span class="token comment" spellcheck="true"># /dev/vdb /data ext4 defaults 0 0</span><span class="token function">reboot</span><span class="token function">df</span> -h</code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="CS" scheme="https://loaderland.github.io/categories/CS/"/>
    
    
    <category term="工作记录" scheme="https://loaderland.github.io/tags/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>How2Read</title>
    <link href="https://loaderland.github.io/2024/04/18/How2Read/"/>
    <id>https://loaderland.github.io/2024/04/18/How2Read/</id>
    <published>2024-04-18T15:53:43.000Z</published>
    <updated>2024-04-25T08:57:03.070Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="How-to-Read"><a href="#How-to-Read" class="headerlink" title="How to Read"></a>How to Read</h1><p>《如何阅读一本书》莫提默·J·艾德勒 查尔斯·范多伦</p><h2 id="阅读的层次"><a href="#阅读的层次" class="headerlink" title="阅读的层次"></a>阅读的层次</h2><ul><li>基础阅读<br>识字层次</li><li>检视阅读<br>在一定时间内，抓出一本书的重点，识别书的类型、写了什么内容，判断是否值得进一步阅读</li><li>分析阅读<br>咀嚼、消化一本书，核心在于理解，在无限时间里，最好最完整的阅读，直到这本书成为他自己</li><li>主题阅读<br>读很多这一系列的书，列举出相关处，架构出主题分析，类似于科研</li></ul><h2 id="阅读方式"><a href="#阅读方式" class="headerlink" title="阅读方式"></a>阅读方式</h2><h3 id="逗留和倒退"><a href="#逗留和倒退" class="headerlink" title="逗留和倒退"></a>逗留和倒退</h3><p>矫正逗留和倒退的不好习惯，提高阅读的速度</p><h3 id="理解力"><a href="#理解力" class="headerlink" title="理解力"></a>理解力</h3><p>提高阅读速度的同时，需要集中精力训练理解力</p><h3 id="略读"><a href="#略读" class="headerlink" title="略读"></a>略读</h3><p>遇到难读的书时，不要企图了解每一个字句，而是先理解能理解的，通过重复来真正的读懂这本书</p><h2 id="主动阅读"><a href="#主动阅读" class="headerlink" title="主动阅读"></a>主动阅读</h2><ol><li>这本书整体在谈论什么，核心主题是什么</li><li>作者细说了什么，怎么说的？主要的想法、声明、论点</li><li>这本书说的有道理么，全部有道理？部分有道理？</li><li>这本书说的跟你又什么关系，你获得了哪些咨询，这些咨询的意义，给了什么启示</li></ol><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><ul><li>结构笔记</li><li>概念笔记</li><li>辩证笔记</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技能" scheme="https://loaderland.github.io/categories/%E6%8A%80%E8%83%BD/"/>
    
    
    <category term="阅读" scheme="https://loaderland.github.io/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>NAS</title>
    <link href="https://loaderland.github.io/2024/04/15/NAS/"/>
    <id>https://loaderland.github.io/2024/04/15/NAS/</id>
    <published>2024-04-15T01:49:10.000Z</published>
    <updated>2024-04-15T11:32:08.649Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="NAS"><a href="#NAS" class="headerlink" title="NAS"></a>NAS</h1><h2 id="设备信息"><a href="#设备信息" class="headerlink" title="设备信息"></a>设备信息</h2><p>群晖920+<br>系统：DSM 7.2.1<br>CPU：INTEL Celeron J4125<br>内存：4+16G<br>硬盘：4T 西数紫盘</p><h2 id="APPs"><a href="#APPs" class="headerlink" title="APPs"></a>APPs</h2><h3 id="Active-Backup-for-Business"><a href="#Active-Backup-for-Business" class="headerlink" title="Active Backup for Business"></a>Active Backup for Business</h3><p>Win/Mac Backup Tasks</p><h3 id="Audio-Station"><a href="#Audio-Station" class="headerlink" title="Audio Station"></a>Audio Station</h3><h3 id="Download-Station"><a href="#Download-Station" class="headerlink" title="Download Station"></a>Download Station</h3><h3 id="Container-Manager-（Docker）"><a href="#Container-Manager-（Docker）" class="headerlink" title="Container Manager （Docker）"></a>Container Manager （Docker）</h3><h4 id="ddnp-ip"><a href="#ddnp-ip" class="headerlink" title="ddnp_ip"></a>ddnp_ip</h4><h4 id="clash"><a href="#clash" class="headerlink" title="clash"></a>clash</h4><h4 id="calibre"><a href="#calibre" class="headerlink" title="calibre"></a>calibre</h4><h4 id="homarr"><a href="#homarr" class="headerlink" title="homarr"></a>homarr</h4><h3 id="Synology-Drive"><a href="#Synology-Drive" class="headerlink" title="Synology Drive"></a>Synology Drive</h3><h3 id="Synology-Photos"><a href="#Synology-Photos" class="headerlink" title="Synology Photos"></a>Synology Photos</h3><h3 id="Video-Station"><a href="#Video-Station" class="headerlink" title="Video Station"></a>Video Station</h3><h3 id="Cloud-Sync"><a href="#Cloud-Sync" class="headerlink" title="Cloud Sync"></a>Cloud Sync</h3><h3 id="Web-Station"><a href="#Web-Station" class="headerlink" title="Web Station"></a>Web Station</h3><h3 id="Antivirus-Essentail"><a href="#Antivirus-Essentail" class="headerlink" title="Antivirus Essentail"></a>Antivirus Essentail</h3><h1 id="ECS"><a href="#ECS" class="headerlink" title="ECS"></a>ECS</h1><p>aliyunEcs(2core,2GiB,40GB)，99/YEAR，之前用于获取ICP备案码</p><h2 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h2><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><h2 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h2><p>ECS性能太差不适合使用</p><h1 id="Domain"><a href="#Domain" class="headerlink" title="Domain"></a>Domain</h1><p>aliyunDomain 39/YEAR，用于配合ddns_ip 远程访问NAS</p><p>ICP备案</p><h1 id="OSS"><a href="#OSS" class="headerlink" title="OSS"></a>OSS</h1><p>aliyunOss 图床需求</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="CS" scheme="https://loaderland.github.io/categories/CS/"/>
    
    
    <category term="NAS" scheme="https://loaderland.github.io/tags/NAS/"/>
    
  </entry>
  
  <entry>
    <title>Note</title>
    <link href="https://loaderland.github.io/2024/04/06/Note/"/>
    <id>https://loaderland.github.io/2024/04/06/Note/</id>
    <published>2024-04-06T14:06:46.000Z</published>
    <updated>2024-04-23T03:07:44.879Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="手记"><a href="#手记" class="headerlink" title="手记"></a>手记</h1><h2 id="2024年3月29日"><a href="#2024年3月29日" class="headerlink" title="2024年3月29日"></a>2024年3月29日</h2><p>我仔细地在想不离开的原因，我与你的精神没有共鸣，身体没有共振，喜好性情大相径庭，经济生活不相依附。孩子是婚姻的纽带，也是自由的脚镣。</p><p>但归根到底，束缚自由的并不是外界的事物，而是内心对生活、对未来的迷茫，我的停滞与感情无关，跟责任、担当无关，孩子的单纯给我带来的欢乐是凄惨精神世界唯一仅存的慰藉，而并不是镣铐。</p><p>逃离是最懒惰的办法，思想上的匮乏令你在世俗的种种评价前脆弱不堪，摆脱一种状态除了毁掉现状之外，更重要的是想清楚之后的重建，是对理想、自由的奔赴，想到这点就应鼓起勇气往前走、向远处看，静止的事物终将被抛弃，疼痛会带来生的鲜活感。</p><hr><p>人与人之间是极难感同身受的，期望越大失望越大，但人又无法脱离与人的关系，孔乙己问茴字有几种写法，刻画更多的是灵魂的孤独，而不是时代的赞歌。精神渴求着回应却不可得，人群中的孤独是最深刻的孤独。</p><p>“我的灵魂离我如此遥远，而我的存在却如此真实。”</p><p>人的脆弱性使其能够承受的唯一真理便是自身的愚蠢和残缺。</p><p>鲁迅生活的时代就是最好的时代，那是封建气数将尽，公民意志觉醒的时代。极权压迫越用力，民主自由之风便越兴盛，越来越多的人或站出来、或写出来，为了自己，也为了别人，更为了未来。那是一种人格的英勇，不是动物性的趋利避害，蝇营狗苟。</p><h2 id="2024年4月19日"><a href="#2024年4月19日" class="headerlink" title="2024年4月19日"></a>2024年4月19日</h2><p>儿子生病了，合胞病毒感染，但是精神状态良好，不像是生病的样子。恰好她又出差在外地，家里像丢了主心骨，平日里不需我操心的事情都要我来经手判断，而我又没有她的“威望”，奶奶、外婆就开始叽叽喳喳起来，开始提一些不是很靠谱的建议。</p><p>血脉亲情里面大致是不太会有心怀恶意的去伤害你，他们只能从自己的认知范围内去做他们认为对你好的事情。就比如时下的各种爸爸妈妈们的催房、催婚、催娃，但是又说不清这里面的好意。在警惕别人的恶意时候，也要谨慎的接受别人的好意，毕竟日子还是你自己过。为了你好的说辞，是他们对自己错误的自我谅解，游说你不要过多的责怪他们，归根到底还是一种不自知的自私表现。</p><p>周末，她回来了，我一直紧绷着的神经舒展开来。就好像老虎回了家，一下子安静整齐起来，我又可以赖在沙发上看我的小人书。她的脾气不好就像是给所有人做了一个封装，我只需对付她，不需要管她身与别人的矛盾、冲突，是省心生活的一个必要条件。</p><img src="https://oss.luhuhu.cn/202404192242640.png" alt="生病了" style="zoom:30%;"><hr><p>最近看到 一本小书《多谈谈问题》，有些比较有新意的观点摘录如下：</p><p><strong>真理有可能早过时代，但是寻找真理与时代无关——钟叔河</strong></p><blockquote><p>万不可以以自己的学问为职业。——陈寅恪</p><p>如果你以学问为职业，那你就得有老板，这个老板或者是国家，或者是资本家，那你就得听他的话，你的学术研究就不可能是自由的。我原来觉得，我做好一门手艺，养家糊口，我再去干自己想干的事，这个生活是蛮惬意的。没想到现实世界，变成强迫你去做，或者说我必须做这个东西，不做就没有饭吃，这个乐趣就会减少。——钟叔河</p></blockquote><blockquote><p>驱除鞑虏，恢复中华，建立民国，平均地权。——孙中山</p><p>中国的传统重担特别沉重。中国有悠久的传统文明，这一点是我们应该用骄傲的口气来说的，但正因如此，这种文化的自我复制能力特别强，惯性特别大。物理学上讲，体量越大的东西惯性越大，我们十几亿人口摆在这个地方，那么多典籍摆在这个地方，这个体量够大的了。所以这种国家的更新、革新、改革，会特别艰难，它不会再一两代人之间就很轻易的完成。所以我觉得这些书虽然是百年前的作品，但现在也还是他们所摸索的进程的继续，那个过程并没有终止，也没有圆满地到达终点，它也不会有终点。他们有时候的一些苦恼，他们的一些摸索，他们的一些，对于我们现代的人，还有直接的意义。我认为我们现在很多的人，包括我自己，还没有达到当时他们的最高水平。<br>我们走向全球文明的道路会是一条漫长曲折的道路，想从根本上解决这个问题，还是要使所有人的思想现代化起来。有人觉得读了大学、又读了研究生的人的思想当然是现代化的思想，那不见得，我自己的体会是如此，不一定。朱正跟我说过一句话，1957年“反右”以后，搞过一个运动叫“除四害”，每人每天要交上多少蚊子、苍蝇。这种事作为全民运动是没有任何意义的。不上班，大家晚上都不睡觉去捉蚊子、捉苍蝇，捉不完的，蚊子滋生的环境没有改变。另外一个人说，我们现在这些人，如果又一半的人像我们这样认识，这个运动自然就没有了。我认为这个话说到点子上了，我不可能去反对这个运动，我不动可以吧？装病，我病了，我睡在床上，不上班。假如我们都有这个认识，我不干这个事情，全国人民都不干，自然就干不了。这里有些人不仅是干，而且他还更积极，领导讲消灭一个，他还要消灭十个。有这样的人，就是这样的现实。这有什么办法，就要尽力去启蒙。<br>——钟叔河</p></blockquote><blockquote><p>我不是有勇气或者有可能讲我所有想讲的话，但是我绝不讲一句我不想讲的话。——钟叔河</p></blockquote><p><strong>火焰与黑洞——媒介的变化，如何改变我们——戴锦华</strong></p><blockquote><p>我们整体地陷入了认识论危机。今日的互联网结构（大数据、精准投放——信息茧房）令我们无法从互联网上获取新知、发现未知，甚至丧失了求知的意识和愿望。经由网络、传播，我们只会印证自己的已知，确信自己的正确，因此我们无从形成新的观点，丧失了质疑既有观点和立场的可能性。——戴锦华</p></blockquote><p><strong>在人性残缺的时代，成为一个完整的人——景凯旋</strong></p><blockquote><p>在中国文化中，“活在当下”是有特定含义的，即把活着本身作为最高目的，没有生命的过程感和意义感。海德格尔说，人向死而在，所以人有世界，动物没有世界。由此看来，“活在当下”其实是一个人没有世界的表现。</p><p>“活在当下不是一种自由，只有活在真实中才是自由”，生活在真实中源于西方文化的求真精神，它首先指追求真相，拒绝生活在谎言中，因为生活在谎言中导致人性的危机，人的自我认同的危机，其中也包括道德的危机。其次，它是指追求真理，亦即这句话还具有形而上的层面。在西方语言中，真实和真理往往是同一个次。“生活在真实中”意味着对真理的不断追求。而在东欧作家看来，真理的源头不是主观自我，而是绝对的超验之物，坚持善、自由等价值都是源自某个更高的存在物，只有相信这个价值源头，人们才会具有对抗现实的道德勇气。东欧作家之所以提出这个命题，是因为<strong>现代人已经失去了超越的世界观，所有价值都是基于人的自我保全，人本身成为价值的源头，那么很显然，由人创造的价值都是相对的，于是谁拥有力量谁就拥有真理、拥有良善生活的解释权。这种情况下，何谈真正的良善生活。</strong></p><p>多元文化主义不可避免的矛盾在于，<strong>如果它禁止极端观念，就会违背自己的原则，如果它容忍极端观念，又会导致自己的失败。</strong>我觉得，今天的西方社会就是如此。</p><p>没有内心自由的人就没有自我，它的自我来自于别人眼中的自我，因此不能独立做出自己的判断。内心自由就是康德所说的自由意志，这是人的本质属性，没有内心自由的人永远都是随大流，把自己融入到大众之中，所以他也不会有真正的私人生活。<strong>我们生活中常常看到这样的人，当自己的私人生活遭到他人干预时，他不会觉得这是对自己尊严的侵犯，他心甘情愿地服从，甚至方案哪些不愿意服从的人，这正是阿特伦所说的“无思”。</strong>只有那些有自我意识的人才有可能拥有内心自由，虽然我们也许永远无法认识那个真正的自我，但至少可以讲陈寅恪先生所说的“独立之精神，自由之思想”看作自我的表现。内心自由的人不仅意味着敢于独立思考，还意味着服从自己的良知。现代人已经不再喜欢使用良知这个词，说出这个词会感到很过时，但在这个越来越同质化的时代，人性变得越来越残缺不全的时代，我们不仅应当重温康德的话，要敢于独立运用自己的理性，而且还要重新唤起自己的良知。只有这样才会成为一个完整的人。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="杂文" scheme="https://loaderland.github.io/categories/%E6%9D%82%E6%96%87/"/>
    
    
    <category term="手记" scheme="https://loaderland.github.io/tags/%E6%89%8B%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>DataStructure</title>
    <link href="https://loaderland.github.io/2024/04/02/DataStructure/"/>
    <id>https://loaderland.github.io/2024/04/02/DataStructure/</id>
    <published>2024-04-02T07:27:50.000Z</published>
    <updated>2024-04-15T02:20:07.236Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h2><h3 id="数组、单链表、双链表"><a href="#数组、单链表、双链表" class="headerlink" title="数组、单链表、双链表"></a>数组、单链表、双链表</h3><ul><li>数组：连续，随机访问速度快；Collection集合中提供了ArrayList和Vector<ul><li>ArrayList:线程不安全，不够用时扩展0.5倍，Collections.synchronizedList&lt;List<t> list&gt;实现线程安全</t></li><li>（<strong>弃用</strong>）Vector:线程安全，不够用时扩展1倍</li></ul></li><li>单链表：节点的链接方向是单向的；相对于数组来说，单链表的的随机访问速度较慢，但是单链表删除/添加数据的效率很高。</li><li>双链表：双链表的优点是可以从头部或尾部访问，也可以直接访问中间的元素。此外，由于有指向前一个节点的指针，因此可以从尾部或中间删除元素，而不需要遍历整个链表，缺点是每个节点需要更多的存储空间（两个指针）</li></ul><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><ul><li>LIFO：后进先出</li><li>操作只能从栈顶进行操作</li><li>push、pop、peek:进栈、出栈、返回栈顶元素</li><li>应用场景：函数调用和递归；表达式求值、括号匹配；回溯算法DFS深度优先搜索</li></ul><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><ul><li>FIFO：先进先出</li><li>只允许在队首进行删除、队尾进行插入操作</li><li>应用场景：任务调度；缓冲区；优先级队列；广度优先搜索BFS</li></ul><h2 id="树形结构"><a href="#树形结构" class="headerlink" title="树形结构"></a>树形结构</h2><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>先序、中序、后序，取决于何时读取根节点</p><h3 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h3><p>时间复杂度O(logN)，极端情况下会变成线性结构O(N)</p><ul><li>若任意节点的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li><li>任意节点的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li><li>任意节点的左、右子树也分别为二叉查找树；</li><li>没有键值相等的节点（no duplicate nodes）；</li></ul><h3 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h3><p>因为规定了左右子树高度差，所以不会变成线性链表，时间复杂度O(logN),由于需要保持自身平衡，需要频繁旋转，多次磁盘IO</p><ul><li>任何节点的两个子树最大高度差为1</li></ul><h3 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h3><p>自然平衡树。内部通过分裂机制，保持数据有序。单节点可以保存2~4个信息，节点内有序，节点间间隔,减少磁盘IO次数。<br>适合单点查询的场景，如MongoDB。<br>不适合的场景：所有节点都放在磁盘上，读写性能差；范围查时，如果范围跨节点会出现节点间反复横跳情况。</p><h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><p>B+树为了解决B树存在的缺陷而设计。相比B树，B+树非叶子节点仅保留数据间相对关系(索引)<br>，真实信息均包含在叶子节点中，相对关系信息（非叶子节点）就可以放在内存中，真实信息放在磁盘中。<br>MySql的存储引擎InnoDB用的就是B+树。<br>B+树信息存在磁盘中，且非顺序写入，所以查询性能很高，但是写入性能偏低，即B+树结构不适合频繁大数据量的写入，核心原因是因为非顺序写入。</p><h3 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B*树"></a>B*树</h3><p>B* 树是对B+树的再一次改进，在B+树构建过程中，节点的合并拆分比较费时，所以B*树就是为了减少构建过程中节点合并和拆分的次数，从而提升树的数据插入、删除性能。</p><p>与B+树的区别：</p><ol><li>关键字个数限制问题，B+树初始化的关键字初始化个数是cei(m/2)，b<em>树的初始化个数为（cei(2/3</em>m)）</li><li>B+树节点满时就会分裂，而B*树节点满时会检查兄弟节点是否满（因为每个节点都有指向兄弟的指针），如果兄弟节点未满则向兄弟节点转移关键字，如果兄弟节点已满，则从当前节点和兄弟节点各拿出1/3的数据创建一个新的节点出来</li></ol><h3 id="伸展树"><a href="#伸展树" class="headerlink" title="伸展树"></a>伸展树</h3><ul><li>当某个节点被访问时，会旋转使该节点成为根，下次访问该节点时，能迅速访问到</li></ul><h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><p><img src="https://oss.luhuhu.cn/202404021529279.png" alt="RBTree.png"></p><ul><li>每个节点或者是黑色，或者是红色。</li><li>根节点是黑色。</li><li>每个叶子节点（NIL）是黑色。 [注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点！]</li><li>如果一个节点是红色的，则它的子节点必须是黑色的。</li><li>从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。</li></ul><h3 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h3><blockquote><p>哈夫曼又称最优二叉树, 是一种带权路径长度最短的二叉树。<br>应用场景主要：数据压缩；编码；通信；图像处理</p></blockquote><h3 id="前缀树"><a href="#前缀树" class="headerlink" title="前缀树"></a>前缀树</h3><p>trie tree，又称字典树，用于前缀匹配、字符串检索、词频统计、字符串排序<br><img src="https://oss.luhuhu.cn/202404021529262.png" alt="TrieTree.png"></p><p>基本性质：</p><ul><li>根节点不包含字符，除根节点外的每一个子节点都包含一个字符；</li><li>从根节点到某一个节点，路径上经过的字符连接起来，为该节点对应的字符串；</li><li>每个节点的所有子节点包含的字符互不相同；</li><li>从第一字符开始有连续重复的字符只占用一个节点，比如上面的to，和ten，中重复的单词t只占用了一个节点。</li></ul><h3 id="常见的问题："><a href="#常见的问题：" class="headerlink" title="常见的问题："></a>常见的问题：</h3><ol><li><p>HashMap为什么使用红黑树不使用B树</p><blockquote><p>jdk1.8之前使用链表散列实现，<br>jdk1.8之后当链表长度超过阈值（8）时会进行检测，如果长度小于64会进行数组扩容，大于64转化为红黑树<br>TreeMap、TreeSet以及jdk1.8之后的Hashmap都是用了红黑树，为了解决二叉查找树的缺陷——在某些情况下二叉查找树会退化成一个线性结构</p></blockquote></li><li><p>HashMap为什么使用红黑树，不使用B树</p><blockquote><p>效率和复杂度，红黑树在插入、删除、查找等操作上平衡性更好，且节点数比B树小，占用内存更少，适合存储在内存中的数据结构<br>3.</p></blockquote></li></ol><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><p>由顶点的又穷非空集合和顶点之间的边的集合组成</p><h3 id="图的存储结构"><a href="#图的存储结构" class="headerlink" title="图的存储结构"></a>图的存储结构</h3><ul><li>邻接矩阵表示法<br><img src="https://oss.luhuhu.cn/202404021529258.png" alt="AdjacencyMatrix.png"><br>当图为稀疏图时，会造成极大空间浪费</li><li>邻接表表示法<br><img src="https://oss.luhuhu.cn/202404021529200.png" alt="img_3.png"></li><li>带权图<br><img src="https://oss.luhuhu.cn/202404021529282.png" alt="img.png"></li></ul><h3 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h3><ul><li>深度优先</li><li>广度优先</li></ul><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><blockquote><ul><li>连通图：在无向图中，若任意两个顶点vivi与vjvj都有路径相通，则称该无向图为连通图。</li><li>强连通图：在有向图中，若任意两个顶点vivi与vjvj都有路径相通，则称该有向图为强连通图。</li><li>连通网：在连通图中，若图的边具有一定的意义，每一条边都对应着一个数，称为权；权代表着连接连个顶点的代价，称这种连通图叫做连通网。</li><li>生成树：一个连通图的生成树是指一个连通子图，它含有图中全部n个顶点，但只有足以构成一棵树的n-1条边。一颗有n个顶点的生成树有且仅有n-1条边，如果生成树中再添加一条边，则必定成环。</li><li>最小生成树：在连通网的所有生成树中，所有边的代价和最小的生成树，称为最小生成树。</li></ul></blockquote><h3 id="最小生成树算法"><a href="#最小生成树算法" class="headerlink" title="最小生成树算法"></a>最小生成树算法</h3><ul><li>Kruskal算法：大量对边操作，适用于稀疏图</li><li>Prim算法：适用于稠密图，但对优化的prim更适用于系数图，时间复杂度取决于边的数量</li></ul><h3 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h3><p>查找图中两点之间最短路径（权值最小）<br>Dijkstra算法和Floyd算法都是用于求解单源最短路径问题的算法，但是它们在处理有向图时存在一些区别。</p><p>Dijkstra算法是一种贪心算法，它从源点开始，逐步扩展已知的最短路径集合，直到所有顶点都被包含在内。Dijkstra算法的基本思想是：从源点开始，逐步扩展已知的最短路径集合，直到所有顶点都被包含在内。Dijkstra算法在处理有向图时，会根据边的权值来更新最短路径。<br>Dijkstra算法和Floyd算法的优劣势如下：</p><ul><li><p>Dijkstra算法的优势：</p><ol><li>Dijkstra算法可以处理有负权边的有向图，只要图中不存在负权环。</li><li>Dijkstra算法的时间复杂度较低，为O(V^2)或O(E log V)，其中V是顶点数，E是边数。</li></ol></li><li><p>Dijkstra算法的劣势：</p><ol><li>Dijkstra算法需要额外的空间来存储最短路径集合，空间复杂度为O(V)。</li><li>Dijkstra算法在处理有向图时，如果图中存在负权边，可能会导致算法无法找到最短路径。</li></ol></li></ul><p>Floyd算法是一种动态规划算法，它通过迭代地更新所有顶点对之间的最短路径来求解单源最短路径问题。Floyd算法的基本思想是：通过迭代地更新所有顶点对之间的最短路径，来求解单源最短路径问题。Floyd算法在处理有向图时，会根据边的权值来更新最短路径。</p><ul><li><p>Floyd算法的优势：</p><ol><li>Floyd算法可以处理有负权边的有向图，只要图中不存在负权环。</li><li>Floyd算法不需要额外的空间来存储最短路径集合，空间复杂度为O(V^2)。</li></ol></li><li><p>Floyd算法的劣势：</p><ol><li>Floyd算法的时间复杂度较高，为O(V^3)，其中V是顶点数。</li><li>Floyd算法在处理有向图时，如果图中存在负权环，可能会导致算法无法找到最短路径。</li></ol></li></ul><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><p>主要用来解决有向图中的依赖解析问题</p><p>当且仅当一个有向无环图，才能得到对应该图的拓扑排序<br>入度、出度：指节点被指向和指向其他节点的边的数目</p><h3 id="AOE-关键路径"><a href="#AOE-关键路径" class="headerlink" title="AOE&amp;关键路径"></a>AOE&amp;关键路径</h3><p>AOE&amp;AOV，常用于工程管理、流程控制</p><ul><li>AOV:顶点表示活动的网，只描述活动之间制约关系</li><li>AOE:用边表示活动的网，权值表示持续时间</li></ul><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p><img src="https://oss.luhuhu.cn/202404031606436.png" alt="img"></p><h3 id="常见算法"><a href="#常见算法" class="headerlink" title="常见算法"></a>常见算法</h3><ol><li><p>冒泡排序</p><p>每次遍历比较相邻数大小，如果后者比前者小则交换位置，重复操作，直到整个数列有序</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * bubbleSort     * @param aList     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> aList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> aList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>aList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> aList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> aList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>aList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> aList<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    tmp <span class="token operator">=</span> aList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    aList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> aList<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    aList<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\nend"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> aList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>aList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li><li><p><strong>快速排序</strong><br>分治思想，随机选择基准数，通过排序分隔为两部分，一部分比基准小、另一部分比基准大，递归快排</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * quickSort     * @param aList     * @param l     * @param r     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> aList<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> x<span class="token punctuation">;</span>            i <span class="token operator">=</span> l<span class="token punctuation">;</span>            j <span class="token operator">=</span> r<span class="token punctuation">;</span>            x <span class="token operator">=</span> aList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> aList<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> x<span class="token punctuation">)</span>                    j<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从右向左找第一个小于x的数</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>                    aList<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> aList<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> aList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span>                    i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从左向右找第一个大于x的数</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>                    aList<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> aList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            aList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>aList<span class="token punctuation">,</span> l<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 递归调用 */</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>aList<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 递归调用 */</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li><li><p>插入排序</p></li><li><p><strong>希尔排序</strong><br>分组插入方法</p></li><li><p>选择排序</p></li><li><p>选择排序</p></li><li><p>堆排序</p></li><li><p><strong>归并排序</strong></p></li><li><p>桶排序</p></li><li><p>基数排序</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="CS" scheme="https://loaderland.github.io/categories/CS/"/>
    
    
    <category term="数据结构" scheme="https://loaderland.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>MySql</title>
    <link href="https://loaderland.github.io/2024/02/08/MySql/"/>
    <id>https://loaderland.github.io/2024/02/08/MySql/</id>
    <published>2024-02-08T01:38:47.000Z</published>
    <updated>2024-05-24T08:47:00.034Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="mysql基础"><a href="#mysql基础" class="headerlink" title="mysql基础"></a>mysql基础</h2><h3 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h3><h4 id="DDL数据定义语言"><a href="#DDL数据定义语言" class="headerlink" title="DDL数据定义语言"></a>DDL数据定义语言</h4><p>定义数据库对象，核心指令<strong>CREATE、ALTER、DROP</strong></p><h4 id="DML数据库操纵语言"><a href="#DML数据库操纵语言" class="headerlink" title="DML数据库操纵语言"></a>DML数据库操纵语言</h4><p>访问数据CRUD（CREATE，READ，UPDATE，DELETE），即增删改查</p><h4 id="TCL事务控制语言"><a href="#TCL事务控制语言" class="headerlink" title="TCL事务控制语言"></a>TCL事务控制语言</h4><p>管理数据库中的事务，核心指令COMMIT、ROLLBAK</p><h4 id="DCL数据控制语言"><a href="#DCL数据控制语言" class="headerlink" title="DCL数据控制语言"></a>DCL数据控制语言</h4><p>对数据访问权控制，核心指令GRANT,REVOKE</p><p>可以控制的权限有：CONNECT,SELECT,INSERT,UPDATE,DELETE,EXECUTE,USAGE,REFERENCES</p><h3 id="连接和组合"><a href="#连接和组合" class="headerlink" title="连接和组合"></a>连接和组合</h3><h4 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h4><p>连接可以代替子查询，效率一般比子查询高。</p><p><img src="https://oss.luhuhu.cn/202402080934962.png" alt="join"></p><h4 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h4><p>UNION会去除相同行，UNION ALL 会保留相同行。</p><p>JOIN vs UNION：</p><ul><li>JOIN 中连接的列可能不同，UNION中列、列顺序必须相同</li><li>UNION 讲查询结果行放在一起（垂直放置）但JOIN将查询结果列放在一起（水平放置），即它构成一个笛卡尔积</li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h4><table><thead><tr><th align="left">函数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>LEFT()</code>、<code>RIGHT()</code></td><td align="left">左边或者右边的字符</td></tr><tr><td align="left"><code>LOWER()</code>、<code>UPPER()</code></td><td align="left">转换为小写或者大写</td></tr><tr><td align="left"><code>LTRIM()</code>、<code>RTIM()</code></td><td align="left">去除左边或者右边的空格</td></tr><tr><td align="left"><code>LENGTH()</code></td><td align="left">长度</td></tr><tr><td align="left"><code>SOUNDEX()</code></td><td align="left">转换为语音值</td></tr></tbody></table><h4 id="日期和时间处理"><a href="#日期和时间处理" class="headerlink" title="日期和时间处理"></a>日期和时间处理</h4><table><thead><tr><th align="left">函 数</th><th align="left">说 明</th></tr></thead><tbody><tr><td align="left"><code>AddDate()</code></td><td align="left">增加一个日期（天、周等）</td></tr><tr><td align="left"><code>AddTime()</code></td><td align="left">增加一个时间（时、分等）</td></tr><tr><td align="left"><code>CurDate()</code></td><td align="left">返回当前日期</td></tr><tr><td align="left"><code>CurTime()</code></td><td align="left">返回当前时间</td></tr><tr><td align="left"><code>Date()</code></td><td align="left">返回日期时间的日期部分</td></tr><tr><td align="left"><code>DateDiff()</code></td><td align="left">计算两个日期之差</td></tr><tr><td align="left"><code>Date_Add()</code></td><td align="left">高度灵活的日期运算函数</td></tr><tr><td align="left"><code>Date_Format()</code></td><td align="left">返回一个格式化的日期或时间串</td></tr><tr><td align="left"><code>Day()</code></td><td align="left">返回一个日期的天数部分</td></tr><tr><td align="left"><code>DayOfWeek()</code></td><td align="left">对于一个日期，返回对应的星期几</td></tr><tr><td align="left"><code>Hour()</code></td><td align="left">返回一个时间的小时部分</td></tr><tr><td align="left"><code>Minute()</code></td><td align="left">返回一个时间的分钟部分</td></tr><tr><td align="left"><code>Month()</code></td><td align="left">返回一个日期的月份部分</td></tr><tr><td align="left"><code>Now()</code></td><td align="left">返回当前日期和时间</td></tr><tr><td align="left"><code>Second()</code></td><td align="left">返回一个时间的秒部分</td></tr><tr><td align="left"><code>Time()</code></td><td align="left">返回一个日期时间的时间部分</td></tr><tr><td align="left"><code>Year()</code></td><td align="left">返回一个日期的年份部分</td></tr></tbody></table><h4 id="数值处理"><a href="#数值处理" class="headerlink" title="数值处理"></a>数值处理</h4><table><thead><tr><th align="left">函数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">SIN()</td><td align="left">正弦</td></tr><tr><td align="left">COS()</td><td align="left">余弦</td></tr><tr><td align="left">TAN()</td><td align="left">正切</td></tr><tr><td align="left">ABS()</td><td align="left">绝对值</td></tr><tr><td align="left">SQRT()</td><td align="left">平方根</td></tr><tr><td align="left">MOD()</td><td align="left">余数</td></tr><tr><td align="left">EXP()</td><td align="left">指数</td></tr><tr><td align="left">PI()</td><td align="left">圆周率</td></tr><tr><td align="left">RAND()</td><td align="left">随机数</td></tr></tbody></table><h4 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h4><table><thead><tr><th align="left">函 数</th><th align="left">说 明</th></tr></thead><tbody><tr><td align="left"><code>AVG()</code></td><td align="left">返回某列的平均值</td></tr><tr><td align="left"><code>COUNT()</code></td><td align="left">返回某列的行数</td></tr><tr><td align="left"><code>MAX()</code></td><td align="left">返回某列的最大值</td></tr><tr><td align="left"><code>MIN()</code></td><td align="left">返回某列的最小值</td></tr><tr><td align="left"><code>SUM()</code></td><td align="left">返回某列值之和</td></tr></tbody></table><h3 id="排序与分组"><a href="#排序与分组" class="headerlink" title="排序与分组"></a>排序与分组</h3><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>ORDER BY ASC/DESC;</p><blockquote><p>// 指定多个列的排序方向</p><p><strong>SELECT</strong> * <strong>FROM</strong> products<br><strong>ORDER</strong> <strong>BY</strong> prod_price <strong>DESC</strong>, prod_name <strong>ASC</strong>;</p></blockquote><h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><ul><li>GROUP BY</li><li>HAVING<ul><li>HAVING 用于对汇总的GROUP BY 结果进行过滤</li><li>HAVING 要求存在一个GROUP BY子句</li><li>与WHERE差异：HAVING 用于汇总的组记录，WHERE 用于单个记录</li></ul></li></ul><h3 id="视图、索引"><a href="#视图、索引" class="headerlink" title="视图、索引"></a>视图、索引</h3><h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><ul><li>基于SQL语句结果可视化的表</li><li>虚拟表，不能进行索引操作</li><li>主要用于简化SQL操作</li><li>通过给视图访问权限保证数据安全</li></ul><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><ul><li>通过索引更高效地查询数据</li><li>用户无法看到索引，只能用来加速查询</li><li>更新一个包含索引的表需要比更新一个没有索引的表花费更多的时间，这是由于索引本身也需要更新。因此，理想的做法是仅仅在常常被搜索的列（以及表）上面创建索引。</li><li>唯一索引表明此索引的每一个索引值只对应唯一的数据记录。</li></ul><blockquote><p>// 创建索引</p><p><strong>CREATE</strong> <strong>INDEX</strong> user_index<br><strong>ON</strong> <strong>user</strong> (<strong>id</strong>);</p><p>//创建唯一索引</p><p><strong>CREATE</strong> <strong>UNIQUE</strong> <strong>INDEX</strong> user_index<br><strong>ON</strong> <strong>user</strong> (<strong>id</strong>);</p><p>//删除索引</p><p><strong>ALTER</strong> <strong>TABLE</strong> <strong>user</strong><br><strong>DROP</strong> <strong>INDEX</strong> user_index;</p></blockquote><h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><ul><li>存储过程可以看成是对一系列SQL操作的批处理</li><li>优点<ul><li>代码封装</li><li>代码复用</li><li>因为是预先编译，所以性能很高</li></ul></li><li>创建存储过程<ul><li>命令行中创建存储过程需要自定义分隔符，因为命令行是以 <code>;</code> 为结束符，而存储过程中也包含了分号，因此会错误把这部分分号当成是结束符，造成语法错误。</li><li>包含 in、out 和 inout 三种参数。</li><li>给变量赋值都需要用 select into 语句。</li><li>每次只能给一个变量赋值，不支持集合的操作。</li></ul></li></ul><blockquote><p><strong>DROP</strong> <strong>PROCEDURE</strong> <strong>IF</strong> <strong>EXISTS</strong> <code>proc_adder</code>;<br>DELIMITER ;;<br><strong>CREATE</strong> DEFINER=<code>root</code>@<code>localhost</code> <strong>PROCEDURE</strong> <code>proc_adder</code>(<strong>IN</strong> a int, <strong>IN</strong> b int, <strong>OUT</strong> <strong>sum</strong> int)<br><strong>BEGIN</strong><br><strong>DECLARE</strong> c int;<br>if a is null then <strong>set</strong> a = 0;<br><strong>end</strong> <strong>if</strong>;</p><p>if b is null then <strong>set</strong> b = 0;<br><strong>end</strong> <strong>if</strong>;</p><p><strong>set</strong> <strong>sum</strong> = a + b;<br><strong>END</strong><br>;;<br>DELIMITER ;</p></blockquote><blockquote><p><strong>set</strong> @b=5;<br><strong>call</strong> proc_adder(2,@b,@s);<br><strong>select</strong> @s <strong>as</strong> <strong>sum</strong>;</p></blockquote><h3 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h3><p>游标是一个存储在DBMS服务器上的数据库查询，不是SELECT语句，而是SELECT检索的结果集。</p><p>主要用于交互式应用，用户需要对数据集重的任意行进行浏览和修改。</p><blockquote><p>DELIMITER $<br><strong>CREATE</strong> <strong>PROCEDURE</strong> getTotal()<br><strong>BEGIN</strong><br><strong>DECLARE</strong> total INT;<br><em>– 创建接收游标数据的变量</em><br><strong>DECLARE</strong> <strong>sid</strong> INT;<br><strong>DECLARE</strong> sname VARCHAR(10);<br><em>– 创建总数变量</em><br><strong>DECLARE</strong> sage INT;<br><em>– 创建结束标志变量</em><br><strong>DECLARE</strong> done INT <strong>DEFAULT</strong> false;<br><em>– 创建游标</em><br><strong>DECLARE</strong> cur <strong>CURSOR</strong> <strong>FOR</strong> <strong>SELECT</strong> <strong>id</strong>,<strong>name</strong>,age <strong>from</strong> cursor_table <strong>where</strong> age&gt;30;<br><em>– 指定游标循环结束时的返回值</em><br><strong>DECLARE</strong> CONTINUE <strong>HANDLER</strong> <strong>FOR</strong> <strong>NOT</strong> <strong>FOUND</strong> <strong>SET</strong> done = true;<br><strong>SET</strong> total = 0;<br>OPEN cur;<br>FETCH cur INTO sid, sname, sage;<br>WHILE(NOT done)<br><strong>DO</strong><br> <strong>SET</strong> total = total + 1;<br> FETCH cur INTO sid, sname, sage;<br><strong>END</strong> <strong>WHILE</strong>;</p><p>CLOSE cur;<br><strong>SELECT</strong> total;<br><strong>END</strong> $<br>DELIMITER ;</p><p><em>– 调用存储过程</em><br><strong>call</strong> getTotal();</p></blockquote><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><p>触发器是一种与表操作有关的数据库对象，当表出现指定时间时，将调用该对象。</p><h4 id="new-old"><a href="#new-old" class="headerlink" title="new/old"></a>new/old</h4><ul><li>MySQL 中定义了 <code>NEW</code> 和 <code>OLD</code> 关键字，用来表示触发器的所在表中，触发了触发器的那一行数据。</li><li>在 <code>INSERT</code> 型触发器中，<code>NEW</code> 用来表示将要（<code>BEFORE</code>）或已经（<code>AFTER</code>）插入的新数据；</li><li>在 <code>UPDATE</code> 型触发器中，<code>OLD</code> 用来表示将要或已经被修改的原数据，<code>NEW</code> 用来表示将要或已经修改为的新数据；</li><li>在 <code>DELETE</code> 型触发器中，<code>OLD</code> 用来表示将要或已经被删除的原数据；</li><li>使用方法：<code>NEW.columnName</code> （columnName 为相应数据表某一列名）</li></ul><blockquote><p>DELIMITER $<br><strong>CREATE</strong> <strong>TRIGGER</strong> <code>trigger_insert_user</code><br><strong>AFTER</strong> <strong>INSERT</strong> <strong>ON</strong> <code>user</code><br><strong>FOR</strong> <strong>EACH</strong> <strong>ROW</strong><br><strong>BEGIN</strong><br><strong>INSERT</strong> <strong>INTO</strong> <code>user_history</code>(user_id, operate_type, operate_time)<br><strong>VALUES</strong> (NEW.id, ‘add a user’, <strong>now</strong>());<br><strong>END</strong> $<br>DELIMITER ;</p></blockquote><h2 id="数据库集群"><a href="#数据库集群" class="headerlink" title="数据库集群"></a><a href="https://www.cnblogs.com/ricklz/p/17335755.html">数据库集群</a></h2><h3 id="MySQL-Replication"><a href="#MySQL-Replication" class="headerlink" title="MySQL Replication"></a>MySQL Replication</h3><p><code>MySQL Replication</code> 是官方提供的主从同步方案，用于将一个 MySQL 的实例同步到另一个实例中。Replication 为保证数据安全做了重要的保证，是目前运用最广的 MySQL 容灾方案。Replication 用两个或以上的实例搭建了 MySQL 主从复制集群，提供单点写入，多点读取的服务，实现了读的 扩展。</p><p><img src="https://oss.luhuhu.cn/202405231651957.png" alt="一主多从读写分离"></p><blockquote><p>一个主库(M)，三个从库(S)，通过 replication，Master 生成 event 的 binlog，然后发给 slave，Slave 将 event 写入 relaylog，然后将其提交到自身数据库中，实现主从数据同步。</p><p>对于数据库之上的业务层来说，基于 MySQL 的主从复制集群，单点写入 Master ,在 event 同步到 Slave 后，读逻辑可以从任何一个 Slave 读取数据，以读写分离的方式，大大降低 Master 的运行负载，同时提升了 Slave 的资源利用。</p><p>优点：</p><ol><li><p>通过读写分离实现横向扩展的能力，写入和更新操作在源服务器上进行，从服务器中进行数据的读取操作，通过增大从服务器的个数，能够极大的增强数据库的读取能力；</p></li><li><p>数据安全，因为副本可以暂停复制过程，所以可以在副本上运行备份服务而不会破坏相应的源数据；</p></li><li><p>便进行数据分析，可以在写库中创建实时数据，数据的分析操作在从库中进行，不会影响到源数据库的性能；</p></li></ol><p>实现原理</p><p>在主从复制中，从库利用主库上的 binlog 进行重播，实现主从同步，复制的过程中蛀主要使用到了 <code>dump thread，I/O thread，sql thread</code> 这三个线程。</p><p><code>IO thread</code>: 在从库执行 <code>start slave</code> 语句时创建，负责连接主库，请求 binlog，接收 binlog 并写入 relay-log；</p><p><code>dump thread</code>：用于主库同步 binlog 给从库，负责响应从 <code>IO thread</code> 的请求。主库会给每个从库的连接创建一个 <code>dump thread</code>，然后同步 binlog 给从库；</p><p><code>sql thread</code>：读取 <code>relay log</code> 执行命令实现从库数据的更新。</p><p>来看下复制的流程：</p><ol><li><p>主库收到更新命令，执行更新操作，生成 binlog;</p></li><li><p>从库在主从之间建立长连接；</p></li><li><p>主库 dump_thread 从本地读取 binlog 传送刚给从库；</p></li><li><p>从库从主库获取到 binlog 后存储到本地，成为 <code>relay log</code>（中继日志）；</p></li><li><p>sql_thread 线程读取 <code>relay log</code> 解析、执行命令更新数据。</p></li></ol><p>不过 <code>MySQL Replication</code> 有个严重的缺点就是主从同步延迟。</p><p>因为数据是进行主从同步的，那么就会遇到主从同步延迟的情况。</p><p>为什么会出现主从延迟？</p><ol><li><p>从库机器的性能比主库差；</p></li><li><p>从库的压力大；</p></li></ol><ul><li>大量查询放在从库上，可能会导致从库上耗费了大量的 CPU 资源，进而影响了同步速度，造成主从延迟。</li></ul><ol start="3"><li>大事务的执行；</li></ol><ul><li>有事务产生的时候，主库必须要等待事务完成之后才能写入到 binlog，假定执行的事务是一个非常大的数据插入，这些数据传输到从库，从库同步这些数据也需要一定的时间，就会导致从节点出现数据延迟。</li></ul><ol start="4"><li>从库的复制能力较差；</li></ol><p>如果从库的复制能力，低于主库，那么在主库写入压力很大的情况下，就会造成从库长时间数据延迟的情况出现。</p><p>如何解决？</p><ol><li><p>优化业务逻辑，避免出现多线程大事务的并发场景；</p></li><li><p>提高从库的机器性能，减少主库写 binlog 和从库读 binlog 的效率差；</p></li><li><p>保证主库和从库的网络连接，避免出现网络延迟导致的 binlog 传输延迟；</p></li><li><p>强行读主库；</p></li><li><p>配合 semi-sync 半同步复制；</p></li></ol><p><strong>semi-sync 半同步复制</strong></p><p>MySQL 有三种同步模式，分别是：</p><ol><li><p>异步复制：MySQL 中默认的复制是异步的，主库在执行完客户端提交的事务后会立即将结果返回给客户端，并不关心从库是否已经接收并且处理。存在问题就是，如果主库的日志没有及时同步到从库，然后主库宕机了，这时候执行故障转移，在从库冲选主，可能会存在选出的主库中数据不完整；</p></li><li><p>全同步复制：指当主库执行完一个事务，并且等到所有从库也执行完成这个事务的时候，主库在提交事务，并且返回数据给客户端。因为要等待所有从库都同步到主库中的数据才返回数据，所以能够保证主从数据的一致性，但是数据库的性能必然受到影响；</p></li><li><p>半同步复制：是介于全同步和全异步同步的一种，主库至少需要等待一个从库接收并写入到 <code>Relay Log</code> 文件即可，主库不需要等待所有从库给主库返回 ACK。主库收到 ACK ，标识这个事务完成，返回数据给客户端。</p></li></ol><p>MySQL 中默认的复制是异步的，所以主库和从库的同步会存在一定的延迟，更重要的是异步复制还可能引起数据的丢失。全同步复制的性能又太差了，所以从 <code>MySQL 5.5</code> 开始，MySQL 以插件的形式支持 semi-sync 半同步复制。</p><p>半同步复制潜在的问题</p><p>在传统的半同步复制中，主库写数据到 binlog，并且执行 commit 提交事务后，会一直等待一个从库的 ACK。从库会在写入 <code>Relay Log</code> 后，将数据落盘，然后回复给主库 ACK，主库收到这个 ACK 才能给客户端事务完成的确认。</p><p>这样会存在问题就是，主库已经将该事务的 commit 存储到了引擎层，应用已经可以看到数据的变化了，只是在等待从库的返回，如果此时主库宕机，可能从库还没有写入 Relay Log，就会发生主从库数据不一致。</p><p>为了解决这个问题，<code>MySQL 5.7</code> 引入了增强半同步复制。主库写入数据到 binlog 后，就开始等待从库的应答 ACK，直到至少一个从库写入 <code>Relay Log</code> 后，并将数据落盘，然后返回给主库 ACK，通知主库可以进行 commit 操作，然后主库再将事务提交到事务引擎，应用此时才能看到数据的变化。</p><p>不过看下来增强半同步复制，在同步给从库之后，因为自己的数据还没有提交，然后宕机了，主库中也是会存在数据的丢失，不过应该想到的是，这时候主库宕机了，是会重新在从库中选主的，这样新选出的主库数据是没有发生丢失的。</p></blockquote><h3 id="MySQL-Group-Replication"><a href="#MySQL-Group-Replication" class="headerlink" title="MySQL Group Replication"></a>MySQL Group Replication</h3><p>由Oracle MySQL 推出的一个高可用高扩展解决方案，MGT由若干个节点组成复制组，一个事务的提交必须经过组内半数以上协议并通过才能得以提交</p><p><img src="https://oss.luhuhu.cn/202405240938634.jpeg" alt="MGR"></p><blockquote><p>当客户端发起一个更新事务时，该事务先在本地执行，执行完成之后就要发起对事务的提交操作。在还没有真正提交之前，需要将产生的复制写集广播出去，复制到其它成员。因为事务是通过原子广播发送的，所以组中的成员要么都接收事务，要么都不接收事务。如果组中的所有成员收到了该广播消息(事务)，那么他们会按照之前发送事务的相同顺序收到该广播消息。因此，所有组成员都以相同的顺序接收事务的写集，并为事务建立全局顺序。因此，所有组成员都以相同的顺序接收事务的写集，并为事务建立全局顺序。</p><p>在不同组成员并发执行的事务可能存在冲突。冲突是通过检查和比较两个不同并发事务的 <code>write set</code> 来验证的，这个过程称为认证。在认证期间，冲突检测在行级别执行的：如果在不同组成员上执行的两个并发事务更新了同一行数据，则存在冲突。根据冲突认证检测机制判断，按照顺序，第一次提交的会正常执行，第二次提交的事务会在事务发起的原始组成员上执行回滚,，组中的其他成员对该事务执行删除。如果两个事务经常发生冲突，那么最好将这两个事务放在同一个组成员中执行，这样它们在本地锁管理器的协调下将都有机会提交成功，而不至于因为处在两个不同的组成员中由于冲突认证而导致其中一个事务被频繁回滚。</p><p>最终，所有组内成员以相同的顺序接收同一组事务。因此组内成员以相同的顺序应用相同的修改，保证组内数据强一致性。</p><p>有下面的几种特性：</p><ol><li><p>避免脑裂：MGR 中不会出现脑裂的现象；</p></li><li><p>数据一致性保障：MGR 的冗余能力很好，能够保证 <code>Binlog Event</code> 至少被复制到超过一半的成员上，只要同时宕机的成员不超过半数便不会导致数据丢失。MGR还保证只要 <code>Binlog Event</code> 没有被传输到半数以上的成员，本地成员不会将事务的 <code>Binlog Event</code> 写入 Binlog 文件和提交事务，从而保证宕机的服务器上不会有组内在线成员上不存在的数据。因此，宕机的服务器重启后，不再需要特殊的处理就可以加入组；</p></li><li><p>多节点写入支持：多写模式下支持集群中的所有节点都可以写入。</p></li></ol><p>组复制的应用场景</p><ol><li><p>弹性复制：需要非常灵活的复制基础设施的环境，其中MySQL Server的数量必须动态增加或减少，并且在增加或减少Server的过程中，对业务的副作用尽可能少。例如，云数据库服务；</p></li><li><p>高可用分片：分片是实现写扩展的一种流行方法。基于 组复制 实现的高可用分片，其中每个分片都会映射到一个复制组上（逻辑上需要一一对应，但在物理上，一个复制组可以承载多个分片）；</p></li><li><p>替代主从复制：在某些情况下，使用一个主库会造成单点争用。在某些情况下，向整个组内的多个成员同时写入数据，对应用来说可能伸缩性更强；</p></li><li><p>自治系统：可以利用组复制内置的自动故障转移、数据在不同组成员之间的原子广播和最终数据一致性的特性来实现一些运维自动化。</p></li></ol></blockquote><h3 id="InnoDB-Cluster"><a href="#InnoDB-Cluster" class="headerlink" title="InnoDB Cluster"></a>InnoDB Cluster</h3><p><code>InnoDB Cluster</code> 是官方提供的高可用方案,是 MySQL 的一种高可用性(HA)解决方案，它通过使用 <code>MySQL Group Replication</code> 来实现数据的自动复制和高可用性。</p><p><img src="https://oss.luhuhu.cn/202405241416389.png" alt="HA"></p><blockquote><p><code>InnoDB Cluster</code> 通常包含下面三个关键组件：</p><ol><li><p><code>MySQL Shell</code>: 它是 MySQL 的高级管理客户端;</p></li><li><p><code>MySQL Server</code> 和 <code>MGR</code>，使得一组 <code>MySQL</code> 实例能够提供高可用性，对于 MGR，<code>Innodb Cluster</code> 提供了一种更加易于编程的方式来处理 MGR;</p></li><li><p><code>MySQL Router</code>，一种轻量级中间件，主要进行路由请求，将客户端发送过来的请求路由到不同的 MySQL 服务器节点。</p></li></ol><p><code>MySQL Server</code> 基于 <code>MySQL Group Replication</code> 构建，提供自动成员管理，容错，自动故障转移动能等。<code>InnoDB Cluster</code> 通常以单主模式运行，一个读写实例和多个只读实例。不过也可以选用多主模式。</p><p>优点：</p><ol><li><p>高可用性：通过 <code>MySQL Group Replication</code>，<code>InnoDB Cluster</code> 能够实现数据在集群中的自动复制，从而保证数据的可用性；</p></li><li><p>简单易用：<code>InnoDB Cluster</code> 提供了一个简单易用的管理界面，使得管理员可以快速部署和管理集群；</p></li><li><p>全自动故障转移: <code>InnoDB Cluster</code> 能够自动检测和诊断故障，并进行必要的故障转移，使得数据可以继续可用。</p></li></ol><p>缺点：</p><ol><li><p>复杂性：<code>InnoDB Cluster</code> 的部署和管理比较复杂，需要对 MySQL 的工作原理有一定的了解；</p></li><li><p>性能影响：由于自动复制和高可用性的要求，<code>InnoDB Cluster</code> 可能对 MySQL 的性能造成一定的影响；</p></li><li><p>限制：<code>InnoDB Cluster</code> 的功能对于一些特殊的应用场景可能不够灵活，需要更多的定制。</p></li></ol></blockquote><h3 id="InnoDB-ClusterSet"><a href="#InnoDB-ClusterSet" class="headerlink" title="InnoDB ClusterSet"></a>InnoDB ClusterSet</h3><p><code>MySQL InnoDB ClusterSet</code> 通过将主 <code>InnoDB Cluster</code> 与其在备用位置（例如不同数据中心）的一个或多个副本链接起来，为 <code>InnoDB Cluster</code> 部署提供容灾能力。</p><p><code>InnoDB ClusterSet</code> 使用专用的 ClusterSet 复制通道自动管理从主集群到副本集群的复制。如果主集群由于数据中心损坏或网络连接丢失而变得无法使用，用户可以激活副本集群以恢复服务的可用性。</p><p><img src="https://oss.luhuhu.cn/202405241419054.png" alt="Cluster"></p><blockquote><p>InnoDB ClusterSet 的特点：</p><ol><li>主集群和副本集群之间的紧急故障转移可以由管理员通过 <code>MySQL Shell</code>，使用 AdminAPI 进行操作；</li><li>InnoDB ClusterSet 部署中可以拥有的副本集群的数量没有定义的限制；</li><li>异步复制通道将事务从主集群复制到副本集群。<code>clusterset_replication</code> 在 <code>InnoDB ClusterSet</code> 创建过程中，在每个集群上都设置了名为 ClusterSet 的复制通道，当集群是副本时，它使用该通道从主集群复制事务。底层组复制技术管理通道并确保复制始终在主集群的主服务器（作为发送方）和副本集群的主服务器（作为接收方）之间进行；</li><li>每个 <code>InnoDB ClusterSet</code> 集群，只有主集群能够接收写请求，大多数的读请求流量也会被路由到主集群，不过也可以指定读请求到其他的集群；</li></ol><p>InnoDB ClusterSet 的限制：</p><ol><li><p>InnoDB ClusterSet 只支持异步复制，不能使用半同步复制，无法避免异步复制的缺陷：数据延迟、数据一致性等；</p></li><li><p>InnoDB ClusterSet 仅支持Cluster实例的单主模式,不支持多主模式。 即只能包含一个读写主集群, 所有副本集群都是只读的, 不允许具有多个主集群的双活设置，因为在集群发生故障时无法保证数据一致性；</p></li><li><p>已有的 InnoDB Cluster 不能用作 InnoDB ClusterSet 部署中的副本集群。副本集群必须从单个服务器实例启动，作为新的 InnoDB 集群；</p></li><li><p>只支持 MySQL 8.0。</p></li></ol></blockquote><h3 id="InnoDB-ReplicaSet"><a href="#InnoDB-ReplicaSet" class="headerlink" title="InnoDB ReplicaSet"></a>InnoDB ReplicaSet</h3><p><code>InnoDB ReplicaSet</code> 是 MySQL 团队在 2020 年推出的一款产品，用来帮助用户快速部署和管理主从复制，在数据库层仍然使用的是主从复制技术。</p><p><code>InnoDB ReplicaSet</code>由单个主节点和多个辅助节点（传统上称为 MySQL 复制源和副本）组成。</p><p>与<code>InnoDB cluster</code> 类似, <code>MySQL Router</code> 支持针对 <code>InnoDB ReplicaSet</code> 的引导, 这意味着可以自动配置 <code>MySQL Router</code> 以使用 <code>InnoDB ReplicaSet</code>, 而无需手动配置文件. 这使得 <code>InnoDB ReplicaSet</code> 成为一种快速简便的方法, 可以启动和运行 MySQL 复制和 <code>MySQL Router</code>, 非常适合扩展读取, 并在不需要 InnoDB 集群提供高可用性的用例中提供手动故障转移功能。</p><p><img src="https://oss.luhuhu.cn/202405241420657.png" alt="InnoDB ReplicaSet"></p><blockquote><p><code>InnoDB ReplicaSet</code> 的限制：</p><ol><li><p>没有自动故障转移，在主节点不可用的情况下，需要使用 AdminAPI 手动触发故障转移，然后才能再次进行任何更改。但是，辅助实例仍可用于读取；</p></li><li><p>由于意外停止或不可用，无法防止部分数据丢失：在意外停止时未完成的事务可能会丢失；</p></li><li><p>在意外退出或不可用后无法防止不一致。如果手动故障转移提升了一个辅助实例，而前一个主实例仍然可用，例如，由于网络分区，裂脑情况可能会导致数据不一致；</p></li><li><p>InnoDB ReplicaSet 不支持多主模式。允许写入所有成员的经典复制拓扑无法保证数据一致性；</p></li><li><p>读取横向扩展是有限的。<code>InnoDB ReplicaSet</code> 基于异步复制，因此无法像 <code>Group Replication</code> 那样调整流量控制；</p></li><li><p>一个 ReplicaSet 最多由一个主实例组成。支持一个或多个辅助。尽管可以添加到 ReplicaSet 的辅助节点的数量没有限制，但是连接到 ReplicaSet 的每个 MySQL Router 都必须监视每个实例。因此，一个 ReplicaSet 中加入的实例越多，监控就越多。</p></li></ol><p>使用 <code>InnoDB ReplicaSets</code> 的主要原因是你有更好的写性能。使用 <code>InnoDB ReplicaSets</code> 的另一个原因是它们允许在不稳定或慢速网络上部署，而 <code>InnoDB Cluster</code> 则不允许。</p></blockquote><h3 id="MMM"><a href="#MMM" class="headerlink" title="MMM"></a>MMM</h3><p>Master-Master replication manager for MySQL是一套支持双主故障切换和双主日常管理的脚本程序。MMM 使用 Perl 语言开发，主要用来监控和管理 <code>MySQL Master-Master</code>（双主）复制，可以说是 MySQL 主主复制管理器。</p><p>双主模式，业务上同一时刻只能一个主库进行数据的写入。另一个主备库，会在主服务器失效时，进行主备切换和故障转移。</p><p>MMM 中是通过一个 VIP(虚拟 IP) 的机制来保证集群的高可用的。整个集群中，在主节点会提供一个 VIP 地址来提供数据读写服务，当出现故障的时候，VIP 就会从原来的主节点便宜到其他节点，由其他节点提供服务。</p><p><img src="https://oss.luhuhu.cn/202405241421448.png" alt="MMM"></p><blockquote><p>MMM无法完全的保证数据一致性，所以适用于对数据的一致性要求不是很高的场景。（因为主备上的数据不一定是最新的，可能还没从库的新。解决方法：开启半同步）。</p><p>MMM 的优缺点</p><p>优点：高可用性，扩展性好，出现故障自动切换，对于主主同步，在同一时间只提供一台数据库写操作，保证数据的一致性。</p><p>缺点：无法完全保数据的一致性，建议采用半同步复制方式，减少失败的概率；目前 MMM 社区已经缺少维护，不支持基于 GTID 的复制。</p><p>适用场景：</p><p>MMM的适用场景为数据库访问量大，业务增长快，并且能实现读写分离的场景。</p></blockquote><h3 id="MHA"><a href="#MHA" class="headerlink" title="MHA"></a>MHA</h3><p>Master High Availability Manager and Tools for MySQL，简称 MHA 。是一套优秀的作为 MySQL 高可用性环境下故障切换和主从提升的高可用软件。</p><p>这个工具专门用于监控主库的状态，当发现 master 节点故障的时候，会自动提升其中拥有新数据的 slave 节点成为新的 master 节点，在此期间,MHA 会通过其他从节点获取额外的信息来避免数据一致性问题。MHA 还提供了 mater 节点的在线切换功能，即按需切换 master-slave 节点。MHA 能够在30秒内实现故障切换，并能在故障切换过程中，最大程度的保证数据一致性。</p><p><img src="https://oss.luhuhu.cn/202405241421054.png" alt="MHA"></p><blockquote><p>MHA 由两部分组成；</p><p>MHA Manager（管理节点）和MHA Node（数据节点）。</p><p><code>MHA Manager</code> 可以单独部署在一台独立的机器上管理多个 master-slave 集群，也可以部署在一台 slave节点上。<code>MHA Node</code> 运行在每台 MySQL 服务器上，<code>MHA Manager</code> 会定时探测集群中的 master 节点，当 master 出现故障时，它可以自动将最新数据的 slave 提升为新的 master，然后将所有其他的 slave 重新指向新的 master。</p><p>整个故障转移过程对应用程序完全透明。</p><p>在 MHA 自动故障切换过程中，MHA 试图从宕机的主服务器上最大限度的保存二进制日志，最大程度的保证数据的不丢失，但这并不总是可行的。例如，主服务器硬件故障或无法通过 ssh 访问，MHA 没法保存二进制日志，只进行故障转移而丢失了最新的数据。</p><p>使用 <code>MySQL 5.5</code> 开始找支持的半同步复制，可以大大降低数据丢失的风险。MHA可以与半同步复制结合起来。如果只有一个 slave 已经收到了最新的二进制日志，MHA 可以将最新的二进制日志应用于其他所有的 slave 服务器上，因此可以保证所有节点的数据一致性。</p><p>目前 MHA 主要支持一主多从的架构，要搭建 MHA,要求一个复制集群中必须最少有三台数据库服务器 ，一主二从，即一台 master，一台充当备用 master，另外一台充当从库，因为至少需要三台服务器。</p><p>MHA 工作原理总结如下：</p><ol><li><p>从宕机崩溃的 master 保存二进制日志事件（binlog events）；</p></li><li><p>识别最新更新的 slave；</p></li><li><p>应用差异的中继日志(relay log) 到其他slave；</p></li><li><p>应用从master保存的二进制日志事件(binlog events)；</p></li><li><p>提升一个 slave 为新master；</p></li><li><p>使用其他的 slave 连接新的 master 进行复制。</p></li></ol><p>优点：</p><ol><li><p>可以支持基于 GTID 的复制模式；</p></li><li><p>MHA 在进行故障转移时更不易产生数据丢失；</p></li><li><p>同一个监控节点可以监控多个集群。</p></li></ol><p>缺点：</p><ol><li><p>需要编写脚本或利用第三方工具来实现 Vip 的配置；</p></li><li><p>MHA 启动后只会对主数据库进行监控；</p></li><li><p>需要基于 SSH 免认证配置，存在一定的安全隐患。</p></li></ol></blockquote><h3 id="Galera-Cluster"><a href="#Galera-Cluster" class="headerlink" title="Galera Cluster"></a>Galera Cluster</h3><p><code>Galera Cluster</code> 是由 Codership 开发的MySQL多主集群，包含在 MariaDB 中，同时支持 <code>Percona xtradb、MySQL</code>，是一个易于使用的高可用解决方案，在数据完整性、可扩展性及高性能方面都有可接受的表现。</p><p>其本身具有 multi-master 特性，支持多点写入，<code>Galera Cluster</code> 中每个实例都是对等的，互为主从。当客户端读写数据的时候，可以选择任一 MySQL 实例，对于读操作，每个实例读取到的数据都是相同的。对于写操作，当数据写入某一节点后，集群会将其同步到其它节点。这种架构不共享任何数据，是一种高冗余架构。</p><p><img src="https://oss.luhuhu.cn/202405241422103.png" alt="Galera Cluster"></p><blockquote><p><strong>主要功能</strong></p><ol><li><p>同步复制；</p></li><li><p>真正的 multi-master，即所有节点可以同时读写数据库；</p></li><li><p>自动的节点成员控制，失效节点自动被清除；</p></li><li><p>新节点加入数据自动复制；</p></li><li><p>真正的并行复制，行级；</p></li><li><p>用户可以直接连接集群，使用感受上与 MySQL 完全一致。</p></li></ol><p><strong>优势</strong></p><ol><li><p>数据一致：同步复制保证了整个集群的数据一致性，无论何时在任何节点执行相同的select查询，结果都一样；</p></li><li><p>高可用性：由于所有节点数据一致，单个节点崩溃不需要执行复杂耗时的故障切换，也不会造成丢失数据或停止服务；</p></li><li><p>性能改进：同步复制允许在集群中的所有节点上并行执行事务，从而提高读写性能；</p></li><li><p>更小的客户端延迟；</p></li><li><p>同时具有读和写的扩展能力。</p></li></ol><p>分析下原理</p><p><code>Galera Cluster</code> 中主要用到了同步复制，主库中的单个更新事务需要在所有从库中同步更新，当主库提交事务，集群中的所有节点数据保持一致。</p><p>异步复制，主库将数据更新传播给从库后立即提交事务，而不论从库是否成功读取或重放数据变化，所以异步复制会存在短暂的，主从数据同步不一致的情况出现。</p><p>不过同步复制的缺点也是很明显的，同步复制协议通常使用两阶段提交或分布式锁协调不同节点的操作，也及时说节点越多需要协调的节点也就越多，那么事务冲突和死锁的概率也就会随之增加。</p><p>我们知道 MGR 组复制的引入也是为了解决传统异步复制和半同步复制可能产生数据不一致的问题，MGR 中的组复制，基于 Paxos 协议，原则上事务的提交，主要大多数节点 ACK 就可以提交了。</p><p><code>Galera Cluster</code> 中的同步需要同步数据到所有节点，保证所有节点都成功。基于专有通信组系统 GCommon ,所有节点都必须有 ACK。</p><p>Galera 复制是一种基于验证的复制，基于验证的复制使用通信和排序技术实现同步复制，通过广播并发事务之间建立的全局总序来协调事务提交。简单的讲就是事务必须以相同的顺序应用于所有实例。</p><p>事务现在本地执行，然后发送的其他节点做冲突验证，没有冲突的时候所有节点提交事务，否则在所有节点回滚。</p><p><img src="https://oss.luhuhu.cn/202405241422395.png" alt="mysql"></p><p>当客户端发出 commit 命令时，在实际提交之前，对数据所做的更改都会收集到一个写集合中，写集合中包含事务信息和所更改行的主键，数据库将写集发送到其它节点。</p><p>节点用写集中的主键与当前节点中未完成事务的所有写集的主键比较，确定节点是否可以提交事务，同时满足下面三个条件会被任务存在冲突，验证失败：</p><ol><li><p>两个事务来源于不同节点；</p></li><li><p>两个事务包含相同的主键；</p></li><li><p>老事务对新事务不可见，即老事务未提交完成。新老事务的划定依赖于全局事务总序，即 GTID。</p></li></ol><p>验证失败，节点将删除写集，集群将回滚原始事务，对于所有的节点都是如此，每个节点单独进行验证。因为所有节点都以相同的顺序接收事务，它们对事务的结果都会做出相同的决定，要么全成功，要么都失败。成功后自然就提交了，所有的节点又会重新达到数据一致的状态。节点之间不交换“是否冲突”的信息，各个节点独立异步处理事务。</p></blockquote><h3 id="MySQL-Cluster"><a href="#MySQL-Cluster" class="headerlink" title="MySQL Cluster"></a>MySQL Cluster</h3><p><code>MySQL Cluster</code> 是一个高度可扩展的，兼容 ACID 事务的实时数据库，基于分布式架构不存在单点故障，<code>MySQL Cluster</code> 支持自动水平扩容，并能做自动的读写负载均衡。</p><p><code>MySQL Cluster</code> 使用了一个叫 NDB 的内存存储引擎来整合多个 MySQL 实例，提供一个统一的服务集群。</p><p>NDB 是一种内存性的存储引擎,使用 Sarding-Nothing 的无共享的架构。Sarding-Nothing 指的是每个节点有独立的处理器，磁盘和内存，节点之间没有共享资源完全独立互不干扰，节点之间通过告诉网络组在一起，每个节点相当于是一个小型的数据库，存储部分数据。这种架构的好处是可以利用节点的分布性并行处理数据，调高整体的性能，还有就是有很高的水平扩展性能，只需要增加节点就能增加数据的处理能力。</p><p><img src="https://oss.luhuhu.cn/202405241423832.png" alt="MySQL Cluster"></p><blockquote><p><code>MySql Cluster</code> 中包含三种节点，分别是管理节点(NDB Management Server)、数据节点(Data Nodes)和 SQL查询节点(SQL Nodes) 。</p><p><code>SQL Nodes</code> 是应用程序的接口，像普通的 mysqld 服务一样，接受用户的 SQL 输入，执行并返回结果。<code>Data Nodes</code> 是数据存储节点，<code>NDB Management Server</code> 用来管理集群中的每个 node。</p><p>其中数据节点会存储集群中的数据分区和分区的副本，来看下 <code>MySql Cluster</code> 是如何对数据进行分片的操作的，首先来了解下下面几个概念</p><ul><li>节点组（Node Group）： 一组数据节点的集合。节点组的个数=<code>节点数 / 副本数</code>；</li></ul><p>比如有集群中 4 个节点，副本数为 2（对应 NoOfReplicas 的设置），那么节点组个数为2。</p><p>另外，在可用性方面，数据的副本在组内交叉分配，一个节点组内只有要一台机器可用，就可以保证整个集群的数据完整性，实现服务的整体可用。</p><ul><li>分区（Partition）：<code>MySql Cluster</code> 是一个分布式的存储系统，数据按照 分区 划分成多份存储在各数据节点中，分区个数由系统自动计算，<code>分区数 = 数据节点数 / LDM 线程数</code>；</li><li>副本（Replica）：分区数据的备份，有几个分区就有几个副本，为了避免单点，保证 <code>MySql Cluster</code> 集群的高可用，原始数据对应的分区和副本通常会保存在不同的主机上，在一个节点组内进行交叉备份。</li></ul><p><img src="https://oss.luhuhu.cn/202405241423516.png" alt="mysql"></p><p>栗如，上面的例子，有四个数据节点（使用ndbd），副本数为2的集群，节点组被分为2组（4/2），数据被分为4个分区，数据分配情况如下:</p><p>分区0（Partition 0）保存在节点组 0（Node Group 0）中，分区数据(主副本 — Primary Replica)保存在节点1(node 1) 中，备份数据(备份副本，Backup Replica)保存在节点2(node 2) 中；</p><p>分区1（Partition 1）保存在节点组 1（Node Group 1）中，分区数据(主副本 — Primary Replica)保存在节点3(node 3) 中，备份数据(备份副本，Backup Replica)保存在节点4(node 4) 中；</p><p>分区2（Partition 2）保存在节点组 0（Node Group 0）中，分区数据(主副本 — Primary Replica)保存在节点2(node 2) 中，备份数据(备份副本，Backup Replica)保存在节点1(node 1) 中；</p><p>分区3（Partition 2）保存在节点组 1（Node Group 1）中，分区数据(主副本 — Primary Replica)保存在节点4(node 4) 中，备份数据(备份副本，Backup Replica)保存在节点3(node 3) 中；</p><p>这样，对于一张表的一个 Partition 来说，在整个集群有两份数据，并分布在两个独立的 Node 上，实现了数据容灾。同时，每次对一个 Partition 的写操作，都会在两个 Replica 上呈现，如果 <code>Primary Replica</code> 异常，那么 <code>Backup Replica</code> 可以立即提供服务，实现数据的高可用。</p><p><code>mysql cluster</code> 的优点</p><ol><li><p>99.999％的高可用性；</p></li><li><p>快速的自动失效切换；</p></li><li><p>灵活的分布式体系结构，没有单点故障；</p></li><li><p>高吞吐量和低延迟；</p></li><li><p>可扩展性强，支持在线扩容。</p></li></ol><p><code>mysql cluster</code> 的缺点</p><ol><li><p>存在很多限制，比如：不支持外键，数据行不能超过8K（不包括BLOB和text中的数据）；</p></li><li><p>部署、管理、配置很复杂；</p></li><li><p>占用磁盘空间大，内存大；</p></li><li><p>备份和恢复不方便；</p></li><li><p>重启的时候，数据节点将数据 load 到内存需要很长时间。</p></li></ol></blockquote><h3 id="MySQL-Fabric"><a href="#MySQL-Fabric" class="headerlink" title="MySQL Fabric"></a>MySQL Fabric</h3><p><code>MySQL Fabric</code> 会组织多个 MySQL 数据库，将大的数据分散到多个数据库中，即数据分片<code>(Data Shard)</code>,同时同一个分片数据库中又是一个主从结构，Fabric 会挑选合适的库作为主库，当主库挂掉的时候，又会重新在从库中选出一个主库。</p><p><img src="https://oss.luhuhu.cn/202405241423436.png" alt="MySQL Fabric"></p><blockquote><p><code>MySQL Fabric</code> 的特点：</p><ol><li><p>高可用；</p></li><li><p>使用数据分片的横向功能。</p></li></ol><p><code>MySQL Fabric-aware</code> 连接器把从 <code>MySQL Fabric</code> 获取的路由信息存储到缓存中，然后凭借该信息将事务或查询发送给正确的 MySQL 服务器。</p><p>同时，每一个分片组，可以又多个一个服务器组成，构成主从结构，当主库挂掉的时候，又会重新在从库中选出一个主库。保证节点的高可用。</p><p><code>HA Group</code> 保证访问指定 <code>HA Group</code> 的数据总是可用的，同时其基础的数据复制是基于 <code>MySQL Replication</code> 实现的。</p><p>缺点</p><p>事务及查询只支持在同一个分片内，事务中更新的数据不能跨分片，查询语句返回的数据也不能跨分片。</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><p><code>MySQL Replication</code> 是官方提供的主从同步方案，用于将一个 MySQL 的实例同步到另一个实例中，在主从复制中，从库利用主库上的 binlog 进行重播，实现主从同步，默认是异步同步，针对其在不同场景下的一些缺陷，衍生出了半同步复制，强同步复制等数据高可用的方案；</p></li><li><p><code>MySQL Group Replication</code> 组复制又称为 MGR,引入复制组主要是为了解决传统异步复制和半同步复制可能产生数据不一致的问题, MGR 由若干个节点共同组成一个复制组，一个事务的提交，必须经过组内大多数节点 (N / 2 + 1) 决议并通过，才能得以提交;</p></li><li><p><code>InnoDB Cluster</code> 是官方提供的高可用方案,是 MySQL 的一种高可用性(HA)解决方案，它通过使用<code>MySQL Group Replication</code> 来实现数据的自动复制和高可用性；</p></li><li><p><code>InnoDB ClusterSet</code> 通过将主 <code>InnoDB Cluster</code> 与其在备用位置（例如不同数据中心）的一个或多个副本链接起来，为 <code>InnoDB Cluster</code> 部署提供容灾能力，每个节点就是一个 <code>InnoDB Cluster</code>；</p></li><li><p><code>InnoDB ReplicaSet</code> 与<code>InnoDB cluster</code> 类似, <code>MySQL Router</code> 支持针对 <code>InnoDB ReplicaSet</code> 的引导, 这意味着可以自动配置 <code>MySQL Router</code> 以使用 <code>InnoDB ReplicaSet</code>, 而无需手动配置文件. 这使得 <code>InnoDB ReplicaSet</code> 成为一种快速简便的方法, 可以启动和运行 MySQL 复制和 <code>MySQL Router</code>, 非常适合扩展读取, 并在不需要 InnoDB 集群提供高可用性的用例中提供手动故障转移功能；</p></li><li><p>MMM（Master-Master replication manager for MySQL）是一套支持双主故障切换和双主日常管理的脚本程序。MMM 使用 Perl 语言开发，主要用来监控和管理 MySQL Master-Master（双主）复制，可以说是 MySQL 主主复制管理器;</p></li><li><p><code>Master High Availability Manager and Tools for MySQL</code>，简称 MHA 。是一套优秀的作为 MySQL 高可用性环境下故障切换和主从提升的高可用软件，这个工具专门用于监控主库的状态，当发现 master 节点故障的时候，会自动提升其中拥有新数据的 slave 节点成为新的 master 节点，在此期间,MHA 会通过其他从节点获取额外的信息来避免数据一致性问题。MHA 还提供了 mater 节点的在线切换功能，即按需切换 master-slave 节点。MHA 能够在30秒内实现故障切换，并能在故障切换过程中，最大程度的保证数据一致性；</p></li><li><p><code>Galera Cluster</code> 是由 Codership 开发的MySQL多主集群，包含在 MariaDB 中，同时支持 Percona xtradb、MySQL，是一个易于使用的高可用解决方案，在数据完整性、可扩展性及高性能方面都有可接受的表现，本身具有 multi-master 特性，支持多点写入，Galera Cluster 中每个实例都是对等的，互为主从。当客户端读写数据的时候，可以选择任一 MySQL 实例，对于读操作，每个实例读取到的数据都是相同的。对于写操作，当数据写入某一节点后，集群会将其同步到其它节点。这种架构不共享任何数据，是一种高冗余架构；</p></li><li><p><code>MySQL Cluster</code> 是一个高度可扩展的，兼容 ACID 事务的实时数据库，基于分布式架构不存在单点故障，<code>MySQL Cluster</code> 支持自动水平扩容，并能做自动的读写负载均衡，MySQL Cluster 使用了一个叫 NDB 的内存存储引擎来整合多个 MySQL 实例，提供一个统一的服务集群；</p></li><li><p><code>MySQL Fabric</code> 会组织多个 MySQL 数据库，将大的数据分散到多个数据库中，即数据分片(Data Shard),同时同一个分片数据库中又是一个主从结构，Fabric 会挑选合适的库作为主库，当主库挂掉的时候，又会重新在从库中选出一个主库。</p></li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://book.douban.com/subject/23008813/">【高性能MySQL(第3版)】</a><br><a href="https://time.geekbang.org/column/100020801">【MySQL 实战 45 讲】</a><br><a href="https://book.douban.com/subject/24708143/">【MySQL技术内幕】</a><br><a href="https://github.com/boilingfrog/Go-POINT/tree/master/mysql">【MySQL学习笔记】</a><br><a href="https://dev.mysql.com/doc/refman/8.0/en/replication.html">【MySQL文档】</a><br><a href="http://www.linkedkeeper.com/1503.html">【浅谈 MySQL binlog 主从同步】</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="CS" scheme="https://loaderland.github.io/categories/CS/"/>
    
    
    <category term="笔记" scheme="https://loaderland.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="MySql" scheme="https://loaderland.github.io/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis</title>
    <link href="https://loaderland.github.io/2024/02/08/MyBatis/"/>
    <id>https://loaderland.github.io/2024/02/08/MyBatis/</id>
    <published>2024-02-08T01:28:17.000Z</published>
    <updated>2024-04-02T07:13:28.591Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Mybatis简介"><a href="#Mybatis简介" class="headerlink" title="Mybatis简介"></a>Mybatis简介</h1><h2 id="MyBatis历史"><a href="#MyBatis历史" class="headerlink" title="MyBatis历史"></a>MyBatis历史</h2><ul><li>MyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁移到了Google Code。随着开发团队转投Google Code旗下，iBatis3.x正式更名为MyBatis。代码于2013年11月迁移到Github</li><li>iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。iBatis提供的持久层框架包括SQL Maps和Data Access Objects（DAO）</li></ul><h2 id="MyBatis特性"><a href="#MyBatis特性" class="headerlink" title="MyBatis特性"></a>MyBatis特性</h2><ol><li>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</li><li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</li><li>MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录</li><li>MyBatis 是一个 半自动的ORM（Object Relation Mapping）框架</li></ol><h2 id="MyBatis下载"><a href="#MyBatis下载" class="headerlink" title="MyBatis下载"></a>MyBatis下载</h2><ul><li><a href="https://github.com/mybatis/mybatis-3">MyBatis下载地址</a></li><li><img src="https://oss.luhuhu.cn/202402080922656.png"></li></ul><h2 id="和其它持久化层技术对比"><a href="#和其它持久化层技术对比" class="headerlink" title="和其它持久化层技术对比"></a>和其它持久化层技术对比</h2><ul><li>JDBC  </li><li>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤  <ul><li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见  </li><li>代码冗长，开发效率低</li></ul></li><li>Hibernate 和 JPA</li><li>操作简便，开发效率高  <ul><li>程序中的长难复杂 SQL 需要绕过框架  </li><li>内部自动生产的 SQL，不容易做特殊优化  </li><li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。  </li><li>反射操作太多，导致数据库性能下降</li></ul></li><li>MyBatis</li><li>轻量级，性能出色  <ul><li>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据  </li><li>开发效率稍逊于HIbernate，但是完全能够接受</li></ul></li></ul><h1 id="搭建MyBatis"><a href="#搭建MyBatis" class="headerlink" title="搭建MyBatis"></a>搭建MyBatis</h1><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul><li>IDE：idea 2019.2  </li><li>构建工具：maven 3.5.4  </li><li>MySQL版本：MySQL 5.7  </li><li>MyBatis版本：MyBatis 3.5.7</li></ul><h2 id="创建maven工程"><a href="#创建maven工程" class="headerlink" title="创建maven工程"></a>创建maven工程</h2><ul><li><p>打包方式：jar</p></li><li><p>引入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Mybatis核心 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- junit测试 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- MySQL驱动 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="创建MyBatis的核心配置文件"><a href="#创建MyBatis的核心配置文件" class="headerlink" title="创建MyBatis的核心配置文件"></a>创建MyBatis的核心配置文件</h2><blockquote><p>习惯上命名为<code>mybatis-config.xml</code>，这个文件名仅仅只是建议，并非强制要求。将来整合Spring之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴。<br>核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息<br>核心配置文件存放的位置是src/main/resources目录下</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>  <span class="token doctype">&lt;!DOCTYPE configuration  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-config.dtd"></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--设置连接数据库的环境--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/MyBatis<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--引入映射文件--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mappers/UserMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h2 id="创建mapper接口"><a href="#创建mapper接口" class="headerlink" title="创建mapper接口"></a>创建mapper接口</h2><blockquote><p>MyBatis中的mapper接口相当于以前的dao。但是区别在于，mapper仅仅是接口，我们不需要提供实现类</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**      * 添加用户信息      */</span>      <span class="token keyword">int</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h2 id="创建MyBatis的映射文件"><a href="#创建MyBatis的映射文件" class="headerlink" title="创建MyBatis的映射文件"></a>创建MyBatis的映射文件</h2><ul><li>相关概念：ORM（Object Relationship Mapping）对象关系映射。  </li><li>对象：Java的实体类对象  <ul><li>关系：关系型数据库  </li><li>映射：二者之间的对应关系</li></ul></li></ul><table><thead><tr><th>Java概念</th><th>数据库概念</th></tr></thead><tbody><tr><td>类</td><td>表</td></tr><tr><td>属性</td><td>字段/列</td></tr><tr><td>对象</td><td>记录/行</td></tr></tbody></table><ul><li>映射文件的命名规则</li><li>表所对应的实体类的类名+Mapper.xml<ul><li>例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml </li><li>因此一个映射文件对应一个实体类，对应一张表的操作</li><li>MyBatis映射文件用于编写SQL，访问以及操作表中的数据</li><li>MyBatis映射文件存放的位置是src/main/resources/mappers目录下</li></ul></li><li>MyBatis中可以面向接口操作数据，要保证两个一致</li><li>mapper接口的全类名和映射文件的命名空间（namespace）保持一致<ul><li>mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致</li></ul></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>  <span class="token doctype">&lt;!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--int insertUser();--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          insert into t_user values(null,'张三','123',23,'女')      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><h2 id="通过junit测试功能"><a href="#通过junit测试功能" class="headerlink" title="通过junit测试功能"></a>通过junit测试功能</h2><ul><li>SqlSession：代表Java程序和数据库之间的会话。（HttpSession是Java程序和浏览器之间的会话）</li><li>SqlSessionFactory：是“生产”SqlSession的“工厂”</li><li>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserMapperTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsertUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//读取MyBatis的核心配置文件</span>        InputStream is <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取SqlSessionFactoryBuilder对象</span>        SqlSessionFactoryBuilder sqlSessionFactoryBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span>        SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> sqlSessionFactoryBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取sqlSession，此时通过SqlSession对象所操作的sql都必须手动提交或回滚事务</span>        <span class="token comment" spellcheck="true">//SqlSession sqlSession = sqlSessionFactory.openSession();</span>        <span class="token comment" spellcheck="true">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交  </span>        SqlSession sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过代理模式创建UserMapper接口的代理实现类对象</span>        UserMapper userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配映射文件中的SQL标签，并执行标签中的SQL语句</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//提交事务</span>        <span class="token comment" spellcheck="true">//sqlSession.commit();</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result:"</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>此时需要手动提交事务，如果要自动提交事务，则在获取sqlSession对象时，使用<code>SqlSession sqlSession = sqlSessionFactory.openSession(true);</code>，传入一个Boolean类型的参数，值为true，这样就可以自动提交</li></ul><h2 id="加入log4j日志功能"><a href="#加入log4j日志功能" class="headerlink" title="加入log4j日志功能"></a>加入log4j日志功能</h2><ol><li><p>加入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- log4j日志 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>加入log4j的配置文件</p><ul><li>log4j的配置文件名为log4j.xml，存放的位置是src/main/resources目录下</li><li>日志的级别：FATAL(致命)&gt;ERROR(错误)&gt;WARN(警告)&gt;INFO(信息)&gt;DEBUG(调试) 从左到右打印的内容越来越详细</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE log4j:configuration SYSTEM "log4j.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">log4j:</span>configuration</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>log4j</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://jakarta.apache.org/log4j/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.log4j.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Encoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.log4j.PatternLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ConversionPattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%-5p %d{MM-dd HH:mm:ss,SSS} %m (%F:%L) \n<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.sql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.ibatis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">log4j:</span>configuration</span><span class="token punctuation">></span></span></code></pre></li></ol><h1 id="核心配置文件详解"><a href="#核心配置文件详解" class="headerlink" title="核心配置文件详解"></a>核心配置文件详解</h1><blockquote><p>核心配置文件中的标签必须按照固定的顺序(有的标签可以不写，但顺序一定不能乱)：<br>properties、settings、typeAliases、typeHandlers、objectFactory、objectWrapperFactory、reflectorFactory、plugins、environments、databaseIdProvider、mappers</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//MyBatis.org//DTD Config 3.0//EN"        "http://MyBatis.org/dtd/MyBatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--引入properties文件，此时就可以${属性名}的方式访问属性值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--将表中字段的下划线自动转换为驼峰--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--开启延迟加载--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--        typeAlias：设置某个具体的类型的别名        属性：        type：需要设置别名的类型的全类名        alias：设置此类型的别名，且别名不区分大小写。若不设置此属性，该类型拥有默认的别名，即类名        --></span>        <span class="token comment" spellcheck="true">&lt;!--&lt;typeAlias type="com.atguigu.mybatis.bean.User">&lt;/typeAlias>--></span>        <span class="token comment" spellcheck="true">&lt;!--&lt;typeAlias type="com.atguigu.mybatis.bean.User" alias="user">        &lt;/typeAlias>--></span>        <span class="token comment" spellcheck="true">&lt;!--以包为单位，设置改包下所有的类型都拥有默认的别名，即类名且不区分大小写--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.bean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    environments：设置多个连接数据库的环境    属性：        default：设置默认使用的环境的id    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql_test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--        environment：设置具体的连接数据库的环境信息        属性：            id：设置环境的唯一标识，可通过environments标签中的default设置某一个环境的id，表示默认使用的环境        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql_test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--            transactionManager：设置事务管理方式            属性：                type：设置事务管理方式，type="JDBC|MANAGED"                type="JDBC"：设置当前环境的事务管理都必须手动处理                type="MANAGED"：设置事务被管理，例如spring中的AOP            --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!--            dataSource：设置数据源            属性：                type：设置数据源的类型，type="POOLED|UNPOOLED|JNDI"                type="POOLED"：使用数据库连接池，即会将创建的连接进行缓存，下次使用可以从缓存中直接获取，不需要重新创建                type="UNPOOLED"：不使用数据库连接池，即每次使用连接都需要重新创建                type="JNDI"：调用上下文中的数据源            --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--设置驱动类的全类名--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token comment" spellcheck="true">&lt;!--设置连接数据库的连接地址--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token comment" spellcheck="true">&lt;!--设置连接数据库的用户名--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token comment" spellcheck="true">&lt;!--设置连接数据库的密码--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--引入映射文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;mapper resource="UserMapper.xml"/> --></span>        <span class="token comment" spellcheck="true">&lt;!--        以包为单位，将包下所有的映射文件引入核心配置文件        注意：            1. 此方式必须保证mapper接口和mapper映射文件必须在相同的包下            2. mapper接口要和mapper映射文件的名字一致        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><ul><li><img src="https://oss.luhuhu.cn/202402080923480.png"></li></ul><h1 id="默认的类型别名"><a href="#默认的类型别名" class="headerlink" title="默认的类型别名"></a>默认的类型别名</h1><p><img src="https://oss.luhuhu.cn/202402080923140.png"><br><img src="C:/Users/loaderland/Desktop/Learn/MyBatis/Resources/默认的类型别名2.png"></p><h1 id="MyBatis的增删改查"><a href="#MyBatis的增删改查" class="headerlink" title="MyBatis的增删改查"></a>MyBatis的增删改查</h1><ol><li><p>添加</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--int insertUser();--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    insert into t_user values(null,'admin','123456',23,'男','12345@qq.com')<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre></li><li><p>删除</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--int deleteUser();--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     delete from t_user where id = 6 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span></code></pre></li><li><p>修改</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--int updateUser();--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     update t_user set username = '张三' where id = 5 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span></code></pre></li><li><p>查询一个实体类对象</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--User getUserById();--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.bean.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select * from t_user where id = 2  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li><li><p>查询集合</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--List&lt;User> getUserList();--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.bean.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li></ol><ul><li><p>注意：</p><ol><li>查询的标签select必须设置属性resultType或resultMap，用于设置实体类和数据库表的映射关系  <ul><li>resultType：自动映射，用于属性名和表中字段名一致的情况  </li><li>resultMap：自定义映射，用于一对多或多对一或字段名和属性名不一致的情况</li></ul></li><li>当查询的数据为多条时，不能使用实体类作为返回值，只能使用集合，否则会抛出异常TooManyResultsException；但是若查询的数据只有一条，可以使用实体类或集合作为返回值</li></ol></li></ul><h1 id="MyBatis获取参数值的两种方式（重点）"><a href="#MyBatis获取参数值的两种方式（重点）" class="headerlink" title="MyBatis获取参数值的两种方式（重点）"></a>MyBatis获取参数值的两种方式（重点）</h1><ul><li>MyBatis获取参数值的两种方式：${}和#{}  </li><li>${}的本质就是字符串拼接，#{}的本质就是占位符赋值  </li><li>${}使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引号；但是#{}使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，可以自动添加单引号</li></ul><h2 id="单个字面量类型的参数"><a href="#单个字面量类型的参数" class="headerlink" title="单个字面量类型的参数"></a>单个字面量类型的参数</h2><ul><li>若mapper接口中的方法参数为单个的字面量类型，此时可以使用${}和#{}以任意的名称（最好见名识意）获取参数的值，注意${}需要手动加单引号</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--User getUserByUsername(String username);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserByUsername<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_user where username = #{username}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--User getUserByUsername(String username);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserByUsername<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select * from t_user where username = '${username}'  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="多个字面量类型的参数"><a href="#多个字面量类型的参数" class="headerlink" title="多个字面量类型的参数"></a>多个字面量类型的参数</h2><ul><li><p>若mapper接口中的方法参数为多个时，此时MyBatis会自动将这些参数放在一个map集合中</p><ol><li>以arg0,arg1…为键，以参数为值；</li><li>以param1,param2…为键，以参数为值；</li></ol></li><li><p>因此只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号。</p></li><li><p>使用arg或者param都行，要注意的是，arg是从arg0开始的，param是从param1开始的</p></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--User checkLogin(String username,String password);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkLogin<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select * from t_user where username = #{arg0} and password = #{arg1}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--User checkLogin(String username,String password);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkLogin<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_user where username = '${param1}' and password = '${param2}'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="map集合类型的参数"><a href="#map集合类型的参数" class="headerlink" title="map集合类型的参数"></a>map集合类型的参数</h2><ul><li>若mapper接口中的方法需要的参数为多个时，此时可以手动创建map集合，将这些数据放在map中只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--User checkLoginByMap(Map&lt;String,Object> map);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkLoginByMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_user where username = #{username} and password = #{password}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkLoginByMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> SqlSessionUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ParameterMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>ParameterMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"usermane"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">checkLoginByMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="实体类类型的参数"><a href="#实体类类型的参数" class="headerlink" title="实体类类型的参数"></a>实体类类型的参数</h2><ul><li>若mapper接口中的方法参数为实体类对象时此时可以使用${}和#{}，通过访问实体类对象中的属性名获取属性值，注意${}需要手动加单引号</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--int insertUser(User user);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    insert into t_user values(null,#{username},#{password},#{age},#{sex},#{email})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> SqlSessionUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ParameterMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>ParameterMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">,</span><span class="token string">"123@321.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mapper<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="使用-Param标识参数"><a href="#使用-Param标识参数" class="headerlink" title="使用@Param标识参数"></a>使用@Param标识参数</h2><ul><li><p>可以通过@Param注解标识mapper接口中的方法参数，此时，会将这些参数放在map集合中 </p><ol><li>以@Param注解的value属性值为键，以参数为值；</li><li>以param1,param2…为键，以参数为值；</li></ol></li><li><p>只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</p></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--User CheckLoginByParam(@Param("username") String username, @Param("password") String password);--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CheckLoginByParam<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from t_user where username = #{username} and password = #{password}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkLoginByParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> SqlSessionUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ParameterMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>ParameterMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mapper<span class="token punctuation">.</span><span class="token function">CheckLoginByParam</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>建议分成两种情况进行处理</p><ol><li>实体类类型的参数</li><li>使用@Param标识参数</li></ol></li></ul><h1 id="MyBatis的各种查询功能"><a href="#MyBatis的各种查询功能" class="headerlink" title="MyBatis的各种查询功能"></a>MyBatis的各种查询功能</h1><ol><li>如果查询出的数据只有一条，可以通过<ol><li>实体类对象接收</li><li>List集合接收</li><li>Map集合接收，结果<code>{password=123456, sex=男, id=1, age=23, username=admin}</code></li></ol></li><li>如果查询出的数据有多条，一定不能用实体类对象接收，会抛异常TooManyResultsException，可以通过<ol><li>实体类类型的LIst集合接收</li><li>Map类型的LIst集合接收</li><li>在mapper接口的方法上添加@MapKey注解</li></ol></li></ol><h2 id="查询一个实体类对象"><a href="#查询一个实体类对象" class="headerlink" title="查询一个实体类对象"></a>查询一个实体类对象</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 根据用户id查询用户信息 * @param id * @return */</span>User <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--User getUserById(@Param("id") int id);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_user where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="查询一个List集合"><a href="#查询一个List集合" class="headerlink" title="查询一个List集合"></a>查询一个List集合</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 查询所有用户信息 * @return */</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--List&lt;User> getUserList();--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="查询单个数据"><a href="#查询单个数据" class="headerlink" title="查询单个数据"></a>查询单个数据</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**   * 查询用户的总记录数   * @return   * 在MyBatis中，对于Java中常用的类型都设置了类型别名   * 例如：java.lang.Integer-->int|integer   * 例如：int-->_int|_integer   * 例如：Map-->map,List-->list   */</span>  <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--int getCount();--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getCount<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_integer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select count(id) from t_user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="查询一条数据为map集合"><a href="#查询一条数据为map集合" class="headerlink" title="查询一条数据为map集合"></a>查询一条数据为map集合</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**   * 根据用户id查询用户信息为map集合   * @param id   * @return   */</span>  Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getUserToMap</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--Map&lt;String, Object> getUserToMap(@Param("id") int id);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserToMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_user where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--结果：{password=123456, sex=男, id=1, age=23, username=admin}--></span></code></pre><h2 id="查询多条数据为map集合"><a href="#查询多条数据为map集合" class="headerlink" title="查询多条数据为map集合"></a>查询多条数据为map集合</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**   * 查询所有用户信息为map集合   * @return   * 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，此时可以将这些map放在一个list集合中获取   */</span>  List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> <span class="token function">getAllUserToMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--Map&lt;String, Object> getAllUserToMap();--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getAllUserToMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select * from t_user  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    结果：    [{password=123456, sex=男, id=1, age=23, username=admin},    {password=123456, sex=男, id=2, age=23, username=张三},    {password=123456, sex=男, id=3, age=23, username=张三}]--></span></code></pre><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 查询所有用户信息为map集合 * @return * 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，并且最终要以一个map的方式返回数据，此时需要通过@MapKey注解设置map集合的键，值是每条数据所对应的map集合 */</span><span class="token annotation punctuation">@MapKey</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getAllUserToMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--Map&lt;String, Object> getAllUserToMap();--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getAllUserToMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    结果：    {    1={password=123456, sex=男, id=1, age=23, username=admin},    2={password=123456, sex=男, id=2, age=23, username=张三},    3={password=123456, sex=男, id=3, age=23, username=张三}    }--></span></code></pre><h1 id="特殊SQL的执行"><a href="#特殊SQL的执行" class="headerlink" title="特殊SQL的执行"></a>特殊SQL的执行</h1><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 根据用户名进行模糊查询 * @param username  * @return java.util.List&lt;com.atguigu.mybatis.pojo.User> * @date 2022/2/26 21:56 */</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserByLike</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String username<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--List&lt;User> getUserByLike(@Param("username") String username);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserByLike<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--select * from t_user where username like '%${mohu}%'--></span>      <span class="token comment" spellcheck="true">&lt;!--select * from t_user where username like concat('%',#{mohu},'%')--></span>      select * from t_user where username like "%"#{mohu}"%"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><ul><li>其中<code>select * from t_user where username like "%"#{mohu}"%"</code>是最常用的</li></ul><h2 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h2><ul><li>只能使用${}，如果使用#{}，则解析后的sql语句为<code>delete from t_user where id in ('1,2,3')</code>，这样是将<code>1,2,3</code>看做是一个整体，只有id为<code>1,2,3</code>的数据会被删除。正确的语句应该是<code>delete from t_user where id in (1,2,3)</code>，或者<code>delete from t_user where id in ('1','2','3')</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 根据id批量删除 * @param ids  * @return int * @date 2022/2/26 22:06 */</span><span class="token keyword">int</span> <span class="token function">deleteMore</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"ids"</span><span class="token punctuation">)</span> String ids<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteMore<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    delete from t_user where id in (${ids})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试类</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteMore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> SqlSessionUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SQLMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>SQLMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">deleteMore</span><span class="token punctuation">(</span><span class="token string">"1,2,3,8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="动态设置表名"><a href="#动态设置表名" class="headerlink" title="动态设置表名"></a>动态设置表名</h2><ul><li>只能使用${}，因为表名不能加单引号</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 查询指定表中的数据 * @param tableName  * @return java.util.List&lt;com.atguigu.mybatis.pojo.User> * @date 2022/2/27 14:41 */</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserByTable</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"tableName"</span><span class="token punctuation">)</span> String tableName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--List&lt;User> getUserByTable(@Param("tableName") String tableName);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserByTable<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from ${tableName}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="添加功能获取自增的主键"><a href="#添加功能获取自增的主键" class="headerlink" title="添加功能获取自增的主键"></a>添加功能获取自增的主键</h2><ul><li><p>使用场景</p></li><li><p>t_clazz(clazz_id,clazz_name)  </p><ul><li>t_student(student_id,student_name,clazz_id)</li></ul><ol><li>添加班级信息  </li><li>获取新添加的班级的id  </li><li>为班级分配学生，即将某学的班级id修改为新添加的班级的id</li></ol></li><li><p>在mapper.xml中设置两个属性</p></li><li><p>useGeneratedKeys：设置使用自增的主键  </p><ul><li>keyProperty：因为增删改有统一的返回值是受影响的行数，因此只能将获取的自增的主键放在传输的参数user对象的某个属性中</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 添加用户信息 * @param user  * @date 2022/2/27 15:04 */</span><span class="token keyword">void</span> <span class="token function">insertUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--void insertUser(User user);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertUser<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    insert into t_user values (null,#{username},#{password},#{age},#{sex},#{email})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试类</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> SqlSessionUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SQLMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>SQLMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"ton"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"123@321.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mapper<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出：user{id=10, username='ton', password='123', age=23, sex='男', email='123@321.com'}，自增主键存放到了user的id属性中</span><span class="token punctuation">}</span></code></pre><h1 id="自定义映射resultMap"><a href="#自定义映射resultMap" class="headerlink" title="自定义映射resultMap"></a>自定义映射resultMap</h1><h2 id="resultMap处理字段和属性的映射关系"><a href="#resultMap处理字段和属性的映射关系" class="headerlink" title="resultMap处理字段和属性的映射关系"></a>resultMap处理字段和属性的映射关系</h2><ul><li>resultMap：设置自定义映射  </li><li>属性：  <ul><li>id：表示自定义映射的唯一标识，不能重复</li><li>type：查询的数据要映射的实体类的类型  </li><li>子标签：  </li><li>id：设置主键的映射关系  <ul><li>result：设置普通字段的映射关系  </li><li>子标签属性：  </li><li>property：设置映射关系中实体类中的属性名  <ul><li>column：设置映射关系中表中的字段名</li></ul></li></ul></li></ul></li><li>若字段名和实体类中的属性名不一致，则可以通过resultMap设置自定义映射，即使字段名和属性名一致的属性也要映射，也就是全部属性都要列出来</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--List&lt;Emp> getAllEmp();--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getAllEmp<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_emp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><ul><li><p>若字段名和实体类中的属性名不一致，但是字段名符合数据库的规则（使用_），实体类中的属性名符合Java的规则（使用驼峰）。此时也可通过以下两种方式处理字段名和实体类中的属性的映射关系  </p><ol><li>可以通过为字段起别名的方式，保证和实体类中的属性名保持一致  <pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--List&lt;Emp> getAllEmp();--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getAllEmp<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select eid,emp_name empName,age,sex,email from t_emp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li><li>可以在MyBatis的核心配置文件中的<code>setting</code>标签中，设置一个全局配置信息mapUnderscoreToCamelCase，可以在查询表中数据时，自动将_类型的字段名转换为驼峰，例如：字段名user_name，设置了mapUnderscoreToCamelCase，此时字段名就会转换为userName。<a href="#%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3">核心配置文件详解</a><pre class=" language-xml"><code class="language-xml"></code></pre></li></ol>  <settings>      <setting name="mapUnderscoreToCamelCase" value="true">  </setting></settings>      ```</li></ul><h2 id="多对一映射处理"><a href="#多对一映射处理" class="headerlink" title="多对一映射处理"></a>多对一映射处理</h2><blockquote><p>查询员工信息以及员工所对应的部门信息</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Emp</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> Integer eid<span class="token punctuation">;</span>      <span class="token keyword">private</span> String empName<span class="token punctuation">;</span>      <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>      <span class="token keyword">private</span> String sex<span class="token punctuation">;</span>      <span class="token keyword">private</span> String email<span class="token punctuation">;</span>      <span class="token keyword">private</span> Dept dept<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...构造器、get、set方法等</span><span class="token punctuation">}</span></code></pre><h3 id="级联方式处理映射关系"><a href="#级联方式处理映射关系" class="headerlink" title="级联方式处理映射关系"></a>级联方式处理映射关系</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empAndDeptResultMapOne<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept.did<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept.deptName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--Emp getEmpAndDept(@Param("eid")Integer eid);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpAndDept<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empAndDeptResultMapOne<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #{eid}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="使用association处理映射关系"><a href="#使用association处理映射关系" class="headerlink" title="使用association处理映射关系"></a>使用association处理映射关系</h3><ul><li>association：处理多对一的映射关系</li><li>property：需要处理多对的映射关系的属性名</li><li>javaType：该属性的类型</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empAndDeptResultMapTwo<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--Emp getEmpAndDept(@Param("eid")Integer eid);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpAndDept<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empAndDeptResultMapTwo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #{eid}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="分步查询"><a href="#分步查询" class="headerlink" title="分步查询"></a>分步查询</h3><h4 id="1-查询员工信息"><a href="#1-查询员工信息" class="headerlink" title="1. 查询员工信息"></a>1. 查询员工信息</h4><ul><li>select：设置分布查询的sql的唯一标识（namespace.SQLId或mapper接口的全类名.方法名）</li><li>column：设置分步查询的条件</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//EmpMapper里的方法</span><span class="token comment" spellcheck="true">/** * 通过分步查询，员工及所对应的部门信息 * 分步查询第一步：查询员工信息 * @param   * @return com.atguigu.mybatis.pojo.Emp * @date 2022/2/27 20:17 */</span>Emp <span class="token function">getEmpAndDeptByStepOne</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"eid"</span><span class="token punctuation">)</span> Integer eid<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empAndDeptByStepResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span>                 <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo<span class="token punctuation">"</span></span>                 <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--Emp getEmpAndDeptByStepOne(@Param("eid") Integer eid);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpAndDeptByStepOne<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empAndDeptByStepResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_emp where eid = #{eid}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h4 id="2-查询部门信息"><a href="#2-查询部门信息" class="headerlink" title="2. 查询部门信息"></a>2. 查询部门信息</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//DeptMapper里的方法</span><span class="token comment" spellcheck="true">/** * 通过分步查询，员工及所对应的部门信息 * 分步查询第二步：通过did查询员工对应的部门信息 * @param * @return com.atguigu.mybatis.pojo.Emp * @date 2022/2/27 20:23 */</span>Dept <span class="token function">getEmpAndDeptByStepTwo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"did"</span><span class="token punctuation">)</span> Integer did<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--此处的resultMap仅是处理字段和属性的映射关系--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>EmpAndDeptByStepTwoResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--Dept getEmpAndDeptByStepTwo(@Param("did") Integer did);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpAndDeptByStepTwo<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>EmpAndDeptByStepTwoResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_dept where did = #{did}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="一对多映射处理"><a href="#一对多映射处理" class="headerlink" title="一对多映射处理"></a>一对多映射处理</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dept</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer did<span class="token punctuation">;</span>    <span class="token keyword">private</span> String deptName<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> emps<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...构造器、get、set方法等</span><span class="token punctuation">}</span></code></pre><h3 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h3><ul><li>collection：用来处理一对多的映射关系</li><li>ofType：表示该属性对饮的集合中存储的数据的类型</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DeptAndEmpResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emps<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--Dept getDeptAndEmp(@Param("did") Integer did);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getDeptAndEmp<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DeptAndEmpResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_dept left join t_emp on t_dept.did = t_emp.did where t_dept.did = #{did}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="分步查询-1"><a href="#分步查询-1" class="headerlink" title="分步查询"></a>分步查询</h3><h4 id="1-查询部门信息"><a href="#1-查询部门信息" class="headerlink" title="1. 查询部门信息"></a>1. 查询部门信息</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 通过分步查询，查询部门及对应的所有员工信息 * 分步查询第一步：查询部门信息 * @param did  * @return com.atguigu.mybatis.pojo.Dept * @date 2022/2/27 22:04 */</span>Dept <span class="token function">getDeptAndEmpByStepOne</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"did"</span><span class="token punctuation">)</span> Integer did<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DeptAndEmpByStepOneResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emps<span class="token punctuation">"</span></span>                <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.mapper.EmpMapper.getDeptAndEmpByStepTwo<span class="token punctuation">"</span></span>                <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--Dept getDeptAndEmpByStepOne(@Param("did") Integer did);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getDeptAndEmpByStepOne<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DeptAndEmpByStepOneResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_dept where did = #{did}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h4 id="2-根据部门id查询部门中的所有员工"><a href="#2-根据部门id查询部门中的所有员工" class="headerlink" title="2. 根据部门id查询部门中的所有员工"></a>2. 根据部门id查询部门中的所有员工</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 通过分步查询，查询部门及对应的所有员工信息 * 分步查询第二步：根据部门id查询部门中的所有员工 * @param did * @return java.util.List&lt;com.atguigu.mybatis.pojo.Emp> * @date 2022/2/27 22:10 */</span>List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> <span class="token function">getDeptAndEmpByStepTwo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"did"</span><span class="token punctuation">)</span> Integer did<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--List&lt;Emp> getDeptAndEmpByStepTwo(@Param("did") Integer did);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getDeptAndEmpByStepTwo<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_emp where did = #{did}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h2><ul><li>分步查询的优点：可以实现延迟加载，但是必须在核心配置文件中设置全局配置信息：</li><li>lazyLoadingEnabled：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载  <ul><li>aggressiveLazyLoading：当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个属性会按需加载</li></ul></li><li>此时就可以实现按需加载，获取的数据是什么，就只会执行相应的sql。此时可通过association和collection中的fetchType属性设置当前的分步查询是否使用延迟加载，fetchType=”lazy(延迟加载)|eager(立即加载)”</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--开启延迟加载--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getEmpAndDeptByStepOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> SqlSessionUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    EmpMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>EmpMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Emp emp <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getEmpAndDeptByStepOne</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">.</span><span class="token function">getEmpName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>关闭延迟加载，两条SQL语句都运行了<img src="https://oss.luhuhu.cn/202402080923170.png"></li><li>开启延迟加载，只运行获取emp的SQL语句<br><img src="https://oss.luhuhu.cn/202402080923009.png"></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getEmpAndDeptByStepOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> SqlSessionUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    EmpMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>EmpMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Emp emp <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getEmpAndDeptByStepOne</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">.</span><span class="token function">getEmpName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">.</span><span class="token function">getDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><p>开启后，需要用到查询dept的时候才会调用相应的SQL语句<img src="https://oss.luhuhu.cn/202402080925729.png"></p></li><li><p>fetchType：当开启了全局的延迟加载之后，可以通过该属性手动控制延迟加载的效果，fetchType=”lazy(延迟加载)|eager(立即加载)”</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empAndDeptByStepResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span>                 <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo<span class="token punctuation">"</span></span>                 <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span>                 <span class="token attr-name">fetchType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre></li></ul><h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h1><ul><li>Mybatis框架的动态SQL技术是一种根据特定条件动态拼装SQL语句的功能，它存在的意义是为了解决拼接SQL语句字符串时的痛点问题</li></ul><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><ul><li>if标签可通过test属性（即传递过来的数据）的表达式进行判断，若表达式的结果为true，则标签中的内容会执行；反之标签中的内容不会执行</li><li>在where后面添加一个恒成立条件<code>1=1</code></li><li>这个恒成立条件并不会影响查询的结果<ul><li>这个<code>1=1</code>可以用来拼接<code>and</code>语句，例如：当empName为null时</li><li>如果不加上恒成立条件，则SQL语句为<code>select * from t_emp where and age = ? and sex = ? and email = ?</code>，此时<code>where</code>会与<code>and</code>连用，SQL语句会报错<ul><li>如果加上一个恒成立条件，则SQL语句为<code>select * from t_emp where 1= 1 and age = ? and sex = ? and email = ?</code>，此时不报错</li></ul></li></ul></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--List&lt;Emp> getEmpByCondition(Emp emp);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpByCondition<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_emp where 1=1    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName !<span class="token punctuation">=</span> null and empName !<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and emp_name = #{empName}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age !<span class="token punctuation">=</span> null and age !<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and age = #{age}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex !<span class="token punctuation">=</span> null and sex !<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and sex = #{sex}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email !<span class="token punctuation">=</span> null and email !<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and email = #{email}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><ul><li>where和if一般结合使用：</li><li>若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字  <ul><li>若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的and/or去掉</li></ul></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--List&lt;Emp> getEmpByCondition(Emp emp);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpByCondition<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_emp    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName !<span class="token punctuation">=</span> null and empName !<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            emp_name = #{empName}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age !<span class="token punctuation">=</span> null and age !<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and age = #{age}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex !<span class="token punctuation">=</span> null and sex !<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and sex = #{sex}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email !<span class="token punctuation">=</span> null and email !<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and email = #{email}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><ul><li><p>注意：where标签不能去掉条件后多余的and/or</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--这种用法是错误的，只能去掉条件前面的and/or，条件后面的不行--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName !<span class="token punctuation">=</span> null and empName !<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>emp_name = #{empName} and<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age !<span class="token punctuation">=</span> null and age !<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    age = #{age}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2><ul><li>trim用于去掉或添加标签中的内容  </li><li>常用属性</li><li>prefix：在trim标签中的内容的前面添加某些内容  <ul><li>suffix：在trim标签中的内容的后面添加某些内容 </li><li>prefixOverrides：在trim标签中的内容的前面去掉某些内容  </li><li>suffixOverrides：在trim标签中的内容的后面去掉某些内容</li></ul></li><li>若trim中的标签都不满足条件，则trim标签没有任何效果，也就是只剩下<code>select * from t_emp</code></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--List&lt;Emp> getEmpByCondition(Emp emp);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpByCondition<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_emp    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>where<span class="token punctuation">"</span></span> <span class="token attr-name">suffixOverrides</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>and|or<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName !<span class="token punctuation">=</span> null and empName !<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            emp_name = #{empName} and        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age !<span class="token punctuation">=</span> null and age !<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            age = #{age} and        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex !<span class="token punctuation">=</span> null and sex !<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            sex = #{sex} or        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email !<span class="token punctuation">=</span> null and email !<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            email = #{email}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试类</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getEmpByCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> SqlSessionUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DynamicSQLMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>DynamicSQLMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> emps<span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getEmpByCondition</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://oss.luhuhu.cn/202402080923435.png"></p><h2 id="choose、when、otherwise"><a href="#choose、when、otherwise" class="headerlink" title="choose、when、otherwise"></a>choose、when、otherwise</h2><ul><li><code>choose、when、otherwise</code>相当于<code>if...else if..else</code></li><li>when至少要有一个，otherwise至多只有一个</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpByChoose<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from t_emp    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empName !<span class="token punctuation">=</span> null and empName !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                emp_name = #{empName}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age !<span class="token punctuation">=</span> null and age !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                age = #{age}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex !<span class="token punctuation">=</span> null and sex !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                sex = #{sex}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email !<span class="token punctuation">=</span> null and email !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                email = #{email}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>                did = 1            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getEmpByChoose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> SqlSessionUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DynamicSQLMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>DynamicSQLMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> emps <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getEmpByChoose</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"123@qq.com"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="C:/Users/loaderland/Desktop/Learn/MyBatis/Resources/choose测试结果.png"></p><ul><li>相当于<code>if a else if b else if c else d</code>，只会执行其中一个</li></ul><h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><ul><li><p>属性：  </p></li><li><p>collection：设置要循环的数组或集合  </p><ul><li>item：表示集合或数组中的每一个数据  </li><li>separator：设置循环体之间的分隔符，分隔符前后默认有一个空格，如<code>,</code></li><li>open：设置foreach标签中的内容的开始符  </li><li>close：设置foreach标签中的内容的结束符</li></ul></li><li><p>批量删除</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--int deleteMoreByArray(Integer[] eids);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteMoreByArray<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    delete from t_emp where eid in    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eids<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        #{eid}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteMoreByArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> SqlSessionUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DynamicSQLMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>DynamicSQLMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">deleteMoreByArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>  <img src="/Resources/foreach%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C1.png"></p></li><li><p>批量添加</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--int insertMoreByList(@Param("emps") List&lt;Emp> emps);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertMoreByList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    insert into t_emp values    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emps<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        (null,#{emp.empName},#{emp.age},#{emp.sex},#{emp.email},null)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertMoreByList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> SqlSessionUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DynamicSQLMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>DynamicSQLMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Emp emp1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">,</span><span class="token string">"123@321.com"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    Emp emp2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">,</span><span class="token string">"123@321.com"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    Emp emp3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">,</span><span class="token string">"123@321.com"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> emps <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>emp1<span class="token punctuation">,</span> emp2<span class="token punctuation">,</span> emp3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">insertMoreByList</span><span class="token punctuation">(</span>emps<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>  <img src="/Resources/foreach%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C2.png"></p></li></ul><h2 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h2><ul><li>sql片段，可以记录一段公共sql片段，在使用的地方通过include标签进行引入</li><li>声明sql片段：<code>&lt;sql&gt;</code>标签</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empColumns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>eid,emp_name,age,sex,email<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span></code></pre><ul><li>引用sql片段：<code>&lt;include&gt;</code>标签</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--List&lt;Emp> getEmpByCondition(Emp emp);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpByCondition<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empColumns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span> from t_emp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h1 id="MyBatis的缓存"><a href="#MyBatis的缓存" class="headerlink" title="MyBatis的缓存"></a>MyBatis的缓存</h1><h2 id="MyBatis的一级缓存"><a href="#MyBatis的一级缓存" class="headerlink" title="MyBatis的一级缓存"></a>MyBatis的一级缓存</h2><ul><li><p>一级缓存是SqlSession级别的，通过同一个SqlSession查询的数据会被缓存，下次查询相同的数据，就会从缓存中直接获取，不会从数据库重新访问  </p></li><li><p>使一级缓存失效的四种情况：  </p><ol><li>不同的SqlSession对应不同的一级缓存  </li><li>同一个SqlSession但是查询条件不同</li><li>同一个SqlSession两次查询期间执行了任何一次增删改操作</li><li>同一个SqlSession两次查询期间手动清空了缓存</li></ol></li></ul><h2 id="MyBatis的二级缓存"><a href="#MyBatis的二级缓存" class="headerlink" title="MyBatis的二级缓存"></a>MyBatis的二级缓存</h2><ul><li><p>二级缓存是SqlSessionFactory级别，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取  </p></li><li><p>二级缓存开启的条件</p><ol><li>在核心配置文件中，设置全局配置属性cacheEnabled=”true”，默认为true，不需要设置</li><li>在映射文件中设置标签<cache></cache></li><li>二级缓存必须在SqlSession关闭或提交之后有效</li><li>查询的数据所转换的实体类类型必须实现序列化的接口</li></ol></li><li><p>使二级缓存失效的情况：两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</p></li></ul><h2 id="二级缓存的相关配置"><a href="#二级缓存的相关配置" class="headerlink" title="二级缓存的相关配置"></a>二级缓存的相关配置</h2><ul><li>在mapper配置文件中添加的cache标签可以设置一些属性</li><li>eviction属性：缓存回收策略  </li><li>LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。  <ul><li>FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。  </li><li>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。  </li><li>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</li><li>默认的是 LRU</li></ul></li><li>flushInterval属性：刷新间隔，单位毫秒</li><li>默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句（增删改）时刷新</li><li>size属性：引用数目，正整数</li><li>代表缓存最多可以存储多少个对象，太大容易导致内存溢出</li><li>readOnly属性：只读，true/false</li><li>true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。  <ul><li>false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是false</li></ul></li></ul><h2 id="MyBatis缓存查询的顺序"><a href="#MyBatis缓存查询的顺序" class="headerlink" title="MyBatis缓存查询的顺序"></a>MyBatis缓存查询的顺序</h2><ul><li>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用  </li><li>如果二级缓存没有命中，再查询一级缓存  </li><li>如果一级缓存也没有命中，则查询数据库  </li><li>SqlSession关闭之后，一级缓存中的数据会写入二级缓存</li></ul><h2 id="整合第三方缓存EHCache（了解）"><a href="#整合第三方缓存EHCache（了解）" class="headerlink" title="整合第三方缓存EHCache（了解）"></a>整合第三方缓存EHCache（了解）</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- Mybatis EHCache整合包 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.caches<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- slf4j日志门面的一个具体实现 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="各个jar包的功能"><a href="#各个jar包的功能" class="headerlink" title="各个jar包的功能"></a>各个jar包的功能</h3><table><thead><tr><th>jar包名称</th><th>作用</th></tr></thead><tbody><tr><td>mybatis-ehcache</td><td>Mybatis和EHCache的整合包</td></tr><tr><td>ehcache</td><td>EHCache核心包</td></tr><tr><td>slf4j-api</td><td>SLF4J日志门面包</td></tr><tr><td>logback-classic</td><td>支持SLF4J门面接口的一个具体实现</td></tr></tbody></table><h3 id="创建EHCache的配置文件ehcache-xml"><a href="#创建EHCache的配置文件ehcache-xml" class="headerlink" title="创建EHCache的配置文件ehcache.xml"></a>创建EHCache的配置文件ehcache.xml</h3><ul><li>名字必须叫<code>ehcache.xml</code></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ehcache</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>noNamespaceSchemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../config/ehcache.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 磁盘保存路径 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>diskStore</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>D:\atguigu\ehcache<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defaultCache</span>            <span class="token attr-name">maxElementsInMemory</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span>            <span class="token attr-name">maxElementsOnDisk</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10000000<span class="token punctuation">"</span></span>            <span class="token attr-name">eternal</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>            <span class="token attr-name">overflowToDisk</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>            <span class="token attr-name">timeToIdleSeconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span>            <span class="token attr-name">timeToLiveSeconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span>            <span class="token attr-name">diskExpiryThreadIntervalSeconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span>            <span class="token attr-name">memoryStoreEvictionPolicy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LRU<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>defaultCache</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ehcache</span><span class="token punctuation">></span></span></code></pre><h3 id="设置二级缓存的类型"><a href="#设置二级缓存的类型" class="headerlink" title="设置二级缓存的类型"></a>设置二级缓存的类型</h3><ul><li>在xxxMapper.xml文件中设置二级缓存类型</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.caches.ehcache.EhcacheCache<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h3 id="加入logback日志"><a href="#加入logback日志" class="headerlink" title="加入logback日志"></a>加入logback日志</h3><ul><li>存在SLF4J时，作为简易日志的log4j将失效，此时我们需要借助SLF4J的具体实现logback来打印日志。创建logback的配置文件<code>logback.xml</code>，名字固定，不可改变</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">debug</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 指定日志输出的位置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span>              <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 日志输出的格式 --></span>            <span class="token comment" spellcheck="true">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>[%d{HH:mm:ss.SSS}] [%-5level] [%thread] [%logger] [%msg]%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --></span>    <span class="token comment" spellcheck="true">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 根据特殊需求指定局部日志级别 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.crowd.mapper<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h3 id="EHCache配置文件说明"><a href="#EHCache配置文件说明" class="headerlink" title="EHCache配置文件说明"></a>EHCache配置文件说明</h3><table><thead><tr><th>属性名</th><th>是否必须</th><th>作用</th></tr></thead><tbody><tr><td>maxElementsInMemory</td><td>是</td><td>在内存中缓存的element的最大数目</td></tr><tr><td>maxElementsOnDisk</td><td>是</td><td>在磁盘上缓存的element的最大数目，若是0表示无穷大</td></tr><tr><td>eternal</td><td>是</td><td>设定缓存的elements是否永远不过期。 如果为true，则缓存的数据始终有效， 如果为false那么还要根据timeToIdleSeconds、timeToLiveSeconds判断</td></tr><tr><td>overflowToDisk</td><td>是</td><td>设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上</td></tr><tr><td>timeToIdleSeconds</td><td>否</td><td>当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时， 这些数据便会删除，默认值是0,也就是可闲置时间无穷大</td></tr><tr><td>timeToLiveSeconds</td><td>否</td><td>缓存element的有效生命期，默认是0.,也就是element存活时间无穷大</td></tr><tr><td>diskSpoolBufferSizeMB</td><td>否</td><td>DiskStore(磁盘缓存)的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区</td></tr><tr><td>diskPersistent</td><td>否</td><td>在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false</td></tr><tr><td>diskExpiryThreadIntervalSeconds</td><td>否</td><td>磁盘缓存的清理线程运行间隔，默认是120秒。每个120s， 相应的线程会进行一次EhCache中数据的清理工作</td></tr><tr><td>memoryStoreEvictionPolicy</td><td>否</td><td>当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。 默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出</td></tr></tbody></table><h1 id="MyBatis的逆向工程"><a href="#MyBatis的逆向工程" class="headerlink" title="MyBatis的逆向工程"></a>MyBatis的逆向工程</h1><ul><li>正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表。Hibernate是支持正向工程的</li><li>逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源：  </li><li>Java实体类  <ul><li>Mapper接口  </li><li>Mapper映射文件</li></ul></li></ul><h2 id="创建逆向工程的步骤"><a href="#创建逆向工程的步骤" class="headerlink" title="创建逆向工程的步骤"></a>创建逆向工程的步骤</h2><h3 id="添加依赖和插件"><a href="#添加依赖和插件" class="headerlink" title="添加依赖和插件"></a>添加依赖和插件</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- MyBatis核心依赖包 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- junit测试 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- MySQL驱动 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.27<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- log4j日志 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 控制Maven在构建过程中相关配置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 构建过程中用到的插件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-generator-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 插件的依赖 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 逆向工程的核心依赖 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-generator-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 数据库连接池 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.mchange<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- MySQL驱动 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.27<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><h3 id="创建MyBatis的核心配置文件-1"><a href="#创建MyBatis的核心配置文件-1" class="headerlink" title="创建MyBatis的核心配置文件"></a>创建MyBatis的核心配置文件</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h3 id="创建逆向工程的配置文件"><a href="#创建逆向工程的配置文件" class="headerlink" title="创建逆向工程的配置文件"></a>创建逆向工程的配置文件</h3><ul><li>文件名必须是：<code>generatorConfig.xml</code></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE generatorConfiguration        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatorConfiguration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    targetRuntime: 执行生成的逆向工程的版本    MyBatis3Simple: 生成基本的CRUD（清新简洁版）    MyBatis3: 生成带条件的CRUD（奢华尊享版）    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DB2Tables<span class="token punctuation">"</span></span> <span class="token attr-name">targetRuntime</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyBatis3Simple<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 数据库的连接信息 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcConnection</span> <span class="token attr-name">driverClass</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span>                        <span class="token attr-name">connectionURL</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis<span class="token punctuation">"</span></span>                        <span class="token attr-name">userId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span>                        <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbcConnection</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- javaBean的生成策略--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaModelGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.pojo<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.\src\main\java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>trimStrings<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaModelGenerator</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- SQL映射文件的生成策略 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlMapGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.mapper<span class="token punctuation">"</span></span>                         <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.\src\main\resources<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sqlMapGenerator</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Mapper接口的生成策略 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaClientGenerator</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>XMLMAPPER<span class="token punctuation">"</span></span>                             <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.mapper<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.\src\main\java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaClientGenerator</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 逆向分析的表 --></span>        <span class="token comment" spellcheck="true">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --></span>        <span class="token comment" spellcheck="true">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>t_emp<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>t_dept<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generatorConfiguration</span><span class="token punctuation">></span></span></code></pre><h3 id="执行MBG插件的generate目标"><a href="#执行MBG插件的generate目标" class="headerlink" title="执行MBG插件的generate目标"></a>执行MBG插件的generate目标</h3><ul><li><img src="https://oss.luhuhu.cn/202402080925929.png"></li><li>如果出现报错：<code>Exception getting JDBC Driver</code>，可能是pom.xml中，数据库驱动配置错误</li><li>dependency中的驱动<img src="https://oss.luhuhu.cn/202402080925724.png"><ul><li>mybatis-generator-maven-plugin插件中的驱动<img src="https://oss.luhuhu.cn/202402080925417.png"></li><li>两者的驱动版本应该相同</li></ul></li><li>执行结果<img src="https://oss.luhuhu.cn/202402080926178.png"></li></ul><h2 id="QBC"><a href="#QBC" class="headerlink" title="QBC"></a>QBC</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul><li><code>selectByExample</code>：按条件查询，需要传入一个example对象或者null；如果传入一个null，则表示没有条件，也就是查询所有数据</li><li><code>example.createCriteria().xxx</code>：创建条件对象，通过andXXX方法为SQL添加查询添加，每个条件之间是and关系</li><li><code>example.or().xxx</code>：将之前添加的条件通过or拼接其他条件<br><img src="https://oss.luhuhu.cn/202402080926003.png"></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMBG</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    InputStream is <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SqlSessionFactoryBuilder sqlSessionFactoryBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> sqlSessionFactoryBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>    SqlSession sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    EmpMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>EmpMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    EmpExample example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmpExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//名字为张三，且年龄大于等于20</span>    example<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andEmpNameEqualTo</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andAgeGreaterThanOrEqualTo</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//或者did不为空</span>    example<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andDidIsNotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> emps <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>    emps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://oss.luhuhu.cn/202402080926449.png"></p><h3 id="增改"><a href="#增改" class="headerlink" title="增改"></a>增改</h3><ul><li><code>updateByPrimaryKey</code>：通过主键进行数据修改，如果某一个值为null，也会将对应的字段改为null</li><li><code>mapper.updateByPrimaryKey(new Emp(1,"admin",22,null,"456@qq.com",3));</code><ul><li><img src="https://oss.luhuhu.cn/202402080926102.png"></li></ul></li><li><code>updateByPrimaryKeySelective()</code>：通过主键进行选择性数据修改，如果某个值为null，则不修改这个字段</li><li><code>mapper.updateByPrimaryKeySelective(new Emp(2,"admin2",22,null,"456@qq.com",3));</code><ul><li><img src="https://oss.luhuhu.cn/202402080926757.png"></li></ul></li></ul><h1 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h1><h2 id="分页插件使用步骤"><a href="#分页插件使用步骤" class="headerlink" title="分页插件使用步骤"></a>分页插件使用步骤</h2><h3 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="配置分页插件"><a href="#配置分页插件" class="headerlink" title="配置分页插件"></a>配置分页插件</h3><ul><li>在MyBatis的核心配置文件（mybatis-config.xml）中配置插件</li><li><img src="C:/Users/loaderland/Desktop/Learn/MyBatis/Resources/配置分页插件.png"></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--设置分页插件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">interceptor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.github.pagehelper.PageInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span></code></pre><h2 id="分页插件的使用"><a href="#分页插件的使用" class="headerlink" title="分页插件的使用"></a>分页插件的使用</h2><h3 id="开启分页功能"><a href="#开启分页功能" class="headerlink" title="开启分页功能"></a>开启分页功能</h3><ul><li>在查询功能之前使用<code>PageHelper.startPage(int pageNum, int pageSize)</code>开启分页功能</li><li>pageNum：当前页的页码  <ul><li>pageSize：每页显示的条数</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPageHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    InputStream is <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SqlSessionFactoryBuilder sqlSessionFactoryBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> sqlSessionFactoryBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>    SqlSession sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    EmpMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>EmpMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//访问第一页，每页四条数据</span>    PageHelper<span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> emps <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    emps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://oss.luhuhu.cn/202402080926300.png"></p><h3 id="分页相关数据"><a href="#分页相关数据" class="headerlink" title="分页相关数据"></a>分页相关数据</h3><h4 id="方法一：直接输出"><a href="#方法一：直接输出" class="headerlink" title="方法一：直接输出"></a>方法一：直接输出</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPageHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    InputStream is <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SqlSessionFactoryBuilder sqlSessionFactoryBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> sqlSessionFactoryBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>    SqlSession sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    EmpMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>EmpMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//访问第一页，每页四条数据</span>    Page<span class="token operator">&lt;</span>Object<span class="token operator">></span> page <span class="token operator">=</span> PageHelper<span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> emps <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在查询到List集合后，打印分页数据</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><p>分页相关数据：</p><pre><code>Page{count=true, pageNum=1, pageSize=4, startRow=0, endRow=4, total=8, pages=2, reasonable=false, pageSizeZero=false}[Emp{eid=1, empName='admin', age=22, sex='男', email='456@qq.com', did=3}, Emp{eid=2, empName='admin2', age=22, sex='男', email='456@qq.com', did=3}, Emp{eid=3, empName='王五', age=12, sex='女', email='123@qq.com', did=3}, Emp{eid=4, empName='赵六', age=32, sex='男', email='123@qq.com', did=1}]</code></pre></li></ul><h4 id="方法二使用PageInfo"><a href="#方法二使用PageInfo" class="headerlink" title="方法二使用PageInfo"></a>方法二使用PageInfo</h4><ul><li>在查询获取list集合之后，使用<code>PageInfo&lt;T&gt; pageInfo = new PageInfo&lt;&gt;(List&lt;T&gt; list, intnavigatePages)</code>获取分页相关数据</li><li>list：分页之后的数据  <ul><li>navigatePages：导航分页的页码数</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPageHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    InputStream is <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SqlSessionFactoryBuilder sqlSessionFactoryBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> sqlSessionFactoryBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>    SqlSession sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    EmpMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>EmpMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PageHelper<span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> emps <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    PageInfo<span class="token operator">&lt;</span>Emp<span class="token operator">></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>emps<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><p>分页相关数据：</p><pre><code>PageInfo{pageNum=1, pageSize=4, size=4, startRow=1, endRow=4, total=8, pages=2, list=Page{count=true, pageNum=1, pageSize=4, startRow=0, endRow=4, total=8, pages=2, reasonable=false, pageSizeZero=false}[Emp{eid=1, empName='admin', age=22, sex='男', email='456@qq.com', did=3}, Emp{eid=2, empName='admin2', age=22, sex='男', email='456@qq.com', did=3}, Emp{eid=3, empName='王五', age=12, sex='女', email='123@qq.com', did=3}, Emp{eid=4, empName='赵六', age=32, sex='男', email='123@qq.com', did=1}], prePage=0, nextPage=2, isFirstPage=true, isLastPage=false, hasPreviousPage=false, hasNextPage=true, navigatePages=5, navigateFirstPage=1, navigateLastPage=2, navigatepageNums=[1, 2]}</code></pre></li><li><p>其中list中的数据等同于方法一中直接输出的page数据</p></li></ul><h4 id="常用数据："><a href="#常用数据：" class="headerlink" title="常用数据："></a>常用数据：</h4><ul><li>pageNum：当前页的页码  </li><li>pageSize：每页显示的条数  </li><li>size：当前页显示的真实条数  </li><li>total：总记录数  </li><li>pages：总页数  </li><li>prePage：上一页的页码  </li><li>nextPage：下一页的页码</li><li>isFirstPage/isLastPage：是否为第一页/最后一页  </li><li>hasPreviousPage/hasNextPage：是否存在上一页/下一页  </li><li>navigatePages：导航分页的页码数  </li><li>navigatepageNums：导航分页的页码，[1,2,3,4,5]</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="CS" scheme="https://loaderland.github.io/categories/CS/"/>
    
    
    <category term="笔记" scheme="https://loaderland.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="MyBatis" scheme="https://loaderland.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>nacos</title>
    <link href="https://loaderland.github.io/2024/02/06/nacos/"/>
    <id>https://loaderland.github.io/2024/02/06/nacos/</id>
    <published>2024-02-06T06:40:32.000Z</published>
    <updated>2024-04-02T07:13:28.596Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h1><p>nacos本质上也是一个springboot 项目</p><h2 id="aliyunECS部署单机nacos"><a href="#aliyunECS部署单机nacos" class="headerlink" title="aliyunECS部署单机nacos"></a>aliyunECS部署单机nacos</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># java环境依赖</span>yum <span class="token function">install</span> -y java-1.8.0-openjdk-devel.x86_64</code></pre><p><a href="https://github.com/alibaba/nacos/releases">下载nacostar.gz</a></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 解压</span><span class="token function">tar</span> -zxvf nacos-server-2.3.0.tar.gz <span class="token comment" spellcheck="true"># 单机模式启动</span>./startup.sh -m standalone </code></pre><p>aliyun安全组<br>8848端口：web访问<br>9848端口：gRPC协议client访问<br>9849端口：服务端gRPC请求服务端端口，用于服务间同步等<br><a href="https://blog.csdn.net/qq_38173650/article/details/120560160">nacos2.x需要多暴露两个端口</a></p><p>SDKCaller测试类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>SDK<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>api<span class="token punctuation">.</span>NacosFactory<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>api<span class="token punctuation">.</span>PropertyKeyConst<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>api<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ConfigService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>api<span class="token punctuation">.</span>config<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>Listener<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>api<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>NacosException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDateTime<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executor<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @projectName: nacos * @package: com.SDKCaller.nacos.SDK * @className: SDKCaller * @author: ludi * @description: TODO * @date: 2024/2/5 15:23 * @version: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SDKCaller</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            String serverAddr = "172.23.74.116:8848";</span>            String serverAddr <span class="token operator">=</span> <span class="token string">"114.55.131.223:8848"</span><span class="token punctuation">;</span>            String dataId <span class="token operator">=</span> <span class="token string">"druidDemoDev"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            String dataId = "test1";</span>            String group <span class="token operator">=</span> <span class="token string">"DEFAULT_GROUP"</span><span class="token punctuation">;</span>            String content <span class="token operator">=</span> <span class="token string">"testContent"</span><span class="token punctuation">;</span>            Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"serverAddr"</span><span class="token punctuation">,</span> serverAddr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            properties.put(PropertyKeyConst.NAMESPACE, "public");</span>            properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>PropertyKeyConst<span class="token punctuation">.</span>NAMESPACE<span class="token punctuation">,</span> <span class="token string">"2ce82298-746d-4566-aef5-88508bb20294"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>PropertyKeyConst<span class="token punctuation">.</span>USERNAME<span class="token punctuation">,</span> <span class="token string">"nacos"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>PropertyKeyConst<span class="token punctuation">.</span>PASSWORD<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ConfigService configService <span class="token operator">=</span> NacosFactory<span class="token punctuation">.</span><span class="token function">createConfigService</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            create(configService, "createTesting", group, "createTesting");</span>            String newContent <span class="token operator">=</span> <span class="token string">"testUpdateTesting"</span> <span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            update(configService, dataId, group, newContent);</span>            <span class="token function">pull</span><span class="token punctuation">(</span>configService<span class="token punctuation">,</span> dataId<span class="token punctuation">,</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            listener(configService, dataId, group);</span><span class="token comment" spellcheck="true">//            ServiceInit.serviceCall();</span><span class="token comment" spellcheck="true">//             阻塞主线程，保持监听状态</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NacosException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建配置     *     * @param configService     * @param dataId     * @param group     * @param content     * @throws NacosException     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span>ConfigService configService<span class="token punctuation">,</span> String dataId<span class="token punctuation">,</span> String group<span class="token punctuation">,</span> String content<span class="token punctuation">)</span> <span class="token keyword">throws</span> NacosException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 发布配置</span>        <span class="token keyword">boolean</span> publishSuccess <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">publishConfig</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>publishSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Config published successfully."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Failed to publish config."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 更新配置     *     * @param configService     * @param dataId     * @param group     * @param newContent     * @throws NacosException     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>ConfigService configService<span class="token punctuation">,</span> String dataId<span class="token punctuation">,</span> String group<span class="token punctuation">,</span> String newContent<span class="token punctuation">)</span> <span class="token keyword">throws</span> NacosException <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> updateSuccess <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">publishConfig</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> newContent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>updateSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Config updated successfully."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Failed to update config."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 拉取配置     *     * @param configService     * @param dataId     * @param group     * @return     * @throws NacosException     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">pull</span><span class="token punctuation">(</span>ConfigService configService<span class="token punctuation">,</span> String dataId<span class="token punctuation">,</span> String group<span class="token punctuation">)</span> <span class="token keyword">throws</span> NacosException <span class="token punctuation">{</span>        String content <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"pull:"</span> <span class="token operator">+</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 监听配置     *     * @param configService     * @param dataId     * @param group     * @throws NacosException     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">listener</span><span class="token punctuation">(</span>ConfigService configService<span class="token punctuation">,</span> String dataId<span class="token punctuation">,</span> String group<span class="token punctuation">)</span> <span class="token keyword">throws</span> NacosException <span class="token punctuation">{</span>        String result<span class="token punctuation">;</span>        configService<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveConfigInfo</span><span class="token punctuation">(</span>String configInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Config changed: "</span> <span class="token operator">+</span> configInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Executor <span class="token function">getExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果有需要，可以返回一个自定义的Executor</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="nacos鉴权开启"><a href="#nacos鉴权开启" class="headerlink" title="nacos鉴权开启"></a>nacos鉴权开启</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /opt/nacos/conf<span class="token function">vi</span> application.properties<span class="token operator">></span> nacos.core.auth.enabled<span class="token operator">=</span>truenacos.core.auth.server.identity.key<span class="token operator">=</span>***nacos.core.auth.server.identity.value<span class="token operator">=</span>***nacos.core.auth.plugin.nacos.token.secret.key<span class="token operator">=</span>***</code></pre><h2 id="Springboot整合nacos"><a href="#Springboot整合nacos" class="headerlink" title="Springboot整合nacos"></a>Springboot整合nacos</h2><p>pom.xml依赖增加，<strong>注意springboot、springcloud和nacos三者之间的版本兼容问题</strong>，如果springboot和springcloud不兼容会出现bean创建失败无法启动<br><a href="https://spring.io/projects/spring-cloud">spring-cloud</a>我这边使用的springboot版本为2.7.2对应cloud为2021.0.x，在2020.0.x版本开始默认不开启bootstrap会导致bootstrap.yml加载不进来，所以这边又在pom中增加了spring-cloud-starter-bootstrap的依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>nacos-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2021.0.5.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2021.0.5.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-bootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>增加注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DruidDemoApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>DruidDemoApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>bootstrap.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> druidDemoDev    <span class="token comment" spellcheck="true">#为服务名</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">username</span><span class="token punctuation">:</span> nacos      <span class="token key atrule">password</span><span class="token punctuation">:</span>       <span class="token key atrule">discovery</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># namespace 只识别命名空间id</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> 2ce82298<span class="token punctuation">-</span>746d<span class="token punctuation">-</span>4566<span class="token punctuation">-</span>aef5<span class="token punctuation">-</span>88508bb20294        <span class="token key atrule">group</span><span class="token punctuation">:</span> DEFAULT_GROUP        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 114.55.131.223<span class="token punctuation">:</span><span class="token number">8848</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yaml <span class="token comment" spellcheck="true">#后缀名，只支持 properties 和 yaml 类型</span>        <span class="token key atrule">prefix</span><span class="token punctuation">:</span> druidDemoDev <span class="token comment" spellcheck="true">#文件名，如果没有配置则默认为 ${spring.appliction.name}</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> 2ce82298<span class="token punctuation">-</span>746d<span class="token punctuation">-</span>4566<span class="token punctuation">-</span>aef5<span class="token punctuation">-</span>88508bb20294        <span class="token key atrule">auto-refresh</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token key atrule">enable-remote-sync-config</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true">#启用远程同步配置,</span>        <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">3000</span>        <span class="token key atrule">group</span><span class="token punctuation">:</span> DEFAULT_GROUP  <span class="token comment" spellcheck="true">#配置组</span>        <span class="token key atrule">refresh-enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 114.55.131.223<span class="token punctuation">:</span><span class="token number">8848</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8090</span></code></pre><p><img src="https://oss.luhuhu.cn/202402081515329.png" alt="image-20240208151516360"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="CS" scheme="https://loaderland.github.io/categories/CS/"/>
    
    
    <category term="nacos" scheme="https://loaderland.github.io/tags/nacos/"/>
    
  </entry>
  
  <entry>
    <title>商君书</title>
    <link href="https://loaderland.github.io/2024/02/02/%E5%95%86%E5%90%9B%E4%B9%A6/"/>
    <id>https://loaderland.github.io/2024/02/02/%E5%95%86%E5%90%9B%E4%B9%A6/</id>
    <published>2024-02-02T02:20:46.000Z</published>
    <updated>2024-04-02T07:13:28.597Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="《商鞅与商君书》讲座——鲍鹏山"><a href="#《商鞅与商君书》讲座——鲍鹏山" class="headerlink" title="《商鞅与商君书》讲座——鲍鹏山"></a><a href="https://www.youtube.com/watch?v=eYHB5iKKzt0">《商鞅与商君书》讲座——鲍鹏山</a></h1><p>​商鞅做了一些什么嘛？我们昨天在讲的过程中应该说，虽然比较简略，但整体上应该都讲到了。但是商鞅说了一些什么，那是说了很多很多。我们今天要讲可能真是有一点挂一漏万。我要说明一下今天我们所看到的《商君书》不一定全部由商鞅本人所作。所以我现在讲的“商鞅所说”的实际上讲的就是《商君书》所说的，就作为这本书，我们整体来研究它、来考察它，就这本书它讲了一些什么？这些东西对我们中国的历史产生了什么样的影响？这本书在中国历史上产生了很坏的影响，非常糟糕的影响。那你说这本书难道没有一点正面的价值吗？那肯定有。我刚才讲了，我今天讲的是挂一漏万的，我们可能只能选一点比较重要的，或者说，我觉得有必要跟大家讲的。所以我今天可能更多的讲《商君书》里面负面的东西，让我们了解一下，在中国的历史上曾经有过一种什么样的理论。这种理论，如果我们不去实际地接触它，你可能想象不到在中国历史上曾经有人这样提倡过，并且，实际上在中国古代的专制的政治里面，在实际的政治生活里面，一再地被运用，也就是说，我们这个民族在几千年的历史里面，实际上广大的人民，在很大的程度上，确实承受着这样黑暗的政治所带来的痛苦。当然我们说，这样的痛苦、这样黑暗的政治，不能由商鞅以及《商君书》这一本书来负责任，但是它确实提供了这样的一种理论。</p><h2 id="壹民理论"><a href="#壹民理论" class="headerlink" title="壹民理论"></a>壹民理论</h2><p>　　关于《商君书》，我想主要讲三个内容。第一个内容，就是他所谓的“<strong>壹民理论</strong>”。壹就是壹贰叁肆伍的壹，在这个地方当动词讲：统一、唯一；民就是人民。什么叫壹民呢？就是在国家里面，只要一种人，除了这种人之外，其他的人必须通过政策，使其走投无路，让他改行，让他变成这种人。如果他不能变成这种人，等待他的就是监狱、就是杀头。这是我们今天要讲的第一个内容。就是壹民理论，简单地讲，就是国家只要一种民，哪一种民呢？就是生产的机器与战争的机器。所以《商君书》啊，法家的思想——商鞅也好，后来的韩非也好——他们是完全站在专制君主的一边，完全站所谓的国家利益的一边。所以，我们看这个标题，国家只要一种民。他站在国家的立场上，国家不是为人民服务的，恰恰相反，人民是为国家服务的。如果你不能做到这一点，那么等待你的就是惩罚，而且是非常严酷的惩罚。</p><p>　　我们今天讲的是《商君书》的内容，所以我们会引用很多《商君书》中的原话来加以说明。</p><p>　　那么关于壹民的理论，我这里有一个简单的概括，所谓壹民的理论，包括两个含义：第一、国家只要一种“民”，就是耕战之民。平时你为国家生产，战时你为国家当炮灰。你的存在的价值就在这两点。如果你不能作为这两种工具存在，你就是无用之民。国家只要一种民，而且还包含着第二个含义，国民只做一件事，就是耕和战。只要一种人，而且这些人只做一件事。实际上讲到这个地方的时候，我们如果稍微有一点逻辑思维和推理的能力，我们就能知道这种理论是多么的残酷，因为我们每个人都有不同的志趣，每个人都有自己不同的追求，每个人都有自己不同的爱好，每个人也都有自己不同的天赋的方向。所以马克思讲共产主义的理论是什么？共产主义的最高理想是什么？那就是每个的人性的自由的全面的发展。那每个人人性是不一样的，他的爱好是不一样的，他的志趣是不一样的，他的追求是不一样的。一个国家如果让所有的人把自己的爱好能够得到充分的发展，自己的天赋得到很好的发展，这样的国家就能够给人民提供幸福了，这样的国家也有他道德的基础了。但是商鞅的这种观点，我们显然在这样的国家里面你看不到。</p><p>　　我们接着往下看，比如说他讲到这样的理论时讲到：“圣人之为国也，壹赏，壹刑，壹教。”（《赏刑》）全是壹。圣人治理国家的时候——注意他这个圣人跟儒家讲的圣人又是不一样的，概念一不样的，法家讲的圣人当然就是法王，就是专制的君主，就是像秦始皇这样的人，他们就称之为圣人——这样的人治理国家的时候，“壹赏，壹刑，壹教”：统一赏罚、统一教化。赏赐是统一的。这个赏赐统一，不是说每次赏的东西是一样的，而是赏的理由是一样的。你为国家生产的粮食多了，就给你赏赐了，你只有为国家生产粮食多了，我才给你赏赐。你说我做一个学者，我有很多的思想，很多的学术成果，有没有赏赐？没有，只有惩罚，你进监狱吧，他不需要这个东西。所以壹赏的含意是什么呢？只赏赐一种行为，只赏赐一种人，你为国家生产粮食，你为国家打仗，杀了敌人的脑袋多，带回来敌人的头颅多，只有这两种情况给你赏赐，这叫作壹赏。</p><p>　　然后统一刑罚，还有统一教化。统一教化，实际上就是愚民政策。实际上我们知道真正的愚民政策，说白了不是不让人民受教育。如果不让人民受教育，人民也不一定听他的。所以真正的愚民教育政策是什么呢？真正的愚民政策是让人民只受一种教育，也就是说只接受他的教育，只接受他的思想，只接受他的观点：你必须听我的。所以壹教也就是这样：用一种思想、一种观点来教导他，其他所有的思想都是邪恶的，都是异端，都应该被清除掉。</p><p>　　他接着讲到了：“入使民壹于农，出使民壹于战……民壹则农，农则朴，朴则安居而恶出。”（《算地》）对内就是种田，对外就是战争。然后他讲到了：“民壹则农”，只会种田的人，就会变得很朴实。这个朴实实际上就是很愚昧啊！他已经没有思想了，也没有眼界了，他没有见识过别的，他只会干这一项，自然就会变得所谓的朴实，这个朴实实际上是愚昧的意思。那么一个愚昧的人，一个无知的人，就会“安居而恶出”，他会很安分地待在自己的家里面，而不愿意出去。</p><p>　　“民之所欲万，而利之所出一。”（《说民》）老百姓有很多很多的欲望，但是国家应该让他所有的欲望都从一个渠道来实现：那就是你种田，你为国家去打仗。你做到这一点，那我们就可以赏赐你；如果你不这样做，就要惩罚你。所以“利出壹空者，其国无敌”。（《靳令》）“利出壹空”，就是利出一门，国家所有的资源都控制起来，把所有的社会资源都控制起来，然后只让它从一种渠道出去，这样国家就具有了绝对的控制社会资源的能力，国家就会变得很强大，就会无敌。我们说，治理国家应该说有两个目标，就今天来说也同样如此：人民富裕安乐是一个重要目标，然后国家强大。但是国家仅仅以一个强大作为它唯一的目标，那末人民生活在这个国家里面就不会有幸福。所以我们看儒家的治国的理想，包括道家的很多想法，他们是希望把国家治理成一个富裕的安乐的国家，是一个人民安居乐业的国家，而他们不愿意谈战争。所以孔子、孟子都是明确地反对战争的，庄子也是明确地反对战争的。我们把这个做个比较，就会发现一个很有趣的现象，法家正好相反：人民在这个国家里面能否幸福他们完全置之度外，这不是国家的目标，国家的目标就是一个：强大能攻。把国家的目标如此的绝对化，实际上就表明，在法家的政治理论里面，人民的幸福不在他们的考虑范围之内。所以我刚才讲到了，法家的理论实际上从骨子里面讲，他就完全为专制君主着想。我讲这个话，一点也没有委屈他们。</p><p>　　那么这样的结果会导致一个什么问题呢？导致整个社会没有个性发展的空间，没有个体的幸福。因为国家只要一种人，当然，所有的人里面可能有人适合于种田，也可能有人喜欢当一个农民，但是很多人可能不喜欢，很多人可能在其他方面很有天赋，他在其他地方很有兴趣，但是你现在的国家只允许这一种人存在，所以在这样的国家里面，没有个性存在的空间，没有个性发展的可能，也没有个体的幸福，不存在个体的幸福。这是第一个问题。第二个问题是整个的社会目标，在一个专制的社会里面，社会的目标，他的合理性，他的正当性，是不能得到保障的。因为整个社会决策的层次，他的决策的机制，不是合理的，不是有序的，不是可控的。他是由一个专制君主根据他自己的喜怒无常的心情来决定的，今天高兴了，他就这样；明天不高兴了，他又那样。所以我们不要以为一个专制的社会里面，政府可以有一个道德上的目标，做不到的！</p><p>　　所以，在专制的社会里面可能会得到一个效果：就是万众一心。但是你要知道万众一心的时候，当我们所有的人都向一个方向想的时候，它就会存在两个问题：第一、个体的思想、个体的精神都没有了；其次，万众一心必须是通过专制才能得到的，它必须通过思想控制才能得到的。然后这样确立的目标是由谁来决定的呢？不可能是一个很合理的决策者，他一定是由专制的阶层，尤其是有一个独立的、某一个单个的君主来决定的。所以这样的国家的目标，是不能保证它的合理性和正当性。所以商鞅的这样的治国方略到最后让秦国变成了什么呢？实际上秦国最终变成了一个监狱。所以按照《商君书》这样的一种理论，最好的政治就是刑律、刑法、法律；最好的国家就是监狱。这是我对秦国社会的一个总结。</p><p>　　在《商君书》的理论里面，实际上最终秦国也确实把这些理论实现了。这是讲他的壹民的理论。</p><h2 id="胜民理论"><a href="#胜民理论" class="headerlink" title="胜民理论"></a>胜民理论</h2><p>　　与之相关的还有一点，我们说第二点：胜民理论、制民理论。胜就是战胜的意思，制就是法制的制，制服的制——把老百姓制服了。我们要知道，作为一个个体的人，总是有他独立的个体的意志的。所以你要让他完全地照国家的意愿来行动，一定要有相应的手段逼迫他这样做，包括监狱，包括赏，包括罚。所以商鞅在提出了壹民理论以后，自然的从逻辑上讲，肯定会提出胜民理论。现在我们来看看胜民理论，这是一个非常残酷的理论。什么叫胜民呢？就是政府或者说是国家战胜人民。国家一定要战胜人民，国家一定要压服人民。他把国家和人民看成是个跷跷板：如果国家上去了，人民就必须下来；如果人民上去了，国家就会下去。所以为了让国家强大，国家一定要战胜人民。这是他的一种理论，比如他说到了：“民弱国强，国强民弱，故有道之国，务在弱民。”（《弱民》）</p><p>　　《商君书》这一本书它里面有很多的思想，很多的言论，我们看不出来它有什么逻辑的论证。像这样的话，我实在是找不出来他的理论的根据是什么？为什么人民弱了国家就强大了？为什么国家强大了，人民就一定要弱下去？我们不知道他为什么这个论证是怎么来的？但他就是这么提倡的，他就这么主观认定。所以他讲到了“有道之国，务在弱民”，所以那个有秩序的国家一定要削弱人民的力量。所以我们知道：中国古代有愚民政策。我们读完《商君书》以后应该知道：还有一个弱民政策。让老百姓愚当然是让他弱的一种方法。你看他把国家和人民如此尖锐地对立起来。</p><p>　　“昔之能制天下者，必先制其民者也；能先胜敌者，必先胜其民者也。故胜民之本在制民，若冶于金，陶于土也。”他说古代那些把天下治理好的圣王，他一定是先把人民给制服了。“能先胜敌者，必先胜其民者也”，如果你要在战场上战胜敌人，打败其他的国家，你必须在国内先战胜你的人民。所以他说“胜民之本在制民”，要战胜人民的根本，就在于要有一个好的办法来制服他，就象一个冶金的工匠锤炼他的金属一样，就象一个陶器工匠来培埴泥胎一样。</p><h2 id="制民理论"><a href="#制民理论" class="headerlink" title="制民理论"></a>制民理论</h2><p>　　商鞅呢，我觉得他就是中国的专制政治的最黑暗的核心。《商君书》是中国的传统的专制政治的最黑暗的核心，是中国古代专制君主秘不示人的他们的统治的秘诀。我们现在把这个秘诀给打开让大家来看一看，里面到底有多少黑暗的东西，有五个，<strong>一个就是以弱去强，以奸驭良，实行流氓政治，小人政治。我们下面一个一个讲。第二个就是壹教，实行思想统治。第三个就是剥夺私有资产，造成一个无恒产、无恒心的社会。我们知道剥夺私有资产，实际上就是剥夺个人自由的条件。第四个就是辱民、贫民、弱民。侮辱人民，让人民变得很贫困，让人民变得很愚弱，然后这样有利于统治。最后，如果前面的四种手段被告下来以后，还有一些人民比较强大的话，怎么办？杀！</strong></p><h3 id="以弱去强，以奸驭良，实行流氓政治，小人政治"><a href="#以弱去强，以奸驭良，实行流氓政治，小人政治" class="headerlink" title="以弱去强，以奸驭良，实行流氓政治，小人政治"></a>以弱去强，以奸驭良，实行流氓政治，小人政治</h3><p>　　下面我们先看第一个：以弱去强，以奸驭良，实行流氓政治，小人政治。</p><p>　　国家的人民里面，总有比较强悍的比较弱小的。这个强悍和弱小有两个层次的，一个是体格上的，你个子长得高，你体格比较魁梧，你体力比较壮，这是一种人。这种人到战场上打仗当然是好士兵，你为国家种田也很好。但是平时你如果跟国家作对，这样的人就很危险。这是一种强民。还有一种强民是什么呢？有思想的人，有知识的人，有文化的人，有见解的人。这样都属于强民。国家要强大，这样的强民必须要消灭。然后他提出来这样一句话：“以强去强者弱，以弱去强者强。”（《去强》）这句话在《商君书》的两篇文章里面一字不差地出现了两次。它应该说是商鞅很得意的一个政治格言。翻译一下，用一部分的强民去消灭另一部分强民，国家不能强大。只有用弱小的人民去消灭所有的强民，国家才能够强大。为什么是这样呢？我们来看一看，商鞅在这里说的倒是很有逻辑性。你用一部分强民去消灭了另一部分强民，存下来的怎么样？还是强民。你国家面对的还是那些强民，民强了国就弱了嘛。他前面不是有了那个前提了吗？所以他要让所有的弱民起来去消灭所有的强民，结果剩下的就全部都是弱民。这些弱民没思想的、没文化的、没知识的、愚昧的，这样的人国家就好控制他了。</p><p>　　下面我引的一段话就是商鞅自己对这段话作的解释。你看这两篇文章，一个叫《去强》一个叫《弱民》。题目就很明白，“去强”就是去除强民，“弱民”弱当动词讲：削弱人民。“以强攻强，弱，强存。以弱攻弱，强，强去。强存则弱，强去则王，故经强攻弱，削。以弱攻强，王也。”（《弱民》）“以强攻强，弱，强存”，以强攻强，不行，国家会弱的，原因是什么？因为强还存在下来，还有一部分人强保存下来了。“以弱攻弱，强，强去”，这个以弱攻弱后面这个弱字，根据高享等人的解释，这个地方应该是强，就是“以弱攻强，强”。用弱民去攻打强民，国家就会强大，原因是强去，强民消灭了，国家就强大了，所以“强存则弱，强去则王”。强民一旦存在，国家就会弱，强民一旦消失了，国家就会强大。</p><p>　　这个理论真的是被实行过啊！秦始皇统一中国以后，你们知道他干过什么事吗？大家都知道他焚书坑儒，焚书当然是弱民的手段之一，坑儒是把那些已经有思想的，思想上的强民给消灭掉。除此之外，他还干什么呢？杀豪俊。你看那个贾谊的《过秦论》上就讲到了“杀豪俊”。什么叫豪俊啊？就是强民嘛，强梁啊。把那些体格健壮的、性情暴亢的、不大容易服从的，都集中起来杀掉。然后留下的都是弱小之民。这是以弱民去强民。</p><p>　　还有一种更为不可思议的，就是以奸民来统治良民，就是以奸驭良。在一个地方里面，比如在一个乡村里面，你选什么样的人来做乡长，选什么样的人来做村长呢？商鞅给专制君主出主意，你要选流氓出来，选恶棍出来，让这样的人去统治那些善良的老百姓，天下、国家就强大了。这可是他的原话，我可不是胡说的，你看下面的引文《去强》里面：“国以善民治奸民者，必乱，至削；国以奸民治善民者，必治，至强。”（《去强》）你一个国家如果让善民去治那些奸民，你把善民选拔出来，让他当官，让他当乡长，去治理那些奸民，那国家肯定会乱的，国家一定会削弱的。所以最好的办法是什么呢？“国以奸民治善民者，必治，至强。”让奸民去治善良的民，他认为这样的国家一定能治理好，国家一定会强大。</p><p>　　我们不读这样的话，你能不能想象在中国的历史上，在全人类的历史上，还有这样的一种混账的理论啊！所以我说中国传统的专制社会里，最黑暗的核心里面，到底有些什么东西？我们可能大多数人真的是不知道的，我们只看到表面上一再地说仁义道德，一再讲我们是礼义之邦，一再讲我们有五千年文明，我们根本不知道：我们传统的政治的最黑暗的核心里面，是一些什么样的东西，是一些多么可怕的东西。</p><p>　　这就是商鞅、《商君书》，还有韩非子，还有慎到，还有申不害，这一帮人给专制君主们，给他们的统治人民的手段和秘诀。</p><p>　　以弱民去除强民，以奸民驾驭良民，我们想这样的社会会变成什么样的社会？这就是黑社会啊！中国几千年的社会，我可以讲就是黑社会！没问题的。所以我为什么看到有人说什么康乾盛世，我就非常生气呢？那些无知的什么人写《康煕大帝》、《乾隆王朝》，我们可能是有过所谓的专制君主们津津乐道的盛世，那秦国被商鞅治理了以后也变成强大的国家了嘛。他最后真是非常强大，所向无敌，六国都不是他的对手，统一六国了。但是这样的国家对人民意味着什么呢？你愿意生活在这样强大的国家里面吗？你愿意生活在我们今天这样自由的生活里，还是愿意生活在“康乾盛世”里？我想我们在座的各位没有一个傻到愿意活在那个时代。但是我们就有些作家喜欢生活在那样的时代，他喜欢那样的专制君主再活五百年，起码的一点价值判断的能力都没有。</p><p>　　实际上对于传统的政治的这样的一种弱民政策、愚民政策，以弱民去强民的政策，进行反思的人，历代都是有的，我这儿举一个清代龚自珍。龚自珍可以说是清代末年思想解放的先驱，他对中国传统社会很多的观察非常深刻，我为什么说他很深刻？那么多年过去了，一百多年过去了，跟我们今天相比，他还那么深刻，说明什么呢？你可以说他很伟大，但是也可以得出个结论：我们实在太渺小。</p><p>　　“当彼其世也，而才士与才民出，则百不才督之缚之，以至于戮之……戮其能忧心，能愤心，能思虑心，能作为心，能有廉耻心，能无渣滓心。”（龚自珍《乙丙之际箸议第九》）</p><p>　　龚自珍在他的《乙丙之际箸议第九》这篇文章里面讲到，有一种时代，看起来怎么看都象一个盛世，国家好象很强大，尤其是国家显得特别稳定，但是在这个国家里面是怎么样的呢？“才士与才民出，则百不才督之缚之，以至于戮之”，如果出了一个有才华的老百姓，一个有天赋的人民，周围一百个无才无德的人就会监督他、束缚他，甚至最后杀掉他。而且这种杀他的是什么呢？不一定是消灭他的肉体。是消灭他的什么呢？消灭他的“能忧心，能愤心，能思虑心，能作为心，能有廉耻心，能无渣滓心。”这是龚自珍给我们讲他的那个时代，而且这个时代表面上，从什么地方看，都像是一个盛世，都像是一个太平盛世。但是这样的结果是什么？龚自珍非常痛苦地讲到，这样的结果是，在这样的社会里面，在这样的国家家里面，在这样的民族里面，不仅我们找不到一个才士，一个才民，一个才商，有才能的知识分子，有才能的老百姓，有才能的商人，不用说这些人我们找不到了，甚至连才偷才盗，我们也找不到了，小偷和强盗都不需要技术含量就可以作案了。</p><p>　　专制政治通过对个体的天赋和发展空间的挤压，最终让一个民族失去了活力，唯一得利的就是专制君主本人，就是他所代表的那些阶层。</p><p>　　这是第一个，“以弱去强，以奸驭良”最终导致这样的结果。</p><h3 id="壹教"><a href="#壹教" class="headerlink" title="壹教"></a>壹教</h3><p>　　二，壹教——就是思想统治。思想统治是中国的传统，对我们来说，这也不算太新鲜。所以这一点，我们放在这儿不讲了，过去吧，大家都知道，我们就不讲了。</p><h3 id="剥夺个人资本，造成一个无恒产，无恒心的社会"><a href="#剥夺个人资本，造成一个无恒产，无恒心的社会" class="headerlink" title="剥夺个人资本，造成一个无恒产，无恒心的社会"></a>剥夺个人资本，造成一个无恒产，无恒心的社会</h3><p>　　我们讲第三点——剥夺个人资本，造成一个无恒产，无恒心的社会。孟子有一次和齐宣王谈话的时候，他讲到一个非常重要的东西。他说一个王者治理天下，一定要让人民有恒产，要“上可以事父母，下可以育子女”。一个人，像我们现在的中年人，国家给我们定的工资标准是什么呢？你拿这个工资，对上，能养活父母亲；对下，可以把子女抚养大。孟子说：一个想称王天下的人，一定要在这个基础上制定人民收入的标准，要保证这样的收入标准。为什么要有这样的收入标准？孟子说：人一般都是这样，有恒产的人有恒心，无恒产的无恒心。有一个固定的收入，有一个基本的生活保障，可以让你不堕落。什么叫恒心？就是保留着善良的本性，不要天天想着歪门邪道，不要想着坑蒙拐骗。有时候想想小偷，他可能真的是被生活所迫，实在是没有办法。所以孔子也好，孟子也好，他们经常的，他们在解释犯罪的时候，我觉得儒家在这个地方做得很可敬，孔子和孟子解释犯罪的时候，他不认为犯罪是由于这个人很坏，他会认为是社会原因所导致，是由于国家让人民没有基本的生活保障，然后他不得不去犯罪。所以孟子跟齐宣王讲，你要让人民有恒心，让人民保持自己的道德不堕落，在一定的道德水平上，然后能够向善。你必须给他恒产，有基本的生活保障。这是儒家的理论。</p><p>　　我们来看看商鞅是怎么讲的，恰恰相反，我们讲了愚民、弱民，现在还要讲“贫民”，就要让你人民什么都没有，一无所有，然后好控制，你不听我的话没饭吃。先让你没饭吃，然后你想吃饭吗？好，听我的，听我一次给你发一点。吃完了还要听我的，再给你发一点。然后他就导致整个的人民，所有的人民道德上的堕落。所以我们刚刚讲到了：愚民，让你愚昧；弱民，让你没有能力；贫民，又导致你道德上的堕落，人格上的下流。所以你不要以为专制统治下的国民会强大，不可能强大。美国的黑人领袖马丁.路德.金，大家都知道的，他讲过一段很好的话。他说：国家的强大不在于武力的强大，不在于国家的公共设施有多强大，也不在于国家的经济有多发达。国家的强大在于公民自身，我们的公民是否很强大。这话真是讲的非常好。</p><p>　　商鞅的这样一种剥夺个人资产、剥夺个人资本造成无恒产无恒心的社会，然后让人民道德普遍滑坡，道德上变得很下流。你看他讲的那些话：“治国能令贫者富，富者贫，则国多力，多力则王。”（《去强》）他就要这么折腾你，让贫的人富起来，让富的人穷下去，然后这个人富起来怎么样？再让他贫下去，就要反复折腾。为什么你知道吗？反复折腾的结果，就让你没有安全感。一个国家的老百姓没有安全感，他就没有一个定性，就没有固定的品德，就没有恒心。你没有安全感，就老要找一个外在的强权，你去依附他。没有安全感怎么办？那就有依附感。所以有人研究过狗为什么那么忠诚？是因为狗是最没有安全感的动物，所以它特别忠诚。</p><p>　　除了有形的资产之外，无形的资产，他也要把你去除。比如他在《算地》这篇文章里讲到有这么一些人，比如说“谈说之士资在于口”。每个人都有他的资本，你有钱是资本，那我有无形的资本啊。谈说之士，他的资本就是口。那我今天来给大家作讲座，我的资本就是这张嘴巴。那我有这个资本，比如说你国家不给我发工资也没问题，我到处讲演也能挣点钱。那商鞅说：行。我就把你嘴封起来。“处士之资在于意”，有些思想家，他的资本是什么呢？是因为他有思想，也要控制他的思想。“勇士资在于气”，他很勇敢，他有勇气。好，也得把他勇气消灭掉。“技艺之士资在于手”，你说我什么都没有了，我学一门手艺行吧？学补皮鞋，在大街上整天给人补皮鞋，我也能活，我不要从你的体制里拿钱。你有手艺吗？好的，把你的手砍掉。你所有的你个人所能依附的全部给你破坏掉，然后你想活，你只有一个渠道，从他体制里面去拿那一份他给你的。所以剥夺个人的资本，不光是有形的物质资本，也包括你所有的赖以生存的技能、思想、学问等等，全部给你剥夺得一干二净。你想活着吗？去吧，到那儿登记去。然后让他给你分配几亩地，你去种去吧！打仗的时候你打仗去吧！这是第三点。</p><h3 id="辱民、贫民、弱民。侮辱人民，让人民贫穷，削弱人民"><a href="#辱民、贫民、弱民。侮辱人民，让人民贫穷，削弱人民" class="headerlink" title="辱民、贫民、弱民。侮辱人民，让人民贫穷，削弱人民"></a>辱民、贫民、弱民。侮辱人民，让人民贫穷，削弱人民</h3><p>　　第四点，辱民、贫民、弱民。侮辱人民，让人民贫穷，削弱人民。这个地方，我们来看看他有些话，实际上这个跟前面的内容有些交叉的地方，但我专门列出来，是因为他有些话讲的，你看：“民，辱则贵爵，弱则尊官，贫则重赏。以刑治，民则乐用；以赏战，民则轻死……民有私荣，则贱列卑官，富则轻赏。治民羞辱以刑，战则战。”（《弱民》）我刚才讲了，他主要是要把体制的地位抬高，让人民在体制之外无所依存。所以让你耻辱，让你没有地位，没有尊严，没有体面，然后你就怎样呢？把国家的爵位看得很重了。你本来什么都没有，你是一个毫无体面的人，你是一个活得没有任何尊严的人，你要想有尊严怎么办？好办啊，到前线去呀，砍几个人头过来。给你一个爵位：五十石、一百石。现在我有身份了，你不要瞧不起我，我现在是有一百石的官了。但是先要把你弄到没有体面、没有尊严、没有名声，让你觉得实在没有办法活下去了，然后你就走到他那条路上。所以这叫“辱则贵爵”、“弱则尊官”。什么都没有，你一点能力都没有，只好靠官来保护你。所以我们为什么有那么多的清官意识啊？我们一直在搞清官意识。</p><p>　　我记得在九十年代初，92、93年的时候，电视里天天放《包青天》，那就是清官时代。后来发现清官实在找不到几个了，没办法，那就看有没有皇上好的，就是《康熙大帝》、《乾隆王朝》了。我说皇上再靠不住怎么办呢？我说会出现神仙了，我们等着吧！我看神仙现在大致差不多也出现了。我们就没有想到建立一种制度来保护自己。商鞅倒想到了，但是他从另外一个角度想到的。然后“贫则重赏”，你不是穷得没办法吗？给你一点奖金，你就很高兴啊。我几年前看到一篇文章，说“发奖金的艺术”，写这样的文章的人都是心地不大善良的人。所以我一再讲：一个作家也好，一个学者也好，一定要让自己站在弱势群体的一边，一定要站在人民的一边。站在老板的一边，帮他出主意，这是很下流的人干的事情。</p><p>　　商鞅讲是是不是这个意思啊？“贫则重赏”。你一个单位平时一个月的工资就是一万元钱，年终的时候给你发一万无钱的奖金，你没有什么感觉的。如果你平时一个月也就一千钱，年终突然给你发一万元钱奖金，你是什么感觉？不一样了吧？同是一万元钱，感觉不一样。商鞅这个家伙真是阴险，他很懂心理学。他平时把你搞得很穷，给你发一百元钱，然后年终给你一千元钱，你激动得不得了，这就叫作“贫则重赏”。然后你天天想着国家的爵位，天天想着讨好那些做官的，天天想着把国家的奖赏拿到手，你的心思是不是全在他那儿了？你的思想是不是被他控制了？很厉害啊。商鞅是绝顶聪明的人，可惜的，他又是太坏的人。一个人特别聪明如果又特别坏，那就很糟糕了。</p><p>　　“农有余食，则薄燕于岁。商有淫利，有美好，伤器。”农民如果有余粮，他可能就一年不好好地干活了。那怎么办呢？让他没有余粮，让他吃了上顿没下顿。就是让你没有安全感，然后就让你像蚂蚁一样，拼命地劳动。我们的寓言故事里面，把蚂蚁看成很正面的形象。到秋天了，蚂蚁开始忙了，往洞穴里面搬粮食，然后知了在那儿唱歌，蚂蚁说你别唱了，你搬粮食吧。知了不听，冬天来了，蚂蚁丰衣足食，知了饿死了。从这个角度讲，也对。我们平时应该努力一点，应该勤奋一点，应该有点储备。但是蚂蚁的这种生活状态，也太低层次了一点，一年到头就忙这点吃的，这至少不是人的生活啊，人除了物质还应该有精神啊，人应该是蚂蚁的生活和知了的生活的结合，除了搬运粮食之外还要唱歌。可是商鞅说，我就让你吃了上顿没下顿，让你天天搬动粮食都来不及，你唱歌。你别说，商鞅在文章里还专门讲到过，有一些演出的艺人，在商鞅那个时代，已经有艺人了，有时候到乡里面唱唱歌，然后老百姓给他一点东西。他说：这些人绝不允许他们到农村里面去，到农村去了，农民一看唱歌也能挣钱，他就不劳动了。</p><p>　　除了这个之外，商鞅还提出了一种，无论是从政治伦理，还是法律伦理，还是法律的角度，都是非常荒谬的观点：“重刑轻赏”。“重刑轻赏，则上爱民，民死上；重赏轻罚，则上不爱民，民不死上。”（《去强》）我们知道儒家的观点是“轻刑重赏”，这是人儒家的基本观点。在《尚书》里面就明确讲到了“疑罪从轻，疑赏从重”，就是对这个人他的罪行，到底该判五年还是该判三年，这时候应该怎么办？判三年，叫“疑罪从轻”。那么“疑赏从重”，是赏他一百元还是一千元呢？那就赏一千元吧，这是儒家的思想。所以儒家的思想有很多不好的东西，我对儒家有很多的批评，但是他确实有很多人道的地方，跟法家一比，你就知道他确实是太好了。好坏是对比看看的嘛，没有绝对的好坏。但商鞅可是正相反，“重刑轻赏”。他还讲“刑重而必得”，刑一定要重。“禁奸止过，莫若重刑”。</p><p>　　所以我刚才讲了，我说在商鞅的观念里面，最好的政治就是刑律啊，最有效啊。实际上商鞅的这种观念里面，我们再看下面，他还有话：“重刑轻赏，则上爱民，民死上；重赏轻罚，则上不爱民，民不死上。”这话我先翻译一下然后你看看，能不能理解他的逻辑。这个商鞅的思维跟我们是不一样的。他说对老百姓惩罚得重一点，赏得轻一点，这正好可以表现君王是热爱老百姓的，老百姓也愿意为君王去死的；反过来，如果你对老百姓赏得很多，惩罚得轻一点。那正好说明你这个国君是不热爱老百姓的，老百姓也不愿意为你去死。你能理解这样的理论吗？除非你是个受虐狂。我收拾你越厉害，你越喜欢我，那受虐狂才有这样的心理。商鞅就这么写的。所以法家思想真的是把人分成两类：专制君主就是施虐狂，老百姓就是受虐狂，全社会就是由这两种病态的人组成的。你除非从这个角度理解，否则无法理解他的话。你给我赏多一点，给我的罚轻一点，我反而不喜欢你了；你把我处罚得重一点，给我的赏特别少，我反而喜欢你。你说我有没有病啊？但这是商鞅说的话啊。所以你读《商君书》有的时候想不通，你要从病态心理学的角度去读。专制的思想真的是病态，然后他把全社会都变得很病态。</p><p>　　商鞅的这个理论，即使从法律的角度讲，也是讲不通的，因为法律它有个平衡的问题，有个量刑的轻重，它一定要根据罪行的轻重来量刑。所以韩非在这一点上比他要好一点，韩非在他的文章叫《难二》里面讲到：“刑当无多，不当无少。”这话讲的纯粹从法律的角度讲，韩非讲的是对的。你给一个人的惩罚如果是恰当的，和他所犯的罪行是对等的，那就无所谓轻重。那有的人杀人了，我们就判他死刑。判死刑重不重啊？对他来说不重。但是有的人就因为偷了东西，你判他死刑，那怎样？重了。所以韩非讲“刑当无多”，只要是恰当的，就不多也不少；如果不当，你再轻也不行。如果一个人在大街上吐了一口痰，你把他逮起来，投入监狱，判了一年。然后你说没判他死刑，很轻的。那不行，这不当。吐口痰最多罚他五十。你判他一年，已经很重了。这一点韩非就比商鞅好。</p><p>　　实际上商鞅的这个理论，我在读《汉书》时，看到有一个例子：《苏武传》。苏武出使匈奴，苏武手下人个副使叫张胜，和匈奴的一些人，偷偷密谋，想把单于手下的一个大臣叫卫律的杀掉。后来这个事情败露了，苏武也受牵连，就被他们逮起来审讯，苏武坚决不屈。这个故事大家都知道的。但是这里面对于苏武等人的量刑，当时有个争论，卫律对单于说：这些人，他们竟然想谋杀单于的大臣，应该把他们全部斩首。但是单于手下有另外一个人，叫左伊秩訾的人，这是个匈奴人，他说不能够斩首。这些人是谋杀单于的大臣，而且是谋杀未遂，如果你把他斩首，那么如果下一次有人说：我干脆了，我也不杀他的大臣了，我就直接把单于给杀了，你怎么再加重惩罚呢？所以左伊秩訾说：这样的人只要他愿意投降，就可以赦免他。</p><p>　　左伊秩訾在提出对苏武等人量刑建议的时候，他提出了一个非常重要的法律原则，就是说：不是说我们痛恨一种现象，我们加重刑罚就可以了，因为这样会造成整个法律秩序的混乱。假如我偷一个东西你就判我死刑，那我不偷了，那我干脆抢了。抢也不过是死刑啊。是不是这个道理啊？假如我轻微地伤害了你，你就判我死刑，那干脆就把你杀了。所以法律如果这样判，如果没有差距的话，那你就逼着犯罪的人都犯最严重的罪行。因为犯最严重的罪行，对他来说是最有效益的罪行。所以，商鞅在这里讲的，一味地强调重刑，不仅是不人道的，而且也会破坏法律的秩序。</p><p>　　在这儿我们可以把商鞅的很多思想，和与他同时代的春秋和战国时候的其他一些思想作比较。在《弱民》这篇文章里他讲到：“政作民之所恶，民弱。政作民之所乐，民强。民弱国强，民强国弱。”这样的理论，如果今天不把原话引出来，你也不相信会有人提出这样的政治理论。什么意思呢？国家制定政策，如果制定一个让老百姓特别讨厌、特别害怕的政策，那老百姓就弱了。老百姓弱了，你就知道结果是什么呢？国家就强了嘛。如果你制定了一个政策是符合老百姓利益的，是人民喜欢的，那么老百姓就强了。最后“民弱国强，国强民弱”，所以选择是什么呢？制定政策一定要制定一个让老百姓不喜欢的政策，要制定一个让老百姓很讨厌的政策。中国历史上有没有这样的时期啊？很多。削弱人民，就要制定一个对老百姓不利的政策，对老百姓不利了国家就强了。商鞅作为国家政策的制定者，作为一个政治理论的倡导者，他竟然公开提出来要制定削弱人民的政策，制定让人民厌恶的政策。公开这样说，真的是让人匪夷所思。我们很多专制君主是这么干的，偷偷摸摸干的。但是商鞅可是公开这么说的，白纸黑字、铁证如山。只不过我们在座的诸位大多没看过。</p><p>　　我们来做个比较，我们把他和先秦其他的思想家做个比较。比如说，我们看看管仲。管仲我们在文革的时候，也把他看成是法家的人物。实际上严格地讲，他不是法家，他不是儒家，也不是道家。管仲严格意义上讲，他就是个经济学家，但是他在这里讲到了：国家制定经济政策应该怎么样？“俗之所欲，因而予之；俗之所否，因而去之。”（管仲）你看顺应民俗，顺应人民的想法。所以管仲才能取得那么大的成功啊！管仲在齐国帮助齐桓公将近四十年的时间，整个春秋时期，到了春秋后期，老百姓活得最好的时期，就是管仲的时期了。他不仅把齐国治好了，齐国是霸主嘛。他把天下各路诸侯都召集来开会，你们都必须给我规规矩矩的。天下的诸侯都很规矩，那段时间几乎没有什么战争。如果有外族入侵的话，管仲、齐桓公还带着齐国的军队，把诸侯召集起来共同抵抗。所以管仲四十年施政，在中国历史上有那么大的功劳，孔子对管仲的评价非常高。孔子批评管仲就讲这个人不懂礼仪，因为他生活比较奢侈，但是他对管仲评价很高。有人说管仲这个人是不是不好？孔子说：管仲是个仁人。用“仁”来评价管仲，多高啊！然后有人说管仲这个人是不是不好？孔子说：你不要骂管仲。“微管仲，吾其披发左衽矣。”这句话简单地说，就是没有管仲的话，我们现在中原的文化可能都不存在了啊！我们就已经被外族入侵了，整个中原都被别人占领了，我们都变成少数民族了。你看孔子对管仲的评价有多高。他为什么能取得这么大的成绩？我们就从这十六个字来看一看：他要的，我给他；他不要的，我把它改掉。顺应人民的想法，顺应人民的意愿。这才是真正的伟大的政治家，这是管仲。</p><p>　　下面我们再看看庄子，庄子讲的治国。在《庄子.徐无鬼》里面，他讲了一个故事，这个原文你可以不看，我放在这儿只是表明我有根据的，不是我胡说的。黄帝把天下治得差不多了，然后他听说在昆仑山那个地方，有个天师很厉害，他想着我再去向天师讨教讨教，怎么样把国家治理得更好。他带着大臣们就去了，找了半天找不到天师。后来在路上碰到一个放牛的小孩，就问这个小孩：天师在哪里？我们想找他。这个小孩就问他：你找天师干什么啊？黄帝说：我想向天师请教一下如何治国？这个放牛的小孩就告诉他：治理国家很容易啊！就像我放牛一样，牛喜欢吃的草，你就让它吃；不喜欢吃的草，你就不让它吃。黄帝一听，马上就跪下来了：你就是天师啊！确实他就是天师。看看，道家的观点：人民喜欢的就给他，不喜欢的就改掉。这是道家的。</p><p>　　儒家怎么样呢？那孔子孟子的思想我们知道了，我现在再举另外一个例子，《国语.周语》上的一段话。在召公对周厉王的一段劝说词里面，他讲到了“行善备败”。什么意思？在制定政策之前，要多方面征求意见；征求意见以后，先把这个政策进行实施。实施完了以后再考察一下，哪些政策人民喜欢，我就推广，这叫行善；哪些政策不合人民的利益，我就把它改掉，这叫备败。</p><p>　　所以管仲也好，道家也好，儒家也好，他们的政治理念应该说是正常的政治理念，而商鞅的政治理念是病态的政治理念。但是我们不得不说的是，在中国古代几千年的封建统治里面，是商鞅的这个东西成了专制君主统治天下的最黑暗的内核。我们不要动不动说我们有五千年的文明史，有时候我们真的要想一下：我们有五千年的黑暗史。</p><h3 id="杀力"><a href="#杀力" class="headerlink" title="杀力"></a>杀力</h3><p>　　最后讲杀力。这个杀力简单讲就是战争，发动战争。发动战争有两个好处，第一、可以“杀掉”其他的诸侯国家，可以削弱对方；其次，在战场上也把自己国家的强民杀掉了。我们等会儿要讲到，后来秦国在列国纷争里面，我们来看看他们的“战绩”。这个战绩我是打引号的。“国贫而务战，毒生于敌，无六虱，必强。”（《靳令》）国家很穷了怎么办？我们说国家穷了就别打仗了嘛。这不是正常思维吗？都穷成这样了，你还打什么仗啊？那个朝鲜，都穷成那个样了，还在搞什么核武器，然后粮食全靠中国、靠韩国、靠美国给他送去。这可能也是学了商鞅学坏的，国贫还天天要打仗。商鞅说“毒生于敌”，这样结果是什么呢？把毒转移到对方去了，国内就没有那么多坏人了——这个“虱”，就是对国家无用的六种人——就强大了。那么“国强而不战，毒输于内，礼乐虱害生，必削；国遂战，毒输于敌，国无礼乐虱害，必强。”（《去强》）如果国家强大了，你却不去发动战争，那末这个毒素就在你内部消化了，“礼乐虱害生，必削”，然后什么礼乐啊，各种各样的老百姓都产生出来了，国家就肯定会削弱。这个时候怎么办？要打仗。打了以后把毒就输给敌人了，国家又强大了。所以他讲：圣人治国，“能抟力，能杀力”。能够集中老百姓的力量，同时又能够把这些力量给杀掉，就是发动战争。“故能生力不能杀力，曰自攻之国，必削。”（《说民》）你把这些人的力量集中起来，然后你要带着他们去打仗，在战场上一方面消灭敌人，一方面也自我消灭，这样国家就越来越强大了。“能生不能杀，曰自攻之国，必削；能生能杀，曰攻敌之国，必强。”（《去强》）你把老百姓都搞得很强大，却不让他们去打仗，有那么多强大的人民在国内自己闹事，所以叫“自攻之国”，自己互相打起来了，这样的国家就会削弱了。所以要让一个国家怎样呢？“能生能杀”，要生出一些强民来，然后把他送到战场上去，又杀人，又自杀。商鞅的理论发展到最后，就是自杀，就是人体炸弹。</p><p>　　这是我们对商鞅的制民的、胜民的理论，我们主要简单地讲这五点。刚才讲了，我们是挂一漏万，只是举例说明的。下面我们讲一讲，最后商鞅自身有什么样的下场，叫作法自毙啊。商鞅用他的这样一种理论来治理秦国，他确实收到了短期的明显的效果。一下子，首先秦国的粮食多了；其次，秦国军队的战斗力成倍增长，那老百姓在前方不得不卖命啊。你要他不挎几个人头回去，你得不到赏不说，你还要受罚呀。如果你在前方打败了，你投降，你的父母、子女都在那儿变成人质了。所以你宁愿在前线战死，你也不能让你的父母、子女在那个地方受苦啊。所以秦国军队的战斗力是成倍增长，一下子让六国的军队在战场上根本就不敢碰到秦国的军队，一看秦国的军队来了，他们不用打，自己都吓跑了，所以战斗力很强。</p><p>　　在后来的汉代的一本书《盐铁论》里面——这个《盐铁论》我上次介绍过的——西汉政府曾经开过一次经济会议，专门讨论盐铁专卖问题。在这次会议上，关于国家很多的相关的政策，都有一些非常激烈的争论。当时国家的财政大臣就是桑弘羊，和桑弘羊辩论的是一帮所谓的文学之士。在辩论里面，其中有一个很重要的话题，就是对历史上的商鞅进行评价。这个话题后来集结成一篇文章叫《非鞅》，对商鞅进行否定。其中有这样一段话：“知其为秦开帝业，不知其为秦致亡道。”（《盐铁论.非鞅》）这话确实是很有历史眼光。就是说我们不能看一时的得失，从短时期讲，商鞅确实让秦国变得有粮食了，军队的战斗力也强大了，在列国纷争里面一下子占了上风了，并且所向无敌，把六国灭了，建立了统一的王朝，这是商鞅是成功，这就叫他“为秦开帝业”。</p><p>　　但是，这样一个王朝是不可能长久的。秦王朝统一以后，十六年的时间就灭亡了，一个强大的王朝，十六年，中国历史上最短命的王朝。为什么？我们一定要找到它最后的根本的原因。那就是商鞅的这个理论，包含着它致命的弱点，他让秦国一时取得了成功，但是又为秦朝的最终灭亡埋下了祸根。在他的统治之下，在商鞅的这种政策指导下，秦国是一个无声的世界。鲁迅曾经写过一篇文章，叫“无声的中国”，一个没有声音的中国。秦国就是一个无声的秦国，秦王朝也就是一个无声的秦王朝。</p><p>　　所以在商鞅死前的五个月，赵国有一个读书人见到了商鞅。商鞅专门向他请教的，说你能不能跟我谈一谈：你对我在秦国施政的政绩做一点评价，你觉得我做得怎么样？这个赵良可以说对他做了全面的否定的评价。然后赵良有一句许说得很好。他说：“千人之诺诺，不如一士之谔谔。武王谔谔以昌，殷纣墨墨以亡。”一千个人对你唯唯诺诺，都在说你好，不如一个人对你提出反对意见。一定要听取不同的意见，没有不同意见的国家，看起来是盛世，看起来非常稳定，但是就象鲁迅所讲的：“不在沉默中灭亡，就在沉默中爆发。”所以秦朝最后的灭亡，就是有一个人喊出了一句话，就是陈胜啊：“王侯将相，宁有种乎！”就是振臂一呼，天下云集响应，一个那么强大的秦王朝，被谁给灭了呢？就被一个小小的陈胜，就被陈胜所带的那个七百个人，七百个连兵器都没有的人，“折木为兵，揭竿为旗”，然后天下英雄云集响应。项羽出来了，刘邦也出来了，他秦王朝就灭了。</p><p>　　当然在秦灭之前，商鞅本人也已经尝到了这样的后果，赵良已经警告了他，说：你现在靠着秦孝公，如果秦孝公死了以后，你会有什么样的结局你知道吗？秦国想杀你的人有多少你知道吗？商鞅不听啊。五个月以后秦孝公死了，太子即位了。我们知道太子的两个师傅，一个被割了鼻子，一个在脸上刺了字。那个公子虔被割了鼻子。我昨天讲了，贵族最讲的就是体面啊。你把他鼻子割了，把他脸上刺了字，他不能出来见人啊，这是多大的仇恨啊！公子虔被割了鼻子以后，八年的时间没出过门，你想他在家干什么？他唯一的愿望就是等。所以这边老秦王秦孝公这边双腿一蹬刚死，那边太子一即位，公子虔马上就上了一道奏疏：商君是谋反者。马上秦王新的秦国君王就派兵抓捕商鞅，商鞅赶紧逃跑。</p><p>　　在逃跑的时候碰到两件事。在路途中，他想住一下旅店。旅店的人不认识商鞅，那时候没有电视，有电视可以天天看到他，不认识商鞅；商鞅那时也不敢说他就是商鞅。旅店的老板告诉他，说：我们国家，商君有一个很严厉的法令，旅店里面的住客如果没有官府开的介绍信，那是不允许住的，住了以后我要受惩罚的，所以我没法接待你。商鞅这个时候就尝到滋味了。他有一句感慨，他说：我没有想到，实行法治，最后是这样的结果啊。所以现在有个成语，我们的标题上写的“作法自毙”，这个成语就从那儿来的。搬起石头砸自己的脚。这是一件事。然后他逃到了魏国，魏国人不接待他。他不是魏国人吗？魏国人不要他了。本来在六国的时候，有这样的一种风气的，你在这个国家犯了罪，你逃到别的国家去了，大家就不管了，很正常，这个事情很多。比如孔子的时代，有那么多的乱臣贼子，你看孔子最讨厌的季氏手下的家臣，那个阳货。那个阳货在鲁国叛乱，最后被打败了，然后逃到赵国，赵简子把他收留了，也就算了。只要你逃了，也就没人管了。商鞅想着，我不行了，跑到魏国去，那也就算了嘛，也就过去了嘛。可是魏国的人对他是什么感情呢?我们是知道的，魏国人说：我们现在不敢接待你。为什么？因为你曾经竟然欺骗你的老朋友公子卬，用那样卑鄙的手段欺骗他，所以我们对你的人品不放心，这样的人我们不敢接待你，你还是走吧。商鞅说那好吧，我从你这儿过路，我到别的国家去。魏国人说那不行，你到别的国家不行，现在秦国这么强大，我们又打不过他，你是他们的罪人，我如果让你从我们国家经过，到别的国家去了，如果秦国找这个借口来找我们麻烦，我们怎么办？你还是回去。逼着他回到了秦国，不然他怎么会被找起来呢？他如果穿过魏国，比如跑到齐国去了，那不也没问题了吗？</p><p>　　那齐国在山东，秦国在陕西，离这么远，中间隔了好几个国家，没问题的。但是魏国的人就不允许他经过，你做事做得太绝了，所以后来的《吕氏春秋》上讲到了：“士自行不可不审也。”一个人做事情，不能不审视一下后果，不能不留后路啊。商鞅现在碰到的是什么样的情况呢？“所逃莫之隐，所归莫之容。”（《新序》）没有一个地方的人愿意隐瞒他，把他隐藏起来；没有一个地方愿意接纳他。</p><p>　　没有一个地方愿意接纳和隐瞒他的原因的两个，其中一个，当然是商君的人品已经让人们不齿，没有人愿意接待这样的人。还有一个，真是非常有黑色幽默的色彩，是因为商鞅的变法让秦国太强大，所以其他国家的人不敢收留秦国的罪犯。他自己让秦国强大然后导致自己以后没路可走，这真是黑色幽默。回到秦国是无路可走了，以前封他商於之地十五邑，现在还是他的吗？体制能够给你的，随时可以收回。所以我有时候在想：一门手艺比一个文凭更好，文凭可以不承认你，手艺他不能不承认吧？我在大街上修皮鞋，不要你承认，穿皮鞋的人承认就可以了。你商鞅十五邑的土地是国君分封给他的，前一代国王封给他的，那后一代国王可以收回来。可以吗？</p><p>　　他现在无路可走了，他手下一帮人，那帮可能受过他一点好处的徒属，他就带着这么几十个人，上百号人向北去攻打郑国，这简直是无望的困兽之斗啊。那几百号人能打郑国吗？他为什么要打郑国呢？他想把郑国打下一块地方来，然后就在那个地方安身啊。很是可笑，真的太可笑了，完全不可能。但是他没有路可走了，他死马当活马医啊。他这边进攻郑国，后边秦国的军队就跟来了，所以最终在郑国黾池这个地方，把商君逮起来了，杀死了，然后车裂。</p><p>　　这个《史记》上记载有一点矛盾的地方：《史记.商君列传》的记载，是杀死了以后再车裂的，就是五马分尸啊；但是《史记.秦本记》上面记载，好像是直接活着五马分尸的。不管是死了以后还要给他五马分尸，还是活着的时候让他五马分尸，你都可以看出来，这些人对他有多大的仇恨。死了以后还要把他的尸体拉开，这不是仇恨吗？活着把他活活地拉开，把他撕碎，不也是仇恨吗？种下的是仇恨，收获的也一定是仇恨。这就是商鞅本人的非常悲惨的下场。</p><p>　　《盐铁论》上有这样一段话：“故孝公卒之日，举国而攻之，东西南北莫可奔走，仰天而叹：‘嗟乎！为政之弊至于斯极也！’卒车裂族夷，为天下人笑。斯人自杀，非人杀之也。”（《盐铁论.非鞅》）注意这样的话，这个“举国而攻之”这样的措辞是跟孔子学的。孔子在写《春秋》的时候，他特别注意字斟句酌。如果这一个人是被这个国家里面的某些人杀害的，他就会写有人杀；如果这个人让全国的人民都恨他，是人民的公敌，那么就不是有些人杀他了。你看这里的写法是“举国”，全国的人都要杀他。说明什么？说明杀死商鞅的不仅仅是公子虔，不仅仅是这些人，不仅有秦国的王公贵族，而且还有秦国普通的老百姓，人人痛恨他，真是太失败了。所以商鞅做事是成功了，但是做人太失败了。最后的结果就是“东西南北莫可奔走”，四面八方无路可走，把自己弄得无路可走，四面都是墙壁，然后只能仰天而叹。</p><p>　　最后我们也知道，商鞅死了，不仅仅他一个人死了，一族都灭了，包括他的白发苍苍的老母亲，真的是很残忍，而且罪名是什么呢？反叛。你说这是不是又是一个黑色幽默啊？一个把所有的一切都献给了秦国，把良心都献给了秦国的人，就为了秦国强大，他什么都不顾了。这样忠诚的一个人，最终的罪名是反叛。所以在专制社会里面，什么样的黑色幽默都可以制造出来的。</p><p>　　《盐铁论》上最后讲到“为天下笑”，注意这个笑，没有人为他哭啊。大家都为他笑，嘲笑他，成为一个笑料，成为一个笑柄。最后还有一个结论：“斯人自杀，非人杀之也。我刚才讲举国而攻之，是全国人民要杀他，不是一部分人要杀他。三个层次，一、不仅仅是王公贵族、公子虔这些人要杀他，是全国人民都要杀他，是各个诸侯国的人。因为他们不收留他，是都想杀他，是全天下的人都要杀他。不仅是王公贵族，是秦国的老百姓；不仅仅是秦国的老百姓，是当时所有诸侯国的人，是天下人。而且到最后，还不是天下人要杀他，是他自杀，自找的。</p><p>　　商鞅这个人真是太值得我们去研究了，他的成功真是太成功了，他的失败也真是一败涂地。</p><p>　　最后一个问题：商鞅留下了一个什么样的秦国，他死了，但是他留下了一个什么样的秦国，留下了什么样的传统。简单地说，秦国在春秋时候是落后的国家、愚昧的国家，但是到了战国的时候，在家看看《战国策》，包括《史记》上，你会看到：在战国时期的各国人士的口中讲到秦国的时候，频繁出现的四个字“虎狼之国”，这就是商鞅变法的后果。概括的一句话就是：商鞅变法让落后的秦国变成了强大的秦国，让一个愚昧的秦国变成了一个野蛮的秦国。缺少的是文明，没有文明，落后的变强大了，愚昧的变野蛮了。</p><p>　　你看商鞅在《商君书.境内》里面，给军队规定的任务：“能攻城围邑、斩首八千已上，则盈论；野战，斩首二千则盈论。”（《商君书.境内》）什么叫盈论？符合朝廷给你规定的最低标准了，回来以后，你这场战争完成基本的目标了，如果在野外打仗，斩首二千以上，就符合标准了。整个的《境内》这篇文章，血淋淋的两个字：“斩首”不断地出现。战争就是以消灭对方的肉体作为目标。当然这种转变，战争变得不择手段，这种转变从《孙子兵法》就开始了。《孙子兵法》就讲到了“兵不厌诈”，开始向不择手段转变。</p><p>　　实际上我们以前跟大家讲过，中原的战争传统，至少在春秋的时候，非常人道的，像一个游戏一样。你就是跟对方打仗，如果我俩一块儿，你拿着刀砍我，我拿矛攻你，打了以后我发现打不过你，我转身就跑。我已经转身跑了，你当然可以追，但是追是有规定的，你追五十步。一边追，你还要数着，一二三四五，追到五十步必须停下来，否则你就犯规了。那我已经跑了嘛，已经认输了嘛，然后我发现对方来了个人，他头发是花白的，怎么办？不打了，“不擒二毛”。头发花白是老人，是不能跟他打的，那是不人道的。我和对方打仗，如果对方已经伤了，失去战斗力了，不能再攻击他，“不重伤”。这些规定跟我们现在的国际上的一些战争法很相近啊，很人道，“不重伤”、“不擒二毛”。那你说秦国的军队行吗？我管你二毛不二毛，砍一个人头回去有五十石粮食呢！</p><p>　　我们用一个个案来说明，秦国的将军白起。在《史记》里面找一个白起的传记来看一看，作为个案，秦国的将军白起的战绩。折起后来被封为武安君，因为打仗打得特别好嘛，被封为武安君。他一生带着秦国的军队攻取六国的城池有七十多座。我现在统计的，只是《史记》里面明确记载到他在这场战争里杀了多少人。《史记》里面，把这个地方攻下来没有说杀多少人，我也不统计。你看有这么几个数字：“昭王十四年，……攻韩、魏于伊阙，斩首二十四万。昭王三十四年，白起攻魏，……斩首十三万。与赵将贾偃战，沈其卒二万人于河中。昭王四十三年，白起攻韩陉城，拔五城，斩首五万。（昭王四十七年）坑杀降卒四十万。”（《史记.白起王翦列传》）二十四万回去这么一堆，然后商鞅就给他算账了，多少钱给你；二万人俘虏了以后，把他们身上绑上石头，沉到黄河里淹死；“长平之战”四十万。他就一个将军，算起来就有八十多万了。</p><p>　　在这些统计里面，我要加个说明：我们还没有统计秦国士兵死亡的人数。不可能那些人都把脑袋伸着让你杀呀，你杀别人十个，人家至少要杀你一个吧。秦国士兵死亡的人数没有统计，但是有一个事情可以说明，秦国士兵死亡的人数也非常多。为什么？你想：假如你对方来的人是秦国的士兵，他一定要把你斩首，你如果有地方逃跑当然没有问题，但是你到无路可逃的时候，你怎么样？你只能是拼死反抗，因为他没有优待俘虏的政策，他不会缴枪不杀的。所以这个结果是什么？秦国的士兵杀对方的人数很多，但是秦国的士兵也必须承担巨大的牺牲，因为对方一定战到最后一个。这也是商鞅既定的政策嘛，他战争的目的就是要杀对方的人，同时也让对方把自己消灭掉一些嘛。</p><p>　　我举长平之战，我们来看一看，根据司马迁的记载，在长平之战进入到相持阶段的时候，为了取得这场决定性战役的胜利，白起在前方，秦王在后方，颁布了一个政令：全国所有的老百姓每人赐爵一级，然后把十五岁以上的人，全部征调到前线长平。那就是说，我们打一点折扣吧，可能《史记》上这个地方有点夸张。《史记》是这么写的：“十五以上悉诣长平。”全部都送到长平，因为这场战争对他们来说是生死之战，他是孤注一掷了。我们打点折扣，至少可以想象，当时秦国已经用尽全力了，十五岁以上的人都已经去了。这场战争最后结果我们知道，是赵国四十万人被活埋，秦国到底死了多少？后来白起在一次讲话中说到：“秦虽破长平军，而秦卒死者过半，国内空。”秦国的士兵也死了过半，超过一半，整个国家的人口都空了。赵国死了四十万，秦国应该搭进去多少万呢？</p><p>　　你可以想象，战争到了最后，通过商鞅的变法，用秦国倡导的这样一种残酷的战争方式，最终在战国时期，在中国的大地上，战争的规模、战争的血腥程度。我告诉你们，现在学术界，尤其是西方的学术界，不承认这个数字，他们无法想象战争会如此的残酷和血腥。你看剑桥的《中国秦汉史》，西方的学者对《史记》上的这些数字不相信，就因为他们觉得这个数字太大，他们太善良，他们读读《商君书》就相信了。</p><p>　　这场战争结束了，我们现在还有一个统计数字：秦国在统一过程中斩杀的六国人数在150万以上。（据《史记》累计）这同样不包括秦国士兵死亡人数。除了这个数字以个，我再提供另一个数字作对比，当时全国人口总数2000万。所以秦国的统一的过程是什么过程？就是一个大屠杀的过程。</p><p>　　这样屠杀的结果，秦国固然在军事上占有优势，在军事上是频频得手，但是在政治上，秦国是一败涂地。为什么？可以从两个史料来看。第一个史料，就是在《商君书》里面有一篇文章叫《徕民》，就是招徕人口。你知道那个时候人口就是第一生产力，哪个国家人口多，哪个国家力量大。所以《商君书.徕民》有一条就是让其他诸侯国的人口到秦国来。在这篇文章里有这样几句话：“三晋不胜秦，四世矣……小大之战，三晋之所亡于秦者，不可胜数也，若此而不服。秦能取其地，不能夺其民也。”赵魏韩这三个国家，跟秦国接壤的三个国家，已经四代无法战胜秦国了，大大小小的战争，三晋这个地方，被秦国占领的土地不可胜数，但是，即使到这样老百姓不服，所以他最后自己也很悲哀地说：“秦能取其地，不能夺其民也。”你可以通过武力把他的土地占过来，但是你无法征服他的民心，老百姓早跑光了——这是商鞅的。</p><p>　　我们再看看白起是怎么讲的，白起后来——我举的例子都是在《史记.白起王翦列传》上的——白起后来跟秦昭王说：我们以前把赵国上党这个地方攻下来以后，上党的老百姓怎么样呢？“上党民不乐为秦而归赵。”上党的老百姓不愿意做秦国的老百姓，然后纷纷逃亡，逃回赵国，纷纷逃走了。</p><p>　　再举另外一个例子，我们知道苏秦这个人物，苏秦还有个弟弟叫苏代，也是很有名的一个外交家。苏代后来到秦国，找到秦国的国相叫范睢，跟范睢说：你们这样战争的结果是不能收服人心的。他也举了这样一些例子，他说：“秦尝攻韩，围邢丘，困上党，上党之民皆反为赵。”你曾经攻打韩国，把邢这个地方攻下来了，把上党也攻下来了，可是老百姓全部逃跑了，不愿意在你秦国，都回到了赵国，所以“天下不乐为秦民之日久矣”，天下的老百姓不愿意做你秦国的老百姓已经很久很久了。</p><p>　　我想说明什么问题？就是说明这样的国家很强大，但是这样的国家人民没有幸福，人民不愿意生活在仅仅是一个强大的国家里面，人民一定要生活在富裕的、安乐的国家里面，哪怕这个国家不够强大。</p><p>　　最后我做一个总结。一个历史学家叫诺曼.卡曾基，他对希特勒的一本书《我的奋斗》作了一个统计，最后的结果是这样：“……《我的奋斗》这本书里，每一个字让125人丧失了生命；每一页字让4700人丧失了生命；每一个章平均让120万人丧失了生命。”那现在，我最后一个问题就是：《商君书》让多少中国人丧失了生命？问题在于希特勒的《我的奋斗》随着二战结束，他的危害就结束了。《商君书》可是一直影响中国封建社会啊！一直到清代，它到底让多少人丧失了生命？这个真的让我们反思，至少我们要警惕。</p><p>　　最后，我引用泰戈尔的一段话：“谢谢上帝，我不是权力的轮子，而是被压在轮子下的活人之一。”我们都是有可能成为被压在轮子下面的活人，你不要以为你就是轮子！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="影视" scheme="https://loaderland.github.io/categories/%E5%BD%B1%E8%A7%86/"/>
    
    
    <category term="讲座" scheme="https://loaderland.github.io/tags/%E8%AE%B2%E5%BA%A7/"/>
    
    <category term="笔录" scheme="https://loaderland.github.io/tags/%E7%AC%94%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>0127record</title>
    <link href="https://loaderland.github.io/2024/01/29/0127record/"/>
    <id>https://loaderland.github.io/2024/01/29/0127record/</id>
    <published>2024-01-29T00:54:09.000Z</published>
    <updated>2024-04-02T07:13:28.589Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>去参加了一个国企的笔试，写了篇反动的文章。</p><p>与一个好友分享了下大概的情况，说我这是在玩票，这种文章给我高分弄不好会影响自己的前途，必须给你打低分。哈哈哈，我觉得他说的有道理。</p><p>我似乎是在自己给自己找不痛快，既然要去考试又不肯守他们的规矩，即想要进他们的门，又不肯表现的顺从。从本质上讲，所谓的公务员、事业单位、国企的考试，是一种服从性测试，想要入门必须要学会的第一课是怎么讲漂亮话。偏偏我没学会这个技能，从小到大的教育把我改造的很好。</p><p>文章的底色就是一个人的内核，人没有办法想清楚自己认识之外的东西，我写的东西如果我自己都不信，如何让别人去相信？“不需要让人相信，大家都是相互虚假的弄一下。”我学不来。</p><p>我们的社会在惩罚认真的人，你越认真，你就越痛苦。</p><blockquote><p>当我还是个傻逼的时候，被他们那套谎言骗得热泪盈眶义愤填膺。你要小心这世上的人，他们都憋着劲儿教你学好，然后由着他们使坏。——王朔</p></blockquote><p>几千年来，君君臣臣父父子子，我们被驯化的很好，社会筛选规则的第一条就是服从性，人是群居动物，无法独自存在、延续，服从性差的自然而然会被社会所淘汰掉，留下来的都是服从性很好的，或者假装服从性很好的人，可恨从小到大教我们的都是真善美，是为了更好管理么？</p><p>生活在这样的环境里是很痛苦的，你得把认真丢掉，或者你得学会伪装，因为你没有什么能力去改变这个世界，只能去适应他。我为我儿子的未来感到担忧，对于该如何教育他感到困惑。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="杂文" scheme="https://loaderland.github.io/categories/%E6%9D%82%E6%96%87/"/>
    
    
    <category term="记事" scheme="https://loaderland.github.io/tags/%E8%AE%B0%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>作</title>
    <link href="https://loaderland.github.io/2024/01/26/%E4%BD%9C/"/>
    <id>https://loaderland.github.io/2024/01/26/%E4%BD%9C/</id>
    <published>2024-01-26T03:28:07.000Z</published>
    <updated>2024-02-02T08:53:28.576Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="作"><a href="#作" class="headerlink" title="作"></a>作</h1><blockquote><p>所谓傻逼，即一开口便是民族、国家和政府的安危、盛衰和荣辱，但对于自己的基本权利、自由和尊严，却从不思考，对于身边的各种不公不义和无数无辜、无助和无告的弱者，却漠不关心，这便是中国式的傻逼脑残。——王朔</p></blockquote><p>自小便是一个作文困难户，思绪很杂乱想到哪里便写到哪里，作不成“文”，看过各种满分作文、写作技巧，也被有心的老师隔三岔五的拉到办公室辅导，以期不要因作文拉了我升学考试的后腿，十分努力且不见成效。现在只觉得，作文哪里有什么教的办法，写作是自内而外的东西，教的至多是一些技法，不能代替作为内核的思想。自此之后我便放开了，写作是一种不需顾忌个体身份、社会角色等杂质的倾诉，阅卷老师无法知道你是谁，却不得不看你的作文。一篇篇尽作凤头猪肚豹尾的模样，我计划换个赛道，只管把自己真实面目展露出来，不见得美，但究一真。</p><p>很喜欢一幅漫画，大约是三个人分别在脚下有不同数量的书，脚下书最少的那个看到了美丽的世界，脚下书多一些的看到的是一片废土，再多的那个人看到了星辰。其实除了读书之外，人的年龄也会让你对世界有新的认识。</p><p>我们的社会病了，病的很重。自抗战胜利至今，近80个年头，在历史长河中这只是一个小小片段，却发生了太多太多事情。这里面我们走过许多弯路，也获得了很多成就。现在的我吃饱穿暖，甚至开起了小车、背起了房贷一副小资产阶级做派，物资水平相较于我的父辈、祖辈优越不知道多少倍，但是我的精神没有寄托，我的前面看不到光。原先说好的年终奖说没就没了，降薪职工代表大会开了一次又一次开成了滑稽大会；三鹿田文华马上要出狱了；鼠头鸭头傻傻分不清；核酸造假、科兴行贿；十年烂尾无人问一朝停贷天下知；继基尼系数之后就业率也停止公布了；2023年gdp涨幅5.2%，股市暴涨0.5%；<em>全面小康说完成就完成了；先辈留下的制度说改就改了……</em>近些年来，能说的能做的事情越来越少，浑身上下都是敏感点，一个个都在粉饰太平，李文亮们或者死了，或者自主不自主的闭上了嘴。人民是愚蠢的么？或只是在被愚弄！我的朋友让我警惕并远离那些张口闭口宏大叙事，却没有底层关怀的人。当一个人跟你大谈家国情怀、集体主义的时候，大约在下一刻他将牺牲你的个人成就他的集体,这类人要么是既得利益的坏人，要么是自我感动的蠢蛋。</p><p>恩格斯在《家庭、私有制和国家的起源》中说——“国家是私有制社会的产物，是为了保护统治阶级的利益和维护社会秩序，通过立法、法律和暴力力量维持私有制存在，对剥削阶级实施统治和控制。”罗翔的一个视频里面说：“法律是统治阶级意志的体现，是为维护统治阶级利益，以最大程度压制阶级矛盾爆发的工具。” 因此，也不难理解为什么我们的法律在我们身上像个摆设，许老板500倍杠杆炸雷熟视无睹——六朝何事，只成门户私计。你爱祖国，祖国爱你么？你还把自己应得的权益寄希望于在位者的大恩大德？祥子没有好的生活是因为他拉车不够努力，买不起花西子多找找自己的原因。你问我爱国吗？我想说“工人阶级没有祖国，不要去做王朔口中的中国式傻逼脑残。“</p><p>软弱的人总是寄希望于未来，寄希望于在位者的恩赐，虽然无动于衷却期望将来越来越好，宁可麻木，不要痛苦。然而如果过去的事情就这么过去了，未来只会越来越糟。 ”愿中国青年都摆脱冷气，只向上走，不必听自暴自弃者流的话。能做事的做事，能发声的发声。有一份热，发一分光。就如萤火一般，也可以在黑暗中发出一点光，不必等候炬火。“不止是青年，愿中国中年、中国老年一并摆脱冷气，去做一个愤怒的人，去做事，去发声，去唤醒团结那些被愚弄的人民，去掀掉这个铁屋子 ，不在沉默中爆发，就在沉默中死亡，即便会死去也要嘶吼着死去。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="杂文" scheme="https://loaderland.github.io/categories/%E6%9D%82%E6%96%87/"/>
    
    
    <category term="杂文" scheme="https://loaderland.github.io/tags/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes</title>
    <link href="https://loaderland.github.io/2024/01/18/kubernetes/"/>
    <id>https://loaderland.github.io/2024/01/18/kubernetes/</id>
    <published>2024-01-18T01:53:55.000Z</published>
    <updated>2024-02-02T08:52:40.721Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Kubernetes</p><p><strong>特性：</strong></p><p>容器编排，通过配置文件<br>高可用，自动重启、重建等<br>可扩展，提高性能利用率<br>灾难恢复、弹性回复等</p><p>组件：</p><ul><li><p>Node节点：虚拟机、物理机</p></li><li><p>Pod：最小调度单元，一般情况1个pod一个应用程序，或者多个高耦合应用1个pod</p></li><li><p>Svc：入口代理，解决pod故障重启导致的IP变化</p></li><li><p>Ingress：配置转发规则等</p></li><li><p>ConfigMap：封装配置信息，应用程序和数据库的解耦</p></li><li><p>Secret：类似configMap，base64编码敏感信息</p></li><li><p>Volumes：持久化组件</p></li><li><p>Deployment：定义、管理应用程序的副本数量、更新策略，多个pod热备，提供服务健壮性需求</p></li><li><p>StatefulSet：定义、管理副本数量策略等，动态扩缩容，有状态类的应用需要保存在这里比如数据库</p></li></ul><p>架构：</p><ul><li>master-worker<ul><li>workNode<ul><li>kublet：管理维护每个节点的pod；定期从api-serv拉去新的规范，监控工作节点的运行状态汇报给api-serv</li><li>kube-proxy：网络代理、负载均衡</li><li>container-runtime</li></ul></li><li>masterNode<ul><li>kube-apiserv：api接口服务，集群的网关；对所有资源的crud进行权限控制鉴定</li><li>Scheduler：调度器</li><li>controller manager：故障监控</li><li>etcd：键值存储信息，存储所有资源对象的状态信息，数据存储中心</li><li>cloudControllerManager：云平台相关的控制器</li></ul></li></ul></li></ul><p>搭建环境：</p><ul><li>minikube、kubectl</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="CS" scheme="https://loaderland.github.io/categories/CS/"/>
    
    
    <category term="k8s" scheme="https://loaderland.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>TheSecretLivesOfKyotoFolk</title>
    <link href="https://loaderland.github.io/2024/01/17/TheSecretLivesOfKyotoFolk/"/>
    <id>https://loaderland.github.io/2024/01/17/TheSecretLivesOfKyotoFolk/</id>
    <published>2024-01-17T02:42:47.000Z</published>
    <updated>2024-04-02T07:13:28.594Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="The-secret-Lives-of-Kyoto-Folk"><a href="#The-secret-Lives-of-Kyoto-Folk" class="headerlink" title="The secret Lives of  Kyoto Folk"></a>The secret Lives of  Kyoto Folk</h1><blockquote><p>先前去过京都，对京都人礼貌、友善印象深刻，引起对知晓其来源的强烈渴望。</p></blockquote><p>纪录片已经看完了，计划重新看一遍把每集的大概做个记录。——TO DO</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="影视" scheme="https://loaderland.github.io/categories/%E5%BD%B1%E8%A7%86/"/>
    
    
    <category term="京都" scheme="https://loaderland.github.io/tags/%E4%BA%AC%E9%83%BD/"/>
    
    <category term="纪录片" scheme="https://loaderland.github.io/tags/%E7%BA%AA%E5%BD%95%E7%89%87/"/>
    
    <category term="京都人的秘密欢愉" scheme="https://loaderland.github.io/tags/%E4%BA%AC%E9%83%BD%E4%BA%BA%E7%9A%84%E7%A7%98%E5%AF%86%E6%AC%A2%E6%84%89/"/>
    
  </entry>
  
</feed>
